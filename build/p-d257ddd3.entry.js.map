{"version":3,"names":["CSS","button","XButton","disabled","key","label","onClick","ref","scale","h","class","tabIndex","type","icon","getIconScale","comboboxCss","isGroup","el","tagName","ComboboxItemGroup","itemUidPrefix","chipUidPrefix","labelUidPrefix","listboxUidPrefix","inputUidPrefix","Combobox","constructor","hostRef","this","placement","defaultMenuPlacement","internalValueChangeFlag","textInput","mutationObserver","createObserver","updateItems","resizeObserver","setMaxScrollerHeight","refreshSelectionDisplay","guid","inputHeight","ignoreSelectedEventsFlag","openTransitionProp","setFilteredPlacements","flipPlacements","filteredFlipPlacements","filterValidFlipPlacements","getValue","items","selectedItems","map","item","_a","value","toString","length","onLabelClick","setFocus","keyDownHandler","event","readOnly","activeChipIndex","activeItemIndex","allowCustomValues","filterText","addCustomChip","preventDefault","open","clearInputValue","filterItems","updateActiveItemIndex","selectionStart","previousChip","nextChip","filteredItems","shiftActiveItemIndex","comboboxInViewport","scrollIntoView","ensureRecentSelectedItemIsActive","defaultPrevented","scrollToActiveItem","clearDisabled","clearValue","toggleSelection","removeActiveChip","submitForm","notDeletable","selectionDisplay","selectedHiddenChipsCount","isMulti","removeLastChip","toggleCloseEnd","removeEventListener","toggleOpenEnd","async","listContainerEl","referenceEl","reposition","maxScrollerHeight","getMaxScrollerHeight","style","maxHeight","minWidth","clientWidth","calciteChipCloseHandler","comboboxItem","selection","find","calciteComboboxChipClose","emit","clickHandler","composedPath","some","node","classList","contains","XButtonCSS","componentLoaded","isSingleLike","selectionMode","allSelectedIndicatorChipEl","chipContainerEl","placeholder","selectedIndicatorChipEl","chipContainerElGap","parseInt","getComputedStyle","gap","replace","chipContainerElWidth","getElementWidth","fontSize","fontFamily","inputTextWidth","getTextWidth","inputWidth","calciteSize48","allSelectedIndicatorChipElWidth","selectedIndicatorChipElWidth","largestSelectedIndicatorChipWidth","Math","max","setCompactSelectionDisplay","chipEls","Array","from","shadowRoot","querySelectorAll","filter","chipEl","closable","availableHorizontalChipElSpace","round","refreshChipDisplay","setVisibleAndHiddenChips","setFloatingEl","floatingEl","connectFloatingUI","setContainerEl","observe","transitionEl","setChipContainerEl","setReferenceEl","setAllSelectedIndicatorChipEl","setSelectedIndicatorChipEl","inputHandler","target","filteredData","textLabel","debounce","text","setOpenToEmptyState","data","itemsAndGroups","getItemsAndGroups","matchAll","forEach","hidden","parent","grandparent","ancestors","ancestor","filterTextMatchPattern","RegExp","escapeRegExp","getFilteredItems","trim","calciteComboboxFilterChange","DEBOUNCE","internalComboboxChangeEvent","calciteComboboxChange","emitComboboxChange","getSelectedItems","match","selected","hasActiveChildren","sort","a","b","aIdx","indexOf","bIdx","getItems","groupItems","getGroupItems","getData","needsIcon","getNeedsIcon","groupItem","index","afterEmptyGroup","nextGroupItem","children","activeItem","height","calculateScrollerHeight","offsetHeight","scrollTop","offsetTop","comboboxFocusHandler","focus","form","undefined","placeholderIcon","placeholderIconFlipRtl","maxItems","validationMessage","validationIcon","validity","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","name","overlayPositioning","required","status","messages","messageOverrides","activeDescendant","compactSelectionDisplay","selectedVisibleChipsCount","effectiveLocale","defaultMessages","filterTextChange","openHandler","onToggleOpenCloseComponent","handleDisabledChange","maxItemsHandler","overlayPositioningHandler","handlePropsChange","valueHandler","isArray","includes","onMessagesChange","flipPlacementsHandler","selectedItemsHandler","componentOnReady","calciteComboboxItemChangeHandler","newIndex","delayed","componentFocusable","connectedCallback","connectInteractive","connectLocalized","connectMessages","connectLabel","connectForm","childList","subtree","setUpLoadableComponent","setUpMessages","componentDidLoad","afterConnectDefaultValueSet","setComponentLoaded","componentDidRender","updateHostInteraction","componentDidUpdate","disconnectedCallback","disconnect","_b","disconnectInteractive","disconnectLabel","disconnectForm","disconnectFloatingUI","disconnectLocalized","disconnectMessages","effectiveLocaleChange","updateMessages","resetText","bounding","getBoundingClientRect","top","left","right","window","innerWidth","document","documentElement","bottom","innerHeight","clientHeight","onBeforeOpen","calciteComboboxBeforeOpen","onOpen","calciteComboboxOpen","onBeforeClose","calciteComboboxBeforeClose","onClose","calciteComboboxClose","targetIndex","hideChip","add","chipInvisible","showChip","remove","chipElWidth","newCompactBreakpoint","maxCompactBreakpoint","newSelectedVisibleChipsCount","newSelectedHiddenChipsCount","itemsToProcess","parentHeight","childrenTotalHeight","ComboboxChildSelector","reduce","total","child","updateAncestors","getLabel","getItemAncestors","getItemChildren","description","filterDisabled","metadata","shortHeading","ComboboxItem","existingItem","createElement","prepend","active","focusChip","last","chip","querySelector","delta","i","isAllSelected","renderChips","chipClasses","reverse","itemLabel","pathLabel","join","appearance","iconFlipRtl","id","dismissLabel","removeTag","onCalciteChipClose","onFocusin","tabindex","title","renderAllSelectedIndicatorChip","allSelected","renderAllSelectedIndicatorChipCompact","all","renderSelectedIndicatorChip","selectedItemsCount","renderSelectedIndicatorChipCompact","showingInlineIcon","selectedItem","selectedIcon","singleSelectionMode","renderInput","single","showLabel","toAriaBoolean","getLabelText","input","onFocus","onInput","role","renderListBoxOptions","renderFloatingUIContainer","classes","listContainer","FloatingCSS","animation","animationActive","list","renderSelectedOrPlaceholderIcon","flipRtl","renderChevronIcon","render","allSelectionDisplay","singleSelectionDisplay","fitSelectionDisplay","isClearable","Host","InteractiveContainer","wrapper","onKeyDown","selectionDisplayFit","selectionDisplaySingle","htmlFor","clear","HiddenFormInputSlot","component","Validation","message","assetsDirs"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/functional/XButton.js","./node_modules/@esri/calcite-components/dist/collection/components/combobox/combobox.css?tag=calcite-combobox&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/combobox/combobox.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h } from \"@stencil/core\";\nimport { getIconScale } from \"../../utils/component\";\nexport const CSS = {\n    button: \"x-button\",\n};\nexport function XButton({ disabled, key, label, onClick, ref, scale, }) {\n    return (h(\"button\", { \"aria-label\": label, class: CSS.button, disabled: disabled, key: key, onClick: onClick, ref: ref, tabIndex: -1, type: \"button\" }, h(\"calcite-icon\", { icon: \"x\", scale: getIconScale(scale) })));\n}\n//# sourceMappingURL=XButton.js.map\n","/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-combobox-input-height: Specifies the height of the component's input.\n*/\n:host {\n  position: relative;\n  display: block;\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host([scale=s]) .x-button {\n  inline-size: 1rem;\n  block-size: 1rem;\n}\n\n:host([scale=m]) .x-button {\n  inline-size: 1.5rem;\n  block-size: 1.5rem;\n}\n\n:host([scale=l]) .x-button {\n  inline-size: 2rem;\n  block-size: 2rem;\n}\n\n.x-button {\n  margin: 0px;\n  display: flex;\n  cursor: pointer;\n  appearance: none;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n  border-width: 2px;\n  background-color: transparent;\n  color: var(--calcite-color-text-3);\n  outline-color: transparent;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  border-radius: 50%;\n  border-color: transparent;\n  background-color: var(--calcite-color-foreground-2);\n}\n.x-button:active, .x-button:hover {\n  color: var(--calcite-color-text-1);\n  background-color: var(--calcite-color-foreground-3);\n}\n.x-button:active {\n  border-style: solid;\n  border-color: var(--calcite-color-brand);\n}\n.x-button calcite-icon {\n  color: inherit;\n}\n\n:host([scale=s]) {\n  font-size: var(--calcite-font-size--2);\n  --calcite-combobox-item-spacing-unit-l: 0.5rem;\n  --calcite-combobox-item-spacing-unit-s: 0.25rem;\n  --calcite-combobox-input-height: 1rem;\n  --calcite-internal-combobox-input-margin-block: calc(0.25rem - 1px);\n}\n:host([scale=s]) .x-button {\n  margin-inline: 0.5rem;\n}\n\n:host([scale=m]) {\n  font-size: var(--calcite-font-size--1);\n  --calcite-combobox-item-spacing-unit-l: 0.75rem;\n  --calcite-combobox-item-spacing-unit-s: 0.5rem;\n  --calcite-combobox-input-height: 1rem;\n  --calcite-internal-combobox-input-margin-block: calc(0.5rem - 1px);\n}\n:host([scale=m]) .x-button {\n  margin-inline-end: 0.75rem;\n}\n\n:host([scale=l]) {\n  font-size: var(--calcite-font-size-0);\n  --calcite-combobox-item-spacing-unit-l: 1rem;\n  --calcite-combobox-item-spacing-unit-s: 0.75rem;\n  --calcite-combobox-input-height: 1.5rem;\n  --calcite-internal-combobox-input-margin-block: calc(0.625rem - 1px);\n}\n:host([scale=l]) .x-button {\n  margin-inline-end: 1rem;\n}\n\n.wrapper {\n  display: flex;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--calcite-color-border-input);\n  background-color: var(--calcite-color-foreground-1);\n  color: var(--calcite-color-text-1);\n  outline-color: transparent;\n  padding-block: calc(var(--calcite-combobox-item-spacing-unit-s) / 4);\n  padding-inline: var(--calcite-combobox-item-spacing-unit-l);\n}\n.wrapper:hover .icon {\n  color: var(--calcite-color-text-1);\n}\n\n:host(:focus-within) .wrapper,\n.wrapper--active {\n  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));\n  outline-offset: calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          );\n}\n\n:host([read-only]) .wrapper {\n  background-color: var(--calcite-color-background);\n}\n:host([read-only]) .label {\n  font-weight: var(--calcite-font-weight-medium);\n}\n\n:host([status=invalid]) .wrapper {\n  border-color: var(--calcite-color-status-danger);\n}\n\n:host([status=invalid]:focus-within) .wrapper {\n  outline: 2px solid var(--calcite-color-status-danger);\n  outline-offset: calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          );\n}\n\n.wrapper--single {\n  padding-block: 0;\n  padding-inline: var(--calcite-combobox-item-spacing-unit-l);\n  cursor: pointer;\n  flex-wrap: nowrap;\n}\n\n.grid-input {\n  position: relative;\n  display: flex;\n  flex-grow: 1;\n  flex-wrap: wrap;\n  align-items: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 0px;\n  gap: var(--calcite-combobox-item-spacing-unit-s);\n  margin-inline-end: var(--calcite-combobox-item-spacing-unit-s);\n}\n.grid-input.selection-display-fit, .grid-input.selection-display-single {\n  flex-wrap: nowrap;\n  overflow: hidden;\n}\n\n.input {\n  flex-grow: 1;\n  appearance: none;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  border-style: none;\n  background-color: transparent;\n  padding: 0px;\n  font-family: inherit;\n  color: var(--calcite-color-text-1);\n  font-size: inherit;\n  block-size: var(--calcite-combobox-input-height);\n  line-height: var(--calcite-combobox-input-height);\n  inline-size: 100%;\n  margin-block-end: var(--calcite-combobox-item-spacing-unit-s);\n  min-inline-size: 4.8125rem;\n}\n.input:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.input:placeholder-shown {\n  text-overflow: ellipsis;\n}\n\n.input--single {\n  padding: 0px;\n  margin-block: var(--calcite-internal-combobox-input-margin-block);\n}\n\n.wrapper--active .input-single {\n  cursor: text;\n}\n\n.input--hidden {\n  pointer-events: none;\n  inline-size: 0px;\n  min-inline-size: 0px;\n  opacity: 0;\n}\n\n.input--icon {\n  padding-block: 0;\n  padding-inline: var(--calcite-combobox-item-spacing-unit-l);\n}\n\n.input-wrap {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n}\n\n.input-wrap--single {\n  flex: 1 1 0%;\n  overflow: hidden;\n}\n\n.label {\n  pointer-events: none;\n  max-inline-size: 100%;\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 0px;\n  font-weight: var(--calcite-font-weight-normal);\n  block-size: var(--calcite-combobox-input-height);\n  line-height: var(--calcite-combobox-input-height);\n}\n\n.label--icon {\n  padding-inline: var(--calcite-combobox-item-spacing-unit-l);\n}\n\n.icon-end,\n.icon-start {\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n}\n\n.icon-end {\n  flex: none;\n}\n.icon-end .icon {\n  color: var(--calcite-color-text-3);\n}\n\n.floating-ui-container {\n  --calcite-floating-ui-z-index: var(--calcite-z-index-dropdown);\n  display: block;\n  position: absolute;\n  z-index: var(--calcite-floating-ui-z-index);\n  visibility: hidden;\n}\n\n.floating-ui-container .calcite-floating-ui-anim {\n  position: relative;\n  transition: var(--calcite-floating-ui-transition);\n  transition-property: transform, visibility, opacity;\n  opacity: 0;\n  box-shadow: 0 0 16px 0 rgba(0, 0, 0, 0.16);\n  z-index: var(--calcite-z-index);\n  border-radius: 0.25rem;\n}\n.floating-ui-container[data-placement^=bottom] .calcite-floating-ui-anim {\n  transform: translateY(-5px);\n}\n.floating-ui-container[data-placement^=top] .calcite-floating-ui-anim {\n  transform: translateY(5px);\n}\n.floating-ui-container[data-placement^=left] .calcite-floating-ui-anim {\n  transform: translateX(5px);\n}\n.floating-ui-container[data-placement^=right] .calcite-floating-ui-anim {\n  transform: translateX(-5px);\n}\n.floating-ui-container[data-placement] .calcite-floating-ui-anim--active {\n  opacity: 1;\n  transform: translate(0);\n}\n\n.floating-ui-container--active {\n  visibility: visible;\n}\n\n@media (forced-colors: active) {\n  .wrapper,\n  .floating-ui-container--active {\n    border: 1px solid canvasText;\n  }\n}\n.screen-readers-only {\n  position: absolute;\n  inline-size: 1px;\n  block-size: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.list-container {\n  max-block-size: 45vh;\n  overflow-y: auto;\n  background-color: var(--calcite-color-foreground-1);\n  inline-size: var(--calcite-dropdown-width);\n}\n\n.list {\n  margin: 0px;\n  display: block;\n  padding: 0px;\n}\n\n.list--hide {\n  block-size: 0px;\n  overflow: hidden;\n}\n\ncalcite-chip {\n  --calcite-animation-timing: 0;\n}\n\n.chip {\n  margin-block: calc(var(--calcite-combobox-item-spacing-unit-s) / 4);\n  max-inline-size: 100%;\n}\n\n.chip--active {\n  background-color: var(--calcite-color-foreground-3);\n}\n\n.chip--invisible {\n  visibility: hidden;\n  position: absolute;\n}\n\n.item {\n  display: block;\n}\n\n.validation-container {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  align-self: stretch;\n}\n\n:host([scale=m]) .validation-container,\n:host([scale=l]) .validation-container {\n  padding-block-start: 0.5rem;\n}\n\n:host([scale=s]) .validation-container {\n  padding-block-start: 0.25rem;\n}\n\n::slotted(input[slot=hidden-form-input]) {\n  margin: 0 !important;\n  opacity: 0 !important;\n  outline: none !important;\n  padding: 0 !important;\n  position: absolute !important;\n  inset: 0 !important;\n  transform: none !important;\n  -webkit-appearance: none !important;\n  z-index: -1 !important;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n::slotted(calcite-combobox-item-group:not(:first-child)) {\n  padding-block-start: var(--calcite-combobox-item-spacing-unit-l);\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, Host, } from \"@stencil/core\";\nimport { debounce, escapeRegExp } from \"lodash-es\";\nimport { calciteSize48 } from \"@esri/calcite-design-tokens/dist/es6/core.js\";\nimport { filter } from \"../../utils/filter\";\nimport { getElementWidth, getTextWidth, toAriaBoolean } from \"../../utils/dom\";\nimport { connectFloatingUI, defaultMenuPlacement, disconnectFloatingUI, filterValidFlipPlacements, FloatingCSS, reposition, } from \"../../utils/floating-ui\";\nimport { afterConnectDefaultValueSet, connectForm, disconnectForm, HiddenFormInputSlot, submitForm, } from \"../../utils/form\";\nimport { guid } from \"../../utils/guid\";\nimport { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, getLabelText } from \"../../utils/label\";\nimport { componentFocusable, componentLoaded, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { onToggleOpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { DEBOUNCE } from \"../../utils/resources\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from \"../../utils/t9n\";\nimport { CSS as XButtonCSS, XButton } from \"../functional/XButton\";\nimport { componentOnReady, getIconScale } from \"../../utils/component\";\nimport { Validation } from \"../functional/Validation\";\nimport { ComboboxChildSelector, ComboboxItem, ComboboxItemGroup, CSS } from \"./resources\";\nimport { getItemAncestors, getItemChildren, getLabel, hasActiveChildren, isSingleLike, } from \"./utils\";\nconst isGroup = (el) => el.tagName === ComboboxItemGroup;\nconst itemUidPrefix = \"combobox-item-\";\nconst chipUidPrefix = \"combobox-chip-\";\nconst labelUidPrefix = \"combobox-label-\";\nconst listboxUidPrefix = \"combobox-listbox-\";\nconst inputUidPrefix = \"combobox-input-\";\n/**\n * @slot - A slot for adding `calcite-combobox-item`s.\n */\nexport class Combobox {\n    constructor() {\n        this.placement = defaultMenuPlacement;\n        this.internalValueChangeFlag = false;\n        this.textInput = null;\n        this.mutationObserver = createObserver(\"mutation\", () => this.updateItems());\n        this.resizeObserver = createObserver(\"resize\", () => {\n            this.setMaxScrollerHeight();\n            this.refreshSelectionDisplay();\n        });\n        this.guid = guid();\n        this.inputHeight = 0;\n        this.ignoreSelectedEventsFlag = false;\n        this.openTransitionProp = \"opacity\";\n        this.setFilteredPlacements = () => {\n            const { el, flipPlacements } = this;\n            this.filteredFlipPlacements = flipPlacements\n                ? filterValidFlipPlacements(flipPlacements, el)\n                : null;\n        };\n        this.getValue = () => {\n            const items = this.selectedItems.map((item) => item?.value?.toString());\n            return items?.length ? (items.length > 1 ? items : items[0]) : \"\";\n        };\n        this.onLabelClick = () => {\n            this.setFocus();\n        };\n        this.keyDownHandler = (event) => {\n            if (this.readOnly) {\n                return;\n            }\n            const { key } = event;\n            switch (key) {\n                case \"Tab\":\n                    this.activeChipIndex = -1;\n                    this.activeItemIndex = -1;\n                    if (this.allowCustomValues && this.filterText) {\n                        this.addCustomChip(this.filterText, true);\n                        event.preventDefault();\n                    }\n                    else if (this.open) {\n                        this.open = false;\n                        event.preventDefault();\n                    }\n                    else if (!this.allowCustomValues && this.filterText) {\n                        this.clearInputValue();\n                        this.filterItems(\"\");\n                        this.updateActiveItemIndex(-1);\n                    }\n                    break;\n                case \"ArrowLeft\":\n                    if (this.activeChipIndex !== -1 || this.textInput.selectionStart === 0) {\n                        this.previousChip();\n                        event.preventDefault();\n                    }\n                    break;\n                case \"ArrowRight\":\n                    if (this.activeChipIndex !== -1) {\n                        this.nextChip();\n                        event.preventDefault();\n                    }\n                    break;\n                case \"ArrowUp\":\n                    if (this.filteredItems.length) {\n                        event.preventDefault();\n                        if (this.open) {\n                            this.shiftActiveItemIndex(-1);\n                        }\n                        if (!this.comboboxInViewport()) {\n                            this.el.scrollIntoView();\n                        }\n                    }\n                    break;\n                case \"ArrowDown\":\n                    if (this.filteredItems.length) {\n                        event.preventDefault();\n                        if (this.open) {\n                            this.shiftActiveItemIndex(1);\n                        }\n                        else {\n                            this.open = true;\n                            this.ensureRecentSelectedItemIsActive();\n                        }\n                        if (!this.comboboxInViewport()) {\n                            this.el.scrollIntoView();\n                        }\n                    }\n                    break;\n                case \" \":\n                    if (!this.textInput.value && !event.defaultPrevented) {\n                        if (!this.open) {\n                            this.open = true;\n                            this.shiftActiveItemIndex(1);\n                        }\n                        event.preventDefault();\n                    }\n                    break;\n                case \"Home\":\n                    if (!this.open) {\n                        return;\n                    }\n                    event.preventDefault();\n                    this.updateActiveItemIndex(0);\n                    this.scrollToActiveItem();\n                    if (!this.comboboxInViewport()) {\n                        this.el.scrollIntoView();\n                    }\n                    break;\n                case \"End\":\n                    if (!this.open) {\n                        return;\n                    }\n                    event.preventDefault();\n                    this.updateActiveItemIndex(this.filteredItems.length - 1);\n                    this.scrollToActiveItem();\n                    if (!this.comboboxInViewport()) {\n                        this.el.scrollIntoView();\n                    }\n                    break;\n                case \"Escape\":\n                    if (!this.clearDisabled && !this.open) {\n                        this.clearValue();\n                    }\n                    this.open = false;\n                    event.preventDefault();\n                    break;\n                case \"Enter\":\n                    if (this.open && this.activeItemIndex > -1) {\n                        this.toggleSelection(this.filteredItems[this.activeItemIndex]);\n                        event.preventDefault();\n                    }\n                    else if (this.activeChipIndex > -1) {\n                        this.removeActiveChip();\n                        event.preventDefault();\n                    }\n                    else if (this.allowCustomValues && this.filterText) {\n                        this.addCustomChip(this.filterText, true);\n                        event.preventDefault();\n                    }\n                    else if (!event.defaultPrevented) {\n                        if (submitForm(this)) {\n                            event.preventDefault();\n                        }\n                    }\n                    break;\n                case \"Delete\":\n                case \"Backspace\": {\n                    const notDeletable = this.selectionDisplay === \"single\" ||\n                        (this.selectionDisplay === \"fit\" && this.selectedHiddenChipsCount > 0);\n                    if (notDeletable) {\n                        return;\n                    }\n                    if (this.activeChipIndex > -1) {\n                        event.preventDefault();\n                        this.removeActiveChip();\n                    }\n                    else if (!this.filterText && this.isMulti()) {\n                        event.preventDefault();\n                        this.removeLastChip();\n                    }\n                    break;\n                }\n            }\n        };\n        this.toggleCloseEnd = () => {\n            this.open = false;\n            this.el.removeEventListener(\"calciteComboboxClose\", this.toggleCloseEnd);\n        };\n        this.toggleOpenEnd = () => {\n            this.open = false;\n            this.el.removeEventListener(\"calciteComboboxOpen\", this.toggleOpenEnd);\n        };\n        this.setMaxScrollerHeight = async () => {\n            const { listContainerEl, open, referenceEl } = this;\n            if (!listContainerEl || !open) {\n                return;\n            }\n            await this.reposition(true);\n            const maxScrollerHeight = this.getMaxScrollerHeight();\n            listContainerEl.style.maxHeight = maxScrollerHeight > 0 ? `${maxScrollerHeight}px` : \"\";\n            listContainerEl.style.minWidth = `${referenceEl.clientWidth}px`;\n            await this.reposition(true);\n        };\n        this.calciteChipCloseHandler = (comboboxItem) => {\n            this.open = false;\n            const selection = this.items.find((item) => item === comboboxItem);\n            if (selection) {\n                this.toggleSelection(selection, false);\n            }\n            this.calciteComboboxChipClose.emit();\n        };\n        this.clickHandler = (event) => {\n            if (this.readOnly) {\n                return;\n            }\n            const composedPath = event.composedPath();\n            if (composedPath.some((node) => node.tagName === \"CALCITE-CHIP\")) {\n                this.open = false;\n                event.preventDefault();\n                return;\n            }\n            if (composedPath.some((node) => node.classList?.contains(XButtonCSS.button))) {\n                this.clearValue();\n                event.preventDefault();\n                return;\n            }\n            this.open = !this.open;\n            this.ensureRecentSelectedItemIsActive();\n        };\n        this.refreshSelectionDisplay = async () => {\n            await componentLoaded(this);\n            if (isSingleLike(this.selectionMode)) {\n                return;\n            }\n            if (!this.textInput) {\n                return;\n            }\n            const { allSelectedIndicatorChipEl, chipContainerEl, selectionDisplay, placeholder, selectedIndicatorChipEl, textInput, } = this;\n            const chipContainerElGap = parseInt(getComputedStyle(chipContainerEl).gap.replace(\"px\", \"\"));\n            const chipContainerElWidth = getElementWidth(chipContainerEl);\n            const { fontSize, fontFamily } = getComputedStyle(textInput);\n            const inputTextWidth = getTextWidth(placeholder, `${fontSize} ${fontFamily}`);\n            const inputWidth = (inputTextWidth || parseInt(calciteSize48)) + chipContainerElGap;\n            const allSelectedIndicatorChipElWidth = getElementWidth(allSelectedIndicatorChipEl);\n            const selectedIndicatorChipElWidth = getElementWidth(selectedIndicatorChipEl);\n            const largestSelectedIndicatorChipWidth = Math.max(allSelectedIndicatorChipElWidth, selectedIndicatorChipElWidth);\n            this.setCompactSelectionDisplay({\n                chipContainerElGap,\n                chipContainerElWidth,\n                inputWidth,\n                largestSelectedIndicatorChipWidth,\n            });\n            if (selectionDisplay === \"fit\") {\n                const chipEls = Array.from(this.el.shadowRoot.querySelectorAll(\"calcite-chip\")).filter((chipEl) => chipEl.closable);\n                const availableHorizontalChipElSpace = Math.round(chipContainerElWidth -\n                    ((this.selectedHiddenChipsCount > 0 ? selectedIndicatorChipElWidth : 0) +\n                        chipContainerElGap +\n                        inputWidth +\n                        chipContainerElGap));\n                this.refreshChipDisplay({ availableHorizontalChipElSpace, chipContainerElGap, chipEls });\n                this.setVisibleAndHiddenChips(chipEls);\n            }\n        };\n        this.setFloatingEl = (el) => {\n            this.floatingEl = el;\n            connectFloatingUI(this, this.referenceEl, this.floatingEl);\n        };\n        this.setContainerEl = (el) => {\n            this.resizeObserver.observe(el);\n            this.listContainerEl = el;\n            this.transitionEl = el;\n        };\n        this.setChipContainerEl = (el) => {\n            this.resizeObserver.observe(el);\n            this.chipContainerEl = el;\n        };\n        this.setReferenceEl = (el) => {\n            this.referenceEl = el;\n            connectFloatingUI(this, this.referenceEl, this.floatingEl);\n        };\n        this.setAllSelectedIndicatorChipEl = (el) => {\n            this.allSelectedIndicatorChipEl = el;\n        };\n        this.setSelectedIndicatorChipEl = (el) => {\n            this.selectedIndicatorChipEl = el;\n        };\n        this.inputHandler = (event) => {\n            const value = event.target.value;\n            this.filterText = value;\n        };\n        this.filterItems = (() => {\n            const find = (item, filteredData) => item &&\n                filteredData.some(({ label, value }) => isGroup(item) ? label === item.label : value === item.value && label === item.textLabel);\n            return debounce((text, setOpenToEmptyState = false, emit = true) => {\n                const filteredData = filter(this.data, text);\n                const itemsAndGroups = this.getItemsAndGroups();\n                const matchAll = text === \"\";\n                itemsAndGroups.forEach((item) => {\n                    if (matchAll) {\n                        item.hidden = false;\n                        return;\n                    }\n                    const hidden = !find(item, filteredData);\n                    item.hidden = hidden;\n                    const [parent, grandparent] = item.ancestors;\n                    if (find(parent, filteredData) || find(grandparent, filteredData)) {\n                        item.hidden = false;\n                    }\n                    if (!hidden) {\n                        item.ancestors.forEach((ancestor) => (ancestor.hidden = false));\n                    }\n                });\n                this.filterTextMatchPattern =\n                    this.filterText && new RegExp(`(${escapeRegExp(this.filterText)})`, \"i\");\n                this.filteredItems = this.getFilteredItems();\n                this.filteredItems.forEach((item) => {\n                    item.filterTextMatchPattern = this.filterTextMatchPattern;\n                });\n                if (setOpenToEmptyState) {\n                    this.open = this.filterText.trim().length > 0 && this.filteredItems.length > 0;\n                }\n                if (emit) {\n                    this.calciteComboboxFilterChange.emit();\n                }\n            }, DEBOUNCE.filter);\n        })();\n        this.internalComboboxChangeEvent = () => {\n            this.calciteComboboxChange.emit();\n        };\n        this.emitComboboxChange = debounce(this.internalComboboxChangeEvent, 0);\n        this.getSelectedItems = () => {\n            if (!this.isMulti()) {\n                const match = this.items.find(({ selected }) => selected);\n                return match ? [match] : [];\n            }\n            return (this.items\n                .filter((item) => item.selected && (this.selectionMode !== \"ancestors\" || !hasActiveChildren(item)))\n                /** Preserve order of entered tags */\n                .sort((a, b) => {\n                const aIdx = this.selectedItems.indexOf(a);\n                const bIdx = this.selectedItems.indexOf(b);\n                if (aIdx > -1 && bIdx > -1) {\n                    return aIdx - bIdx;\n                }\n                return bIdx - aIdx;\n            }));\n        };\n        this.updateItems = () => {\n            this.items = this.getItems();\n            this.groupItems = this.getGroupItems();\n            this.data = this.getData();\n            this.selectedItems = this.getSelectedItems();\n            this.filteredItems = this.getFilteredItems();\n            this.needsIcon = this.getNeedsIcon();\n            this.items.forEach((item) => {\n                item.selectionMode = this.selectionMode;\n                item.scale = this.scale;\n            });\n            if (!this.allowCustomValues) {\n                this.setMaxScrollerHeight();\n            }\n            this.groupItems.forEach((groupItem, index, items) => {\n                if (index === 0) {\n                    groupItem.afterEmptyGroup = false;\n                }\n                const nextGroupItem = items[index + 1];\n                if (nextGroupItem) {\n                    nextGroupItem.afterEmptyGroup = groupItem.children.length === 0;\n                }\n            });\n        };\n        this.scrollToActiveItem = () => {\n            const activeItem = this.filteredItems[this.activeItemIndex];\n            if (!activeItem) {\n                return;\n            }\n            const height = this.calculateScrollerHeight(activeItem);\n            const { offsetHeight, scrollTop } = this.listContainerEl;\n            if (offsetHeight + scrollTop < activeItem.offsetTop + height) {\n                this.listContainerEl.scrollTop = activeItem.offsetTop - offsetHeight + height;\n            }\n            else if (activeItem.offsetTop < scrollTop) {\n                this.listContainerEl.scrollTop = activeItem.offsetTop;\n            }\n        };\n        this.comboboxFocusHandler = () => {\n            if (this.disabled) {\n                return;\n            }\n            this.textInput?.focus();\n        };\n        this.clearDisabled = false;\n        this.filterText = \"\";\n        this.selectionDisplay = \"all\";\n        this.open = false;\n        this.disabled = false;\n        this.form = undefined;\n        this.label = undefined;\n        this.placeholder = undefined;\n        this.placeholderIcon = undefined;\n        this.placeholderIconFlipRtl = false;\n        this.maxItems = 0;\n        this.validationMessage = undefined;\n        this.validationIcon = undefined;\n        this.validity = {\n            valid: false,\n            badInput: false,\n            customError: false,\n            patternMismatch: false,\n            rangeOverflow: false,\n            rangeUnderflow: false,\n            stepMismatch: false,\n            tooLong: false,\n            tooShort: false,\n            typeMismatch: false,\n            valueMissing: false,\n        };\n        this.name = undefined;\n        this.allowCustomValues = undefined;\n        this.overlayPositioning = \"absolute\";\n        this.required = false;\n        this.selectionMode = \"multiple\";\n        this.scale = \"m\";\n        this.status = \"idle\";\n        this.value = null;\n        this.flipPlacements = undefined;\n        this.messages = undefined;\n        this.messageOverrides = undefined;\n        this.selectedItems = [];\n        this.filteredItems = [];\n        this.readOnly = false;\n        this.items = [];\n        this.groupItems = [];\n        this.needsIcon = undefined;\n        this.activeItemIndex = -1;\n        this.activeChipIndex = -1;\n        this.activeDescendant = \"\";\n        this.compactSelectionDisplay = false;\n        this.selectedHiddenChipsCount = 0;\n        this.selectedVisibleChipsCount = 0;\n        this.effectiveLocale = undefined;\n        this.defaultMessages = undefined;\n    }\n    filterTextChange(value) {\n        this.updateActiveItemIndex(-1);\n        this.filterItems(value, true);\n    }\n    openHandler() {\n        onToggleOpenCloseComponent(this);\n        if (this.disabled) {\n            this.open = false;\n            return;\n        }\n        this.setMaxScrollerHeight();\n    }\n    handleDisabledChange(value) {\n        if (!value) {\n            this.open = false;\n        }\n    }\n    maxItemsHandler() {\n        this.setMaxScrollerHeight();\n    }\n    overlayPositioningHandler() {\n        this.reposition(true);\n    }\n    handlePropsChange() {\n        this.updateItems();\n    }\n    valueHandler(value) {\n        if (!this.internalValueChangeFlag) {\n            const items = this.getItems();\n            if (Array.isArray(value)) {\n                items.forEach((item) => (item.selected = value.includes(item.value)));\n            }\n            else if (value) {\n                items.forEach((item) => (item.selected = value === item.value));\n            }\n            else {\n                items.forEach((item) => (item.selected = false));\n            }\n            this.updateItems();\n        }\n    }\n    onMessagesChange() {\n        /*  wired up by t9n util */\n    }\n    flipPlacementsHandler() {\n        this.setFilteredPlacements();\n        this.reposition(true);\n    }\n    selectedItemsHandler() {\n        this.internalValueChangeFlag = true;\n        this.value = this.getValue();\n        this.internalValueChangeFlag = false;\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Event Listeners\n    //\n    //--------------------------------------------------------------------------\n    async documentClickHandler(event) {\n        if (this.disabled || event.composedPath().includes(this.el)) {\n            return;\n        }\n        await componentOnReady(this.el);\n        if (!this.allowCustomValues && this.filterText) {\n            this.clearInputValue();\n            this.filterItems(\"\");\n            this.updateActiveItemIndex(-1);\n        }\n        if (this.allowCustomValues && this.filterText.trim().length) {\n            this.addCustomChip(this.filterText);\n        }\n        this.open = false;\n    }\n    calciteComboboxItemChangeHandler(event) {\n        if (this.ignoreSelectedEventsFlag) {\n            return;\n        }\n        const target = event.target;\n        const newIndex = this.filteredItems.indexOf(target);\n        this.updateActiveItemIndex(newIndex);\n        this.toggleSelection(target, target.selected);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    //--------------------------------------------------------------------------\n    /**\n     * Updates the position of the component.\n     *\n     * @param delayed Reposition the component after a delay\n     * @returns Promise\n     */\n    async reposition(delayed = false) {\n        const { floatingEl, referenceEl, placement, overlayPositioning, filteredFlipPlacements } = this;\n        return reposition(this, {\n            floatingEl,\n            referenceEl,\n            overlayPositioning,\n            placement,\n            flipPlacements: filteredFlipPlacements,\n            type: \"menu\",\n        }, delayed);\n    }\n    /** Sets focus on the component. */\n    async setFocus() {\n        await componentFocusable(this);\n        this.textInput?.focus();\n        this.activeChipIndex = -1;\n        this.activeItemIndex = -1;\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    // --------------------------------------------------------------------------\n    connectedCallback() {\n        connectInteractive(this);\n        connectLocalized(this);\n        connectMessages(this);\n        connectLabel(this);\n        connectForm(this);\n        this.internalValueChangeFlag = true;\n        this.value = this.getValue();\n        this.internalValueChangeFlag = false;\n        this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n        this.updateItems();\n        this.setFilteredPlacements();\n        if (this.open) {\n            this.openHandler();\n            onToggleOpenCloseComponent(this);\n        }\n        connectFloatingUI(this, this.referenceEl, this.floatingEl);\n    }\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.updateItems();\n        await setUpMessages(this);\n        this.filterItems(this.filterText, false, false);\n    }\n    componentDidLoad() {\n        afterConnectDefaultValueSet(this, this.getValue());\n        connectFloatingUI(this, this.referenceEl, this.floatingEl);\n        setComponentLoaded(this);\n    }\n    componentDidRender() {\n        if (this.el.offsetHeight !== this.inputHeight) {\n            this.reposition(true);\n            this.inputHeight = this.el.offsetHeight;\n        }\n        updateHostInteraction(this);\n    }\n    componentDidUpdate() {\n        this.refreshSelectionDisplay();\n    }\n    disconnectedCallback() {\n        this.mutationObserver?.disconnect();\n        this.resizeObserver?.disconnect();\n        disconnectInteractive(this);\n        disconnectLabel(this);\n        disconnectForm(this);\n        disconnectFloatingUI(this, this.referenceEl, this.floatingEl);\n        disconnectLocalized(this);\n        disconnectMessages(this);\n    }\n    effectiveLocaleChange() {\n        updateMessages(this, this.effectiveLocale);\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    clearValue() {\n        this.ignoreSelectedEventsFlag = true;\n        this.items.forEach((el) => (el.selected = false));\n        this.ignoreSelectedEventsFlag = false;\n        this.selectedItems = [];\n        this.emitComboboxChange();\n        this.open = false;\n        this.updateActiveItemIndex(-1);\n        this.resetText();\n        this.filterItems(\"\");\n        this.setFocus();\n    }\n    clearInputValue() {\n        this.textInput.value = \"\";\n        this.filterText = \"\";\n    }\n    comboboxInViewport() {\n        const bounding = this.el.getBoundingClientRect();\n        return (bounding.top >= 0 &&\n            bounding.left >= 0 &&\n            bounding.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n            bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight));\n    }\n    onBeforeOpen() {\n        this.scrollToActiveItem();\n        this.calciteComboboxBeforeOpen.emit();\n    }\n    onOpen() {\n        this.calciteComboboxOpen.emit();\n    }\n    onBeforeClose() {\n        this.calciteComboboxBeforeClose.emit();\n    }\n    onClose() {\n        this.calciteComboboxClose.emit();\n    }\n    ensureRecentSelectedItemIsActive() {\n        const { selectedItems } = this;\n        const targetIndex = selectedItems.length === 0 ? 0 : this.items.indexOf(selectedItems[selectedItems.length - 1]);\n        this.updateActiveItemIndex(targetIndex);\n    }\n    hideChip(chipEl) {\n        chipEl.classList.add(CSS.chipInvisible);\n    }\n    showChip(chipEl) {\n        chipEl.classList.remove(CSS.chipInvisible);\n    }\n    refreshChipDisplay({ chipEls, availableHorizontalChipElSpace, chipContainerElGap, }) {\n        chipEls.forEach((chipEl) => {\n            if (!chipEl.selected) {\n                this.hideChip(chipEl);\n            }\n            else {\n                const chipElWidth = getElementWidth(chipEl);\n                if (chipElWidth && chipElWidth < availableHorizontalChipElSpace) {\n                    availableHorizontalChipElSpace -= chipElWidth + chipContainerElGap;\n                    this.showChip(chipEl);\n                    return;\n                }\n            }\n            this.hideChip(chipEl);\n        });\n    }\n    setCompactSelectionDisplay({ chipContainerElGap, chipContainerElWidth, inputWidth, largestSelectedIndicatorChipWidth, }) {\n        const newCompactBreakpoint = Math.round(largestSelectedIndicatorChipWidth + chipContainerElGap + inputWidth);\n        if (!this.maxCompactBreakpoint || this.maxCompactBreakpoint < newCompactBreakpoint) {\n            this.maxCompactBreakpoint = newCompactBreakpoint;\n        }\n        this.compactSelectionDisplay = chipContainerElWidth < this.maxCompactBreakpoint;\n    }\n    setVisibleAndHiddenChips(chipEls) {\n        let newSelectedVisibleChipsCount = 0;\n        chipEls.forEach((chipEl) => {\n            if (chipEl.selected && !chipEl.classList.contains(CSS.chipInvisible)) {\n                newSelectedVisibleChipsCount++;\n            }\n        });\n        if (newSelectedVisibleChipsCount !== this.selectedVisibleChipsCount) {\n            this.selectedVisibleChipsCount = newSelectedVisibleChipsCount;\n        }\n        const newSelectedHiddenChipsCount = this.getSelectedItems().length - newSelectedVisibleChipsCount;\n        if (newSelectedHiddenChipsCount !== this.selectedHiddenChipsCount) {\n            this.selectedHiddenChipsCount = newSelectedHiddenChipsCount;\n        }\n    }\n    getMaxScrollerHeight() {\n        const items = this.getItemsAndGroups().filter((item) => !item.hidden);\n        const { maxItems } = this;\n        let itemsToProcess = 0;\n        let maxScrollerHeight = 0;\n        if (items.length > maxItems) {\n            items.forEach((item) => {\n                if (itemsToProcess < maxItems) {\n                    const height = this.calculateScrollerHeight(item);\n                    if (height > 0) {\n                        maxScrollerHeight += height;\n                        itemsToProcess++;\n                    }\n                }\n            });\n        }\n        return maxScrollerHeight;\n    }\n    calculateScrollerHeight(item) {\n        if (!item) {\n            return;\n        }\n        // if item has children items, don't count their height twice\n        const parentHeight = item.getBoundingClientRect().height;\n        const childrenTotalHeight = Array.from(item.querySelectorAll(ComboboxChildSelector)).reduce((total, child) => total + child.getBoundingClientRect().height, 0);\n        return parentHeight - childrenTotalHeight;\n    }\n    getItemsAndGroups() {\n        return [...this.groupItems, ...this.items];\n    }\n    toggleSelection(item, value = !item.selected) {\n        if (!item ||\n            (this.selectionMode === \"single-persist\" && item.selected && item.value === this.value)) {\n            return;\n        }\n        if (this.isMulti()) {\n            item.selected = value;\n            this.updateAncestors(item);\n            this.selectedItems = this.getSelectedItems();\n            this.emitComboboxChange();\n            this.resetText();\n            this.filterItems(\"\");\n        }\n        else {\n            this.ignoreSelectedEventsFlag = true;\n            this.items.forEach((el) => (el.selected = el === item ? value : false));\n            this.ignoreSelectedEventsFlag = false;\n            this.selectedItems = this.getSelectedItems();\n            this.emitComboboxChange();\n            if (this.textInput) {\n                this.textInput.value = getLabel(item);\n            }\n            this.open = false;\n            this.updateActiveItemIndex(-1);\n            this.resetText();\n            this.filterItems(\"\");\n        }\n    }\n    updateAncestors(item) {\n        if (this.selectionMode !== \"ancestors\") {\n            return;\n        }\n        const ancestors = getItemAncestors(item);\n        const children = getItemChildren(item);\n        if (item.selected) {\n            ancestors.forEach((el) => {\n                el.selected = true;\n            });\n        }\n        else {\n            children.forEach((el) => (el.selected = false));\n            [...ancestors].forEach((el) => {\n                if (!hasActiveChildren(el)) {\n                    el.selected = false;\n                }\n            });\n        }\n    }\n    getFilteredItems() {\n        return this.filterText === \"\" ? this.items : this.items.filter((item) => !item.hidden);\n    }\n    getData() {\n        return this.items.map((item) => ({\n            description: item.description,\n            filterDisabled: item.filterDisabled,\n            label: item.textLabel,\n            metadata: item.metadata,\n            shortHeading: item.shortHeading,\n            value: item.value,\n        }));\n    }\n    getNeedsIcon() {\n        return isSingleLike(this.selectionMode) && this.items.some((item) => item.icon);\n    }\n    resetText() {\n        if (this.textInput) {\n            this.textInput.value = \"\";\n        }\n        this.filterText = \"\";\n    }\n    getItems() {\n        const items = Array.from(this.el.querySelectorAll(ComboboxItem));\n        return items.filter((item) => !item.disabled);\n    }\n    getGroupItems() {\n        return Array.from(this.el.querySelectorAll(ComboboxItemGroup));\n    }\n    addCustomChip(value, focus) {\n        const existingItem = this.items.find((el) => el.textLabel === value);\n        if (existingItem) {\n            this.toggleSelection(existingItem, true);\n        }\n        else {\n            if (!this.isMulti()) {\n                this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);\n            }\n            const item = document.createElement(\"calcite-combobox-item\");\n            item.value = value;\n            item.textLabel = value;\n            item.selected = true;\n            this.el.prepend(item);\n            this.resetText();\n            if (focus) {\n                this.setFocus();\n            }\n            this.updateItems();\n            this.filterItems(\"\");\n            this.open = true;\n            this.emitComboboxChange();\n        }\n    }\n    removeActiveChip() {\n        this.toggleSelection(this.selectedItems[this.activeChipIndex], false);\n        this.setFocus();\n    }\n    removeLastChip() {\n        this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);\n        this.setFocus();\n    }\n    previousChip() {\n        const length = this.selectedItems.length - 1;\n        const active = this.activeChipIndex;\n        this.activeChipIndex = active === -1 ? length : Math.max(active - 1, 0);\n        this.updateActiveItemIndex(-1);\n        this.focusChip();\n    }\n    nextChip() {\n        const last = this.selectedItems.length - 1;\n        const newIndex = this.activeChipIndex + 1;\n        if (newIndex > last) {\n            this.activeChipIndex = -1;\n            this.setFocus();\n        }\n        else {\n            this.activeChipIndex = newIndex;\n            this.focusChip();\n        }\n        this.updateActiveItemIndex(-1);\n    }\n    focusChip() {\n        const guid = this.selectedItems[this.activeChipIndex]?.guid;\n        const chip = guid\n            ? this.referenceEl.querySelector(`#${chipUidPrefix}${guid}`)\n            : null;\n        chip?.setFocus();\n    }\n    shiftActiveItemIndex(delta) {\n        const { length } = this.filteredItems;\n        const newIndex = (this.activeItemIndex + length + delta) % length;\n        this.updateActiveItemIndex(newIndex);\n        this.scrollToActiveItem();\n    }\n    updateActiveItemIndex(index) {\n        this.activeItemIndex = index;\n        let activeDescendant = null;\n        this.filteredItems.forEach((el, i) => {\n            if (i === index) {\n                el.active = true;\n                activeDescendant = `${itemUidPrefix}${el.guid}`;\n            }\n            else {\n                el.active = false;\n            }\n        });\n        this.activeDescendant = activeDescendant;\n        if (this.activeItemIndex > -1) {\n            this.activeChipIndex = -1;\n        }\n    }\n    isAllSelected() {\n        return this.getItems().length === this.getSelectedItems().length;\n    }\n    isMulti() {\n        return !isSingleLike(this.selectionMode);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    renderChips() {\n        const { activeChipIndex, readOnly, scale, selectionMode, messages } = this;\n        return this.selectedItems.map((item, i) => {\n            const chipClasses = {\n                chip: true,\n                \"chip--active\": activeChipIndex === i,\n            };\n            const ancestors = [...getItemAncestors(item)].reverse();\n            const itemLabel = getLabel(item);\n            const pathLabel = [...ancestors, item].map((el) => getLabel(el));\n            const label = selectionMode !== \"ancestors\" ? itemLabel : pathLabel.join(\" / \");\n            return (h(\"calcite-chip\", { appearance: readOnly ? \"outline\" : \"solid\", class: chipClasses, closable: !readOnly, \"data-test-id\": `chip-${i}`, icon: item.icon, iconFlipRtl: item.iconFlipRtl, id: item.guid ? `${chipUidPrefix}${item.guid}` : null, key: itemLabel, messageOverrides: { dismissLabel: messages.removeTag }, onCalciteChipClose: () => this.calciteChipCloseHandler(item), onFocusin: () => (this.activeChipIndex = i), scale: scale, selected: item.selected, tabindex: activeChipIndex === i ? 0 : -1, title: label, value: item.value }, label));\n        });\n    }\n    renderAllSelectedIndicatorChip() {\n        const { compactSelectionDisplay, scale, selectedVisibleChipsCount, setAllSelectedIndicatorChipEl, } = this;\n        const label = this.messages.allSelected;\n        return (h(\"calcite-chip\", { class: {\n                chip: true,\n                [CSS.chipInvisible]: !(this.isAllSelected() &&\n                    !selectedVisibleChipsCount &&\n                    !compactSelectionDisplay),\n            }, ref: setAllSelectedIndicatorChipEl, scale: scale, title: label, value: \"\" }, label));\n    }\n    renderAllSelectedIndicatorChipCompact() {\n        const { compactSelectionDisplay, scale, selectedVisibleChipsCount } = this;\n        const label = this.messages.all || \"All\";\n        return (h(\"calcite-chip\", { class: {\n                chip: true,\n                [CSS.chipInvisible]: !(this.isAllSelected() &&\n                    !selectedVisibleChipsCount &&\n                    compactSelectionDisplay),\n            }, scale: scale, title: label, value: \"\" }, label));\n    }\n    renderSelectedIndicatorChip() {\n        const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, selectedVisibleChipsCount, setSelectedIndicatorChipEl, } = this;\n        let chipInvisible;\n        let label;\n        if (compactSelectionDisplay) {\n            chipInvisible = true;\n        }\n        else {\n            if (selectionDisplay === \"single\") {\n                const selectedItemsCount = getSelectedItems().length;\n                if (this.isAllSelected()) {\n                    chipInvisible = true;\n                }\n                else if (selectedItemsCount > 0) {\n                    chipInvisible = false;\n                }\n                else {\n                    chipInvisible = true;\n                }\n                label = `${selectedItemsCount} ${this.messages.selected}`;\n            }\n            else if (selectionDisplay === \"fit\") {\n                chipInvisible = !!((this.isAllSelected() && selectedVisibleChipsCount === 0) ||\n                    selectedHiddenChipsCount === 0);\n                label =\n                    selectedVisibleChipsCount > 0\n                        ? `+${selectedHiddenChipsCount}`\n                        : `${selectedHiddenChipsCount} ${this.messages.selected}`;\n            }\n        }\n        return (h(\"calcite-chip\", { class: {\n                chip: true,\n                [CSS.chipInvisible]: chipInvisible,\n            }, ref: setSelectedIndicatorChipEl, scale: scale, title: label, value: \"\" }, label));\n    }\n    renderSelectedIndicatorChipCompact() {\n        const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, } = this;\n        let chipInvisible;\n        let label;\n        if (compactSelectionDisplay) {\n            const selectedItemsCount = getSelectedItems().length;\n            if (this.isAllSelected()) {\n                chipInvisible = true;\n            }\n            else if (selectionDisplay === \"fit\") {\n                chipInvisible = !(selectedHiddenChipsCount > 0);\n                label = `${selectedHiddenChipsCount || 0}`;\n            }\n            else if (selectionDisplay === \"single\") {\n                chipInvisible = !(selectedItemsCount > 0);\n                label = `${selectedItemsCount}`;\n            }\n        }\n        else {\n            chipInvisible = true;\n        }\n        return (h(\"calcite-chip\", { class: {\n                chip: true,\n                [CSS.chipInvisible]: chipInvisible,\n            }, scale: scale, title: label, value: \"\" }, label));\n    }\n    get showingInlineIcon() {\n        const { placeholderIcon, selectionMode, selectedItems, open } = this;\n        const selectedItem = selectedItems[0];\n        const selectedIcon = selectedItem?.icon;\n        const singleSelectionMode = isSingleLike(selectionMode);\n        return !open && selectedItem\n            ? !!selectedIcon && singleSelectionMode\n            : !!placeholderIcon && (!selectedItem || singleSelectionMode);\n    }\n    renderInput() {\n        const { guid, disabled, placeholder, selectionMode, selectedItems, open } = this;\n        const single = isSingleLike(selectionMode);\n        const selectedItem = selectedItems[0];\n        const showLabel = !open && single && !!selectedItem;\n        return (h(\"span\", { class: {\n                \"input-wrap\": true,\n                \"input-wrap--single\": single,\n            } }, showLabel && (h(\"span\", { class: {\n                label: true,\n                \"label--icon\": !!selectedItem?.icon,\n            }, key: \"label\" }, getLabel(selectedItem))), h(\"input\", { \"aria-activedescendant\": this.activeDescendant, \"aria-autocomplete\": \"list\", \"aria-controls\": `${listboxUidPrefix}${guid}`, \"aria-expanded\": toAriaBoolean(open), \"aria-haspopup\": \"listbox\", \"aria-label\": getLabelText(this), \"aria-owns\": `${listboxUidPrefix}${guid}`, class: {\n                [CSS.input]: true,\n                \"input--single\": true,\n                \"input--hidden\": showLabel,\n                \"input--icon\": this.showingInlineIcon && !!this.placeholderIcon,\n            }, \"data-test-id\": \"input\", disabled: disabled, id: `${inputUidPrefix}${guid}`, key: \"input\", onFocus: this.comboboxFocusHandler, onInput: this.inputHandler, placeholder: placeholder, readOnly: this.readOnly, ref: (el) => (this.textInput = el), role: \"combobox\", tabindex: this.activeChipIndex === -1 ? 0 : -1, type: \"text\", value: this.filterText })));\n    }\n    renderListBoxOptions() {\n        return this.filteredItems.map((item) => (h(\"li\", { \"aria-selected\": toAriaBoolean(item.selected), id: item.guid ? `${itemUidPrefix}${item.guid}` : null, role: \"option\", tabindex: \"-1\" }, item.textLabel)));\n    }\n    renderFloatingUIContainer() {\n        const { setFloatingEl, setContainerEl, open } = this;\n        const classes = {\n            [CSS.listContainer]: true,\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: open,\n        };\n        return (h(\"div\", { \"aria-hidden\": \"true\", class: {\n                \"floating-ui-container\": true,\n                \"floating-ui-container--active\": open,\n            }, ref: setFloatingEl }, h(\"div\", { class: classes, ref: setContainerEl }, h(\"ul\", { class: { list: true, \"list--hide\": !open } }, h(\"slot\", null)))));\n    }\n    renderSelectedOrPlaceholderIcon() {\n        const { selectedItems, placeholderIcon, placeholderIconFlipRtl } = this;\n        const selectedItem = selectedItems[0];\n        const selectedIcon = selectedItem?.icon;\n        return (this.showingInlineIcon && (h(\"span\", { class: \"icon-start\", key: \"selected-placeholder-icon\" }, h(\"calcite-icon\", { class: \"selected-icon\", flipRtl: this.open && selectedItem ? selectedItem.iconFlipRtl : placeholderIconFlipRtl, icon: !this.open && selectedItem ? selectedIcon : placeholderIcon, scale: getIconScale(this.scale) }))));\n    }\n    renderChevronIcon() {\n        const { open } = this;\n        return (h(\"span\", { class: \"icon-end\", key: \"chevron\" }, h(\"calcite-icon\", { class: CSS.icon, icon: open ? \"chevron-up\" : \"chevron-down\", scale: getIconScale(this.scale) })));\n    }\n    render() {\n        const { selectionDisplay, guid, label, open, readOnly } = this;\n        const singleSelectionMode = isSingleLike(this.selectionMode);\n        const allSelectionDisplay = selectionDisplay === \"all\";\n        const singleSelectionDisplay = selectionDisplay === \"single\";\n        const fitSelectionDisplay = !singleSelectionMode && selectionDisplay === \"fit\";\n        const isClearable = !this.clearDisabled && this.value?.length > 0;\n        return (h(Host, { key: 'c51466b3ff7d6aaf29578ba9a017cab02b49d704', onClick: this.comboboxFocusHandler }, h(InteractiveContainer, { key: '5c1e3383be919a3348677607b46f79a8baefeee7', disabled: this.disabled }, h(\"div\", { key: 'ffb0ee17748ed4827cfca2c8aea8f39fc82a05cc', \"aria-live\": \"polite\", class: {\n                wrapper: true,\n                \"wrapper--single\": singleSelectionMode || !this.selectedItems.length,\n                \"wrapper--active\": open,\n            }, onClick: this.clickHandler, onKeyDown: this.keyDownHandler, ref: this.setReferenceEl }, this.renderSelectedOrPlaceholderIcon(), h(\"div\", { class: {\n                \"grid-input\": true,\n                [CSS.selectionDisplayFit]: fitSelectionDisplay,\n                [CSS.selectionDisplaySingle]: singleSelectionDisplay,\n            }, key: \"grid\", ref: this.setChipContainerEl }, !singleSelectionMode && !singleSelectionDisplay && this.renderChips(), !singleSelectionMode &&\n            !allSelectionDisplay && [\n            this.renderSelectedIndicatorChip(),\n            this.renderSelectedIndicatorChipCompact(),\n            this.renderAllSelectedIndicatorChip(),\n            this.renderAllSelectedIndicatorChipCompact(),\n        ], h(\"label\", { key: 'd60ddc1697b80245c56fd7b553408beb21296b3d', class: \"screen-readers-only\", htmlFor: `${inputUidPrefix}${guid}`, id: `${labelUidPrefix}${guid}` }, label), this.renderInput()), !readOnly && isClearable ? (h(XButton, { disabled: this.disabled, key: \"close-button\", label: this.messages.clear, scale: this.scale })) : null, !readOnly && this.renderChevronIcon()), h(\"ul\", { key: '856e6f4bd4fcf6db32fb6e8d984fcdb7c4776448', \"aria-labelledby\": `${labelUidPrefix}${guid}`, \"aria-multiselectable\": \"true\", class: \"screen-readers-only\", id: `${listboxUidPrefix}${guid}`, role: \"listbox\", tabIndex: -1 }, this.renderListBoxOptions()), this.renderFloatingUIContainer(), h(HiddenFormInputSlot, { key: 'eca6c0108b0fbb8e6851c6cc86d15dc70318a4a3', component: this }), this.validationMessage && this.status === \"invalid\" ? (h(Validation, { icon: this.validationIcon, message: this.validationMessage, scale: this.scale, status: this.status })) : null)));\n    }\n    static get is() { return \"calcite-combobox\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"combobox.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"combobox.css\"]\n        };\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    static get properties() {\n        return {\n            \"clearDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the value-clearing will be disabled.\"\n                },\n                \"attribute\": \"clear-disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"filterText\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text for the component's filter input field.\"\n                },\n                \"attribute\": \"filter-text\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"\\\"\"\n            },\n            \"selectionDisplay\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"SelectionDisplay\",\n                    \"resolved\": \"\\\"all\\\" | \\\"fit\\\" | \\\"single\\\"\",\n                    \"references\": {\n                        \"SelectionDisplay\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/combobox/interfaces.ts::SelectionDisplay\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `selectionMode` is `\\\"ancestors\\\"` or `\\\"multiple\\\"`, specifies the display of multiple `calcite-combobox-item` selections, where:\\n\\n`\\\"all\\\"` displays all selections with individual `calcite-chip`s,\\n\\n`\\\"fit\\\"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and\\n\\n`\\\"single\\\"` displays one `calcite-chip` with the total number of selections.\"\n                },\n                \"attribute\": \"selection-display\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"all\\\"\"\n            },\n            \"open\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, displays and positions the component.\"\n                },\n                \"attribute\": \"open\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"form\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `id` of the form that will be associated with the component.\\n\\nWhen not set, the component will be associated with its ancestor form element, if any.\"\n                },\n                \"attribute\": \"form\",\n                \"reflect\": true\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": true,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Accessible name for the component.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the placeholder text for the input.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"placeholderIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"IconNameOrString\",\n                    \"resolved\": \"string\",\n                    \"references\": {\n                        \"IconNameOrString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../icon/interfaces\",\n                            \"id\": \"src/components/icon/interfaces.ts::IconNameOrString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the placeholder icon for the input.\"\n                },\n                \"attribute\": \"placeholder-icon\",\n                \"reflect\": true\n            },\n            \"placeholderIconFlipRtl\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the icon will be flipped when the element direction is right-to-left (`\\\"rtl\\\"`).\"\n                },\n                \"attribute\": \"placeholder-icon-flip-rtl\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"maxItems\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.\"\n                },\n                \"attribute\": \"max-items\",\n                \"reflect\": true,\n                \"defaultValue\": \"0\"\n            },\n            \"validationMessage\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the validation message to display under the component.\"\n                },\n                \"attribute\": \"validation-message\",\n                \"reflect\": false\n            },\n            \"validationIcon\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"IconNameOrString | boolean\",\n                    \"resolved\": \"boolean | string\",\n                    \"references\": {\n                        \"IconNameOrString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../icon/interfaces\",\n                            \"id\": \"src/components/icon/interfaces.ts::IconNameOrString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the validation icon to display under the component.\"\n                },\n                \"attribute\": \"validation-icon\",\n                \"reflect\": true\n            },\n            \"validity\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"MutableValidityState\",\n                    \"resolved\": \"{ valid: boolean; badInput: boolean; customError: boolean; patternMismatch: boolean; rangeOverflow: boolean; rangeUnderflow: boolean; stepMismatch: boolean; tooLong: boolean; tooShort: boolean; typeMismatch: boolean; valueMissing: boolean; }\",\n                    \"references\": {\n                        \"MutableValidityState\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/form\",\n                            \"id\": \"src/utils/form.tsx::MutableValidityState\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }, {\n                            \"name\": \"mdn\",\n                            \"text\": \"[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\"\n                        }],\n                    \"text\": \"The current validation state of the component.\"\n                },\n                \"defaultValue\": \"{\\n    valid: false,\\n    badInput: false,\\n    customError: false,\\n    patternMismatch: false,\\n    rangeOverflow: false,\\n    rangeUnderflow: false,\\n    stepMismatch: false,\\n    tooLong: false,\\n    tooShort: false,\\n    typeMismatch: false,\\n    valueMissing: false,\\n  }\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the name of the component.\\n\\nRequired to pass the component's `value` on form submission.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": true\n            },\n            \"allowCustomValues\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, allows entry of custom values, which are not in the original set of items.\"\n                },\n                \"attribute\": \"allow-custom-values\",\n                \"reflect\": true\n            },\n            \"overlayPositioning\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"OverlayPositioning\",\n                    \"resolved\": \"\\\"absolute\\\" | \\\"fixed\\\"\",\n                    \"references\": {\n                        \"OverlayPositioning\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/floating-ui\",\n                            \"id\": \"src/utils/floating-ui.ts::OverlayPositioning\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Determines the type of positioning to use for the overlaid content.\\n\\nUsing `\\\"absolute\\\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\\n\\n`\\\"fixed\\\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\\\"fixed\\\"`.\"\n                },\n                \"attribute\": \"overlay-positioning\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"absolute\\\"\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the component must have a value in order for the form to submit.\"\n                },\n                \"attribute\": \"required\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"selectionMode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\n    \\\"single\\\" | \\\"single-persist\\\" | \\\"ancestors\\\" | \\\"multiple\\\",\\n    SelectionMode\\n  >\",\n                    \"resolved\": \"\\\"ancestors\\\" | \\\"multiple\\\" | \\\"single\\\" | \\\"single-persist\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"SelectionMode\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::SelectionMode\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the selection mode of the component, where:\\n\\n`\\\"multiple\\\"` allows any number of selections,\\n\\n`\\\"single\\\"` allows only one selection,\\n\\n`\\\"single-persist\\\"` allows one selection and prevents de-selection, and\\n\\n`\\\"ancestors\\\"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.\"\n                },\n                \"attribute\": \"selection-mode\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"multiple\\\"\"\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"status\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Status\",\n                    \"resolved\": \"\\\"idle\\\" | \\\"invalid\\\" | \\\"valid\\\"\",\n                    \"references\": {\n                        \"Status\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Status\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the status of the input field, which determines message and icons.\"\n                },\n                \"attribute\": \"status\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"idle\\\"\"\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | string[]\",\n                    \"resolved\": \"string | string[]\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The component's value(s) from the selected `calcite-combobox-item`(s).\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"null\"\n            },\n            \"flipPlacements\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"FlipPlacement[]\",\n                    \"resolved\": \"FlipPlacement[]\",\n                    \"references\": {\n                        \"FlipPlacement\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/floating-ui\",\n                            \"id\": \"src/utils/floating-ui.ts::FlipPlacement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Defines the available placements that can be used when a flip occurs.\"\n                }\n            },\n            \"messages\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ComboboxMessages\",\n                    \"resolved\": \"{ all: string; allSelected: string; clear: string; removeTag: string; selected: string; }\",\n                    \"references\": {\n                        \"ComboboxMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/combobox/t9n\",\n                            \"id\": \"src/components/combobox/assets/combobox/t9n/index.d.ts::ComboboxMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Made into a prop for testing purposes only\"\n                }\n            },\n            \"messageOverrides\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"Partial<ComboboxMessages>\",\n                    \"resolved\": \"{ all?: string; allSelected?: string; clear?: string; removeTag?: string; selected?: string; }\",\n                    \"references\": {\n                        \"Partial\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Partial\"\n                        },\n                        \"ComboboxMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/combobox/t9n\",\n                            \"id\": \"src/components/combobox/assets/combobox/t9n/index.d.ts::ComboboxMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Use this property to override individual strings used by the component.\"\n                }\n            },\n            \"selectedItems\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"HTMLCalciteComboboxItemElement[]\",\n                    \"resolved\": \"HTMLCalciteComboboxItemElement[]\",\n                    \"references\": {\n                        \"HTMLCalciteComboboxItemElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteComboboxItemElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Specifies the component's selected items.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"filteredItems\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"HTMLCalciteComboboxItemElement[]\",\n                    \"resolved\": \"HTMLCalciteComboboxItemElement[]\",\n                    \"references\": {\n                        \"HTMLCalciteComboboxItemElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteComboboxItemElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Specifies the component's filtered items.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"readOnly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\"\n                },\n                \"attribute\": \"read-only\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"items\": {},\n            \"groupItems\": {},\n            \"needsIcon\": {},\n            \"activeItemIndex\": {},\n            \"activeChipIndex\": {},\n            \"activeDescendant\": {},\n            \"compactSelectionDisplay\": {},\n            \"selectedHiddenChipsCount\": {},\n            \"selectedVisibleChipsCount\": {},\n            \"effectiveLocale\": {},\n            \"defaultMessages\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteComboboxChange\",\n                \"name\": \"calciteComboboxChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the selected item(s) changes.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxFilterChange\",\n                \"name\": \"calciteComboboxFilterChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when text is added to filter the options list.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxChipClose\",\n                \"name\": \"calciteComboboxChipClose\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when a selected item in the component is closed via its `calcite-chip`.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxBeforeClose\",\n                \"name\": \"calciteComboboxBeforeClose\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is requested to be closed, and before the closing transition begins.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxClose\",\n                \"name\": \"calciteComboboxClose\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is closed and animation is complete.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxBeforeOpen\",\n                \"name\": \"calciteComboboxBeforeOpen\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteComboboxOpen\",\n                \"name\": \"calciteComboboxOpen\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is open and animation is complete.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"reposition\": {\n                \"complexType\": {\n                    \"signature\": \"(delayed?: boolean) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"delayed\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"Reposition the component after a delay\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Updates the position of the component.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"delayed Reposition the component after a delay\"\n                        }, {\n                            \"name\": \"returns\",\n                            \"text\": \"Promise\"\n                        }]\n                }\n            },\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"filterText\",\n                \"methodName\": \"filterTextChange\"\n            }, {\n                \"propName\": \"open\",\n                \"methodName\": \"openHandler\"\n            }, {\n                \"propName\": \"disabled\",\n                \"methodName\": \"handleDisabledChange\"\n            }, {\n                \"propName\": \"maxItems\",\n                \"methodName\": \"maxItemsHandler\"\n            }, {\n                \"propName\": \"overlayPositioning\",\n                \"methodName\": \"overlayPositioningHandler\"\n            }, {\n                \"propName\": \"selectionMode\",\n                \"methodName\": \"handlePropsChange\"\n            }, {\n                \"propName\": \"scale\",\n                \"methodName\": \"handlePropsChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueHandler\"\n            }, {\n                \"propName\": \"messageOverrides\",\n                \"methodName\": \"onMessagesChange\"\n            }, {\n                \"propName\": \"flipPlacements\",\n                \"methodName\": \"flipPlacementsHandler\"\n            }, {\n                \"propName\": \"selectedItems\",\n                \"methodName\": \"selectedItemsHandler\"\n            }, {\n                \"propName\": \"effectiveLocale\",\n                \"methodName\": \"effectiveLocaleChange\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"click\",\n                \"method\": \"documentClickHandler\",\n                \"target\": \"document\",\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteComboboxItemChange\",\n                \"method\": \"calciteComboboxItemChangeHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n//# sourceMappingURL=combobox.js.map\n"],"mappings":"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"}