{"version":3,"names":["SLOTS","title","message","link","actionsEnd","CSS","close","container","content","icon","noticeCss","Notice","constructor","hostRef","this","setTransitionEl","el","transitionEl","open","openTransitionProp","kind","closable","undefined","iconFlipRtl","scale","width","messages","messageOverrides","effectiveLocale","defaultMessages","openHandler","onToggleOpenCloseComponent","onMessagesChange","updateRequestedIcon","requestedIcon","setRequestedIcon","KindIcons","connectedCallback","connectConditionalSlotComponent","connectLocalized","connectMessages","disconnectedCallback","disconnectConditionalSlotComponent","disconnectLocalized","disconnectMessages","async","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","render","closeButton","h","key","class","onClick","ref","getIconScale","hasActionEnd","getSlotted","flipRtl","name","componentFocusable","noticeLinkEl","querySelector","setFocus","focus","onBeforeClose","calciteNoticeBeforeClose","emit","onBeforeOpen","calciteNoticeBeforeOpen","onClose","calciteNoticeClose","onOpen","calciteNoticeOpen","effectiveLocaleChange","updateMessages","assetsDirs"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/notice/resources.js","./node_modules/@esri/calcite-components/dist/collection/components/notice/notice.css?tag=calcite-notice&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/notice/notice.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nexport const SLOTS = {\n    title: \"title\",\n    message: \"message\",\n    link: \"link\",\n    actionsEnd: \"actions-end\",\n};\nexport const CSS = {\n    actionsEnd: \"actions-end\",\n    close: \"notice-close\",\n    container: \"container\",\n    content: \"notice-content\",\n    icon: \"notice-icon\",\n};\n//# sourceMappingURL=resources.js.map\n","/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-notice-width: The width of the component.\n*/\n:host([scale=s]) {\n  --calcite-notice-spacing-token-small: 0.5rem;\n  --calcite-notice-spacing-token-large: 0.75rem;\n}\n:host([scale=s]) .container slot[name=title]::slotted(*),\n:host([scale=s]) .container *::slotted([slot=title]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n:host([scale=s]) .container slot[name=message]::slotted(*),\n:host([scale=s]) .container *::slotted([slot=message]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size--2);\n  line-height: 1.375;\n}\n:host([scale=s]) ::slotted(calcite-link) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size--2);\n  line-height: 1.375;\n}\n:host([scale=s]) .notice-close {\n  padding: 0.5rem;\n}\n\n:host([scale=m]) {\n  --calcite-notice-spacing-token-small: 0.75rem;\n  --calcite-notice-spacing-token-large: 1rem;\n}\n:host([scale=m]) .container slot[name=title]::slotted(*),\n:host([scale=m]) .container *::slotted([slot=title]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n:host([scale=m]) .container slot[name=message]::slotted(*),\n:host([scale=m]) .container *::slotted([slot=message]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n:host([scale=m]) ::slotted(calcite-link) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n\n:host([scale=l]) {\n  --calcite-notice-spacing-token-small: 1rem;\n  --calcite-notice-spacing-token-large: 1.25rem;\n}\n:host([scale=l]) .container slot[name=title]::slotted(*),\n:host([scale=l]) .container *::slotted([slot=title]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size-1);\n  line-height: 1.375;\n}\n:host([scale=l]) .container slot[name=message]::slotted(*),\n:host([scale=l]) .container *::slotted([slot=message]) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n:host([scale=l]) ::slotted(calcite-link) {\n  margin-block: 0.125rem;\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n\n:host([width=auto]) {\n  --calcite-notice-width: auto;\n}\n\n:host([width=half]) {\n  --calcite-notice-width: 50%;\n}\n\n:host([width=full]) {\n  --calcite-notice-width: 100%;\n}\n\n:host {\n  margin-inline: auto;\n  display: none;\n  max-inline-size: 100%;\n  align-items: center;\n  inline-size: var(--calcite-notice-width);\n}\n\n.container {\n  pointer-events: none;\n  margin-block: 0px;\n  box-sizing: border-box;\n  display: none;\n  inline-size: 100%;\n  background-color: var(--calcite-color-foreground-1);\n  opacity: 0;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  max-block-size: 0;\n  text-align: start;\n  border-inline-start: 0 solid;\n  box-shadow: 0 0 0 0 transparent;\n}\n\n.notice-close {\n  outline-color: transparent;\n}\n.notice-close:focus {\n  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));\n  outline-offset: calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          );\n}\n\n:host {\n  display: flex;\n}\n\n:host([open]) .container {\n  pointer-events: auto;\n  display: flex;\n  max-block-size: 100%;\n  align-items: center;\n  border-width: 2px;\n  opacity: 1;\n  --tw-shadow: 0 4px 8px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -1px rgba(0, 0, 0, 0.04);\n  --tw-shadow-colored: 0 4px 8px -1px var(--tw-shadow-color), 0 2px 4px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.container slot[name=title]::slotted(*),\n.container *::slotted([slot=title]) {\n  margin: 0px;\n  font-weight: var(--calcite-font-weight-medium);\n  color: var(--calcite-color-text-1);\n}\n\n.container slot[name=message]::slotted(*),\n.container *::slotted([slot=message]) {\n  margin: 0px;\n  display: inline;\n  font-weight: var(--calcite-font-weight-normal);\n  color: var(--calcite-color-text-2);\n  margin-inline-end: var(--calcite-notice-spacing-token-small);\n}\n\n.notice-content {\n  box-sizing: border-box;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n  display: flex;\n  min-inline-size: 0px;\n  flex-direction: column;\n  overflow-wrap: break-word;\n  flex: 1 1 0;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: 0 var(--calcite-notice-spacing-token-small);\n}\n.notice-content:first-of-type:not(:only-child) {\n  padding-inline-start: var(--calcite-notice-spacing-token-large);\n}\n.notice-content:only-of-type {\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n}\n\n.notice-icon {\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n}\n\n.notice-close {\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n  align-self: stretch;\n  border-style: none;\n  background-color: transparent;\n  color: var(--calcite-color-text-3);\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-sizing: border-box;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n  -webkit-appearance: none;\n}\n.notice-close:hover, .notice-close:focus {\n  background-color: var(--calcite-color-foreground-2);\n  color: var(--calcite-color-text-1);\n}\n.notice-close:active {\n  background-color: var(--calcite-color-foreground-3);\n}\n\n.actions-end {\n  display: flex;\n  align-self: stretch;\n}\n\n:host([kind=brand]) .container {\n  border-color: var(--calcite-color-brand);\n}\n:host([kind=brand]) .container .notice-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([kind=info]) .container {\n  border-color: var(--calcite-color-status-info);\n}\n:host([kind=info]) .container .notice-icon {\n  color: var(--calcite-color-status-info);\n}\n\n:host([kind=danger]) .container {\n  border-color: var(--calcite-color-status-danger);\n}\n:host([kind=danger]) .container .notice-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([kind=success]) .container {\n  border-color: var(--calcite-color-status-success);\n}\n:host([kind=success]) .container .notice-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([kind=warning]) .container {\n  border-color: var(--calcite-color-status-warning);\n}\n:host([kind=warning]) .container .notice-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, } from \"@stencil/core\";\nimport { connectConditionalSlotComponent, disconnectConditionalSlotComponent, } from \"../../utils/conditionalSlot\";\nimport { getSlotted, setRequestedIcon } from \"../../utils/dom\";\nimport { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from \"../../utils/t9n\";\nimport { KindIcons } from \"../resources\";\nimport { onToggleOpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { getIconScale } from \"../../utils/component\";\nimport { CSS, SLOTS } from \"./resources\";\n/**\n * Notices are intended to be used to present users with important-but-not-crucial contextual tips or copy. Because\n * notices are displayed inline, a common use case is displaying them on page-load to present users with short hints or contextual copy.\n * They are optionally closable - useful for keeping track of whether or not a user has closed the notice. You can also choose not\n * to display a notice on page load and set the \"active\" attribute as needed to contextually provide inline messaging to users.\n */\n/**\n * @slot title - A slot for adding the title.\n * @slot message - A slot for adding the message.\n * @slot link - A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc.\n * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions.\n */\nexport class Notice {\n    constructor() {\n        this.setTransitionEl = (el) => {\n            this.transitionEl = el;\n        };\n        //--------------------------------------------------------------------------\n        //\n        //  Private Methods\n        //\n        //--------------------------------------------------------------------------\n        this.close = () => {\n            this.open = false;\n        };\n        this.openTransitionProp = \"opacity\";\n        this.open = false;\n        this.kind = \"brand\";\n        this.closable = false;\n        this.icon = undefined;\n        this.iconFlipRtl = false;\n        this.scale = \"m\";\n        this.width = \"auto\";\n        this.messages = undefined;\n        this.messageOverrides = undefined;\n        this.effectiveLocale = undefined;\n        this.defaultMessages = undefined;\n    }\n    openHandler() {\n        onToggleOpenCloseComponent(this);\n    }\n    onMessagesChange() {\n        /* wired up by t9n util */\n    }\n    updateRequestedIcon() {\n        this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    connectedCallback() {\n        connectConditionalSlotComponent(this);\n        connectLocalized(this);\n        connectMessages(this);\n    }\n    disconnectedCallback() {\n        disconnectConditionalSlotComponent(this);\n        disconnectLocalized(this);\n        disconnectMessages(this);\n    }\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n        await setUpMessages(this);\n        if (this.open) {\n            onToggleOpenCloseComponent(this);\n        }\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n    }\n    render() {\n        const { el } = this;\n        const closeButton = (h(\"button\", { key: '4de511d4d93ee2078a4ed0d5fee2397d4d433691', \"aria-label\": this.messages.close, class: CSS.close, onClick: this.close, ref: (el) => (this.closeButton = el) }, h(\"calcite-icon\", { key: 'bb983d2377b1f8c20b9d23cb63f258b4b6a670d9', icon: \"x\", scale: getIconScale(this.scale) })));\n        const hasActionEnd = getSlotted(el, SLOTS.actionsEnd);\n        return (h(\"div\", { key: 'd83f3161115f422c6a6bc8591a2763f0ab17dd83', class: CSS.container, ref: this.setTransitionEl }, this.requestedIcon ? (h(\"div\", { class: CSS.icon }, h(\"calcite-icon\", { flipRtl: this.iconFlipRtl, icon: this.requestedIcon, scale: getIconScale(this.scale) }))) : null, h(\"div\", { key: '3851d512eaea58676aa7c3de513e4aedf4e644c9', class: CSS.content }, h(\"slot\", { key: '6393d41eb420b92fc94467c108fc5aa4ab6e941c', name: SLOTS.title }), h(\"slot\", { key: 'f750570f0675e9f3ef9f76ed8362e848e5c6311c', name: SLOTS.message }), h(\"slot\", { key: '2c8ded4623c885d3b2d9897c7c402f96dffbc8d7', name: SLOTS.link })), hasActionEnd ? (h(\"div\", { class: CSS.actionsEnd }, h(\"slot\", { name: SLOTS.actionsEnd }))) : null, this.closable ? closeButton : null));\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    //--------------------------------------------------------------------------\n    /** Sets focus on the component's first focusable element. */\n    async setFocus() {\n        await componentFocusable(this);\n        const noticeLinkEl = this.el.querySelector(\"calcite-link\");\n        if (!this.closeButton && !noticeLinkEl) {\n            return;\n        }\n        if (noticeLinkEl) {\n            return noticeLinkEl.setFocus();\n        }\n        else if (this.closeButton) {\n            this.closeButton.focus();\n        }\n    }\n    onBeforeClose() {\n        this.calciteNoticeBeforeClose.emit();\n    }\n    onBeforeOpen() {\n        this.calciteNoticeBeforeOpen.emit();\n    }\n    onClose() {\n        this.calciteNoticeClose.emit();\n    }\n    onOpen() {\n        this.calciteNoticeOpen.emit();\n    }\n    effectiveLocaleChange() {\n        updateMessages(this, this.effectiveLocale);\n    }\n    static get is() { return \"calcite-notice\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"notice.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"notice.css\"]\n        };\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    static get properties() {\n        return {\n            \"open\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the component is visible.\"\n                },\n                \"attribute\": \"open\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"kind\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\n    \\\"brand\\\" | \\\"danger\\\" | \\\"info\\\" | \\\"success\\\" | \\\"warning\\\",\\n    Kind\\n  >\",\n                    \"resolved\": \"\\\"brand\\\" | \\\"danger\\\" | \\\"info\\\" | \\\"success\\\" | \\\"warning\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"Kind\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Kind\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the kind of the component, which will apply to top border and icon.\"\n                },\n                \"attribute\": \"kind\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"brand\\\"\"\n            },\n            \"closable\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, a close button is added to the component.\"\n                },\n                \"attribute\": \"closable\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"icon\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"IconNameOrString | boolean\",\n                    \"resolved\": \"boolean | string\",\n                    \"references\": {\n                        \"IconNameOrString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../icon/interfaces\",\n                            \"id\": \"src/components/icon/interfaces.ts::IconNameOrString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.\"\n                },\n                \"attribute\": \"icon\",\n                \"reflect\": true\n            },\n            \"iconFlipRtl\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the icon will be flipped when the element direction is right-to-left (`\\\"rtl\\\"`).\"\n                },\n                \"attribute\": \"icon-flip-rtl\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"width\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Width\",\n                    \"resolved\": \"\\\"auto\\\" | \\\"full\\\" | \\\"half\\\"\",\n                    \"references\": {\n                        \"Width\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Width\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the width of the component.\"\n                },\n                \"attribute\": \"width\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"auto\\\"\"\n            },\n            \"messages\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"NoticeMessages\",\n                    \"resolved\": \"{ close: string; }\",\n                    \"references\": {\n                        \"NoticeMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/notice/t9n\",\n                            \"id\": \"src/components/notice/assets/notice/t9n/index.d.ts::NoticeMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Made into a prop for testing purposes only\"\n                }\n            },\n            \"messageOverrides\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"Partial<NoticeMessages>\",\n                    \"resolved\": \"{ close?: string; }\",\n                    \"references\": {\n                        \"Partial\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Partial\"\n                        },\n                        \"NoticeMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/notice/t9n\",\n                            \"id\": \"src/components/notice/assets/notice/t9n/index.d.ts::NoticeMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Use this property to override individual strings used by the component.\"\n                }\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"effectiveLocale\": {},\n            \"defaultMessages\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteNoticeBeforeClose\",\n                \"name\": \"calciteNoticeBeforeClose\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is requested to be closed and before the closing transition begins.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteNoticeBeforeOpen\",\n                \"name\": \"calciteNoticeBeforeOpen\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteNoticeClose\",\n                \"name\": \"calciteNoticeClose\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is closed and animation is complete.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteNoticeOpen\",\n                \"name\": \"calciteNoticeOpen\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the component is open and animation is complete.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"open\",\n                \"methodName\": \"openHandler\"\n            }, {\n                \"propName\": \"messageOverrides\",\n                \"methodName\": \"onMessagesChange\"\n            }, {\n                \"propName\": \"icon\",\n                \"methodName\": \"updateRequestedIcon\"\n            }, {\n                \"propName\": \"kind\",\n                \"methodName\": \"updateRequestedIcon\"\n            }, {\n                \"propName\": \"effectiveLocale\",\n                \"methodName\": \"effectiveLocaleChange\"\n            }];\n    }\n}\n//# sourceMappingURL=notice.js.map\n"],"mappings":";;;;;GAKO,MAAMA,EAAQ,CACjBC,MAAO,QACPC,QAAS,UACTC,KAAM,OACNC,WAAY,eAET,MAAMC,EAAM,CACfD,WAAY,cACZE,MAAO,eACPC,UAAW,YACXC,QAAS,iBACTC,KAAM,eChBV,MAAMC,EAAY,ywN,MC2BLC,EAAM,MACfC,YAAAC,G,0PACIC,KAAKC,gBAAmBC,IACpBF,KAAKG,aAAeD,CAAE,EAO1BF,KAAKR,MAAQ,KACTQ,KAAKI,KAAO,KAAK,EAErBJ,KAAKK,mBAAqB,UAC1BL,KAAKI,KAAO,MACZJ,KAAKM,KAAO,QACZN,KAAKO,SAAW,MAChBP,KAAKL,KAAOa,UACZR,KAAKS,YAAc,MACnBT,KAAKU,MAAQ,IACbV,KAAKW,MAAQ,OACbX,KAAKY,SAAWJ,UAChBR,KAAKa,iBAAmBL,UACxBR,KAAKc,gBAAkBN,UACvBR,KAAKe,gBAAkBP,S,CAE3BQ,cACIC,EAA2BjB,K,CAE/BkB,mB,CAGAC,sBACInB,KAAKoB,cAAgBC,EAAiBC,EAAWtB,KAAKL,KAAMK,KAAKM,K,CAOrEiB,oBACIC,EAAgCxB,MAChCyB,EAAiBzB,MACjB0B,EAAgB1B,K,CAEpB2B,uBACIC,EAAmC5B,MACnC6B,EAAoB7B,MACpB8B,EAAmB9B,K,CAEvB+B,0BACIC,EAAuBhC,MACvBA,KAAKoB,cAAgBC,EAAiBC,EAAWtB,KAAKL,KAAMK,KAAKM,YAC3D2B,EAAcjC,MACpB,GAAIA,KAAKI,KAAM,CACXa,EAA2BjB,K,EAGnCkC,mBACIC,EAAmBnC,K,CAEvBoC,SACI,MAAMlC,GAAEA,GAAOF,KACf,MAAMqC,EAAeC,EAAE,SAAU,CAAEC,IAAK,2CAA4C,aAAcvC,KAAKY,SAASpB,MAAOgD,MAAOjD,EAAIC,MAAOiD,QAASzC,KAAKR,MAAOkD,IAAMxC,GAAQF,KAAKqC,YAAcnC,GAAOoC,EAAE,eAAgB,CAAEC,IAAK,2CAA4C5C,KAAM,IAAKe,MAAOiC,EAAa3C,KAAKU,UAC/S,MAAMkC,EAAeC,EAAW3C,EAAIhB,EAAMI,YAC1C,OAAQgD,EAAE,MAAO,CAAEC,IAAK,2CAA4CC,MAAOjD,EAAIE,UAAWiD,IAAK1C,KAAKC,iBAAmBD,KAAKoB,cAAiBkB,EAAE,MAAO,CAAEE,MAAOjD,EAAII,MAAQ2C,EAAE,eAAgB,CAAEQ,QAAS9C,KAAKS,YAAad,KAAMK,KAAKoB,cAAeV,MAAOiC,EAAa3C,KAAKU,UAAc,KAAM4B,EAAE,MAAO,CAAEC,IAAK,2CAA4CC,MAAOjD,EAAIG,SAAW4C,EAAE,OAAQ,CAAEC,IAAK,2CAA4CQ,KAAM7D,EAAMC,QAAUmD,EAAE,OAAQ,CAAEC,IAAK,2CAA4CQ,KAAM7D,EAAME,UAAYkD,EAAE,OAAQ,CAAEC,IAAK,2CAA4CQ,KAAM7D,EAAMG,QAAUuD,EAAgBN,EAAE,MAAO,CAAEE,MAAOjD,EAAID,YAAcgD,EAAE,OAAQ,CAAES,KAAM7D,EAAMI,cAAkB,KAAMU,KAAKO,SAAW8B,EAAc,K,CAQpvBN,uBACUiB,EAAmBhD,MACzB,MAAMiD,EAAejD,KAAKE,GAAGgD,cAAc,gBAC3C,IAAKlD,KAAKqC,cAAgBY,EAAc,CACpC,M,CAEJ,GAAIA,EAAc,CACd,OAAOA,EAAaE,U,MAEnB,GAAInD,KAAKqC,YAAa,CACvBrC,KAAKqC,YAAYe,O,EAGzBC,gBACIrD,KAAKsD,yBAAyBC,M,CAElCC,eACIxD,KAAKyD,wBAAwBF,M,CAEjCG,UACI1D,KAAK2D,mBAAmBJ,M,CAE5BK,SACI5D,KAAK6D,kBAAkBN,M,CAE3BO,wBACIC,EAAe/D,KAAMA,KAAKc,gB,CAcnBkD,wBAAe,MAAO,CAAC,SAAU,C"}