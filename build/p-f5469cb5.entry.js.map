{"version":3,"names":["colorPickerCss","throttleFor60FpsInMs","ColorPicker","constructor","hostRef","this","internalColorUpdateContext","isActiveChannelInputEmpty","mode","CSSColorMode","HEX","shiftKeyChannelAdjustment","upOrDownArrowKeyTracker","handleTabActivate","event","channelMode","currentTarget","getAttribute","updateChannelsFromColor","color","handleColorFieldScopeKeyDown","key","arrowKeyToXYOffset","ArrowUp","x","y","ArrowRight","ArrowDown","ArrowLeft","preventDefault","scopeOrientation","captureColorFieldColor","colorFieldScopeLeft","colorFieldScopeTop","handleHueScopeKeyDown","modifier","shiftKey","arrowKeyToXOffset","delta","hue","baseColorFieldColor","internalColorSet","handleHexInputChange","stopPropagation","isClearable","input","target","hex","value","normalizedHex","normalizeHex","hexify","alphaCompatible","Color","handleSavedColorSelect","swatch","handleChannelInput","channelIndex","Number","isAlphaChannel","limit","OPACITY_LIMITS","max","RGB_LIMITS","Object","keys","HSV_LIMITS","inputValue","adjustedValue","clamped","clamp","toString","handleChannelChange","handleChannelBlur","channels","restoreValueDueToEmptyInput","_a","handleChannelFocus","selectText","shouldClearChannels","getChannelInputLimit","opacityToAlpha","updateColorFromChannels","handleSavedColorKeyDown","isActivationKey","handleColorFieldPointerDown","isPrimaryPointerButton","offsetX","offsetY","window","addEventListener","globalPointerMoveHandler","globalPointerUpHandler","once","activeCanvasInfo","context","colorFieldRenderingContext","bounds","canvas","getBoundingClientRect","focusScope","colorFieldScopeNode","handleHueSliderPointerDown","hueSliderRenderingContext","captureHueSliderColor","hueScopeNode","handleOpacitySliderPointerDown","opacitySliderRenderingContext","captureOpacitySliderValue","opacityScopeNode","previouslyDragging","drawColorControls","calciteColorPickerChange","emit","el","isConnected","samplingX","samplingY","clientX","clientY","matches","width","height","storeColorFieldScope","node","storeHueScope","renderChannelsTabTitle","activeChannelMode","messages","selected","label","rgb","hsv","h","class","CSS","colorMode","onCalciteTabsActivate","renderChannelsTab","alphaChannel","isRgb","channelAriaLabels","red","green","blue","saturation","direction","getElementDir","channelsToRender","slice","control","dir","map","channelValue","index","alphaToOpacity","renderChannel","ariaLabel","suffix","channel","lang","effectiveLocale","numberButtonType","numberingSystem","onCalciteInputNumberChange","onCalciteInputNumberInput","onCalciteInternalInputNumberBlur","onCalciteInternalInputNumberFocus","onKeyDown","handleKeyDown","scale","style","marginLeft","suffixText","deleteColor","colorToDelete","inStorage","savedColors","indexOf","filter","storageKey","DEFAULT_STORAGE_KEY_PREFIX","storageId","localStorage","setItem","JSON","stringify","saveColor","colorToSave","alreadySaved","throttle","type","drawColorField","drawHueSlider","drawOpacitySlider","skipEqual","dimensions","colorField","Math","round","s","v","saturationv","initColorField","getContext","updateCanvasSize","initHueSlider","initOpacitySlider","storeOpacityScope","handleOpacityScopeKeyDown","alpha","allowEmpty","channelsDisabled","clearable","DEFAULT_COLOR","disabled","format","hideChannels","hexDisabled","hideHex","hideSaved","savedDisabled","undefined","messageOverrides","toChannels","defaultMessages","DIMENSIONS","m","hueScopeLeft","opacityScopeLeft","handleAllowEmptyOrClearableChange","handleAlphaChannelChange","console","warn","handleAlphaChannelDimensionsChange","effectiveSliderWidth","getSliderWidth","handleColorChange","oldColor","previousColor","handleFormatOrAlphaChannelChange","setMode","handleScaleChange","updateDimensions","onMessagesChange","handleValueChange","oldValue","checkMode","modeChanged","nextMode","parseMode","showIncompatibleColorWarning","dragging","calciteColorPickerInput","normalizeColor","colorChanged","colorEqual","endsWith","effectiveLocaleChange","updateMessages","handleChannelKeyUpOrDown","composedPath","some","classList","contains","complementaryBump","focusEl","requestAnimationFrame","focus","async","componentFocusable","focusFirstTabbable","setUpLoadableComponent","willSetNoColor","parsedMode","valueIsCompatible","initialColor","getItem","parse","setUpMessages","connectedCallback","connectInteractive","connectLocalized","connectMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","removeEventListener","disconnectInteractive","disconnectLocalized","disconnectMessages","componentDidRender","updateHostInteraction","render","thumb","radius","thumbRadius","sliderWidth","selectedColorInHex","hueTop","hueLeft","opacityTop","opacityLeft","noColor","vertical","noHex","noChannels","noSaved","adjustedColorFieldScopeLeft","adjustedColorFieldScopeTop","getAdjustedScopePosition","adjustedHueScopeLeft","adjustedHueScopeTop","adjustedOpacityScopeLeft","adjustedOpacityScopeTop","InteractiveContainer","container","controlAndScope","onPointerDown","ref","scope","colorFieldScope","role","top","left","tabindex","previewAndSliders","preview","sliders","slider","hueSlider","hueScope","opacitySlider","opacity","min","opacityScope","controlSection","section","hexAndChannelsGroup","hexOptions","onCalciteColorPickerHexInputChange","colorModeContainer","splitSection","slot","savedColorsSection","header","saved","savedColorsButtons","appearance","iconStart","kind","onClick","length","savedColor","tabIndex","ensureCompatibleMode","isAlphaCompatible","alphaMode","toAlphaMode","nonAlphaMode","toNonAlphaMode","HUE_LIMIT_CONSTRAINED","toValue","hexMode","includes","hasAlpha","HEXA","replace","string","needToInjectAlpha","model","values","colorObject","object","normalizeAlpha","getSliderCapSpacing","fillStyle","fillRect","whiteGradient","createLinearGradient","addColorStop","blackGradient","drawActiveColorFieldColor","setCanvasContextSize","devicePixelRatio","adjustedSliderDimensions","_b","_c","hsvColor","drawThumb","applyAlpha","startAngle","endAngle","PI","outlineWidth","beginPath","arc","fill","strokeStyle","lineWidth","stroke","pattern","createPattern","getCheckeredBackgroundPattern","globalCompositeOperation","drawActiveHueSliderColor","sliderBoundX","getSliderBoundX","gradient","hueSliderColorStopKeywords","offset","currentOffset","forEach","keyword","clearRect","drawSliderPath","startColor","midColor","endColor","drawActiveOpacitySliderColor","moveTo","lineTo","quadraticCurveTo","closePath","checkerPattern","document","createElement","patternContext","closeToEdge","closeToRangeEdge","remap","array","isAlpha","floor","push","SCOPE_SIZE","assetsDirs"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/color-picker/color-picker.css?tag=calcite-color-picker&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/color-picker/color-picker.js"],"sourcesContent":["/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n:host {\n  display: inline-block;\n  font-size: var(--calcite-font-size--2);\n  line-height: 1rem;\n  font-weight: var(--calcite-font-weight-normal);\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host([scale=s]) {\n  --calcite-color-picker-spacing: 8px;\n}\n:host([scale=s]) .container {\n  inline-size: 160px;\n}\n:host([scale=s]) .saved-colors {\n  gap: 0.25rem;\n  grid-template-columns: repeat(auto-fill, 20px);\n}\n\n:host([scale=m]) {\n  --calcite-color-picker-spacing: 12px;\n}\n:host([scale=m]) .container {\n  inline-size: 272px;\n}\n\n:host([scale=l]) {\n  --calcite-color-picker-spacing: 16px;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1rem;\n}\n:host([scale=l]) .container {\n  inline-size: 464px;\n}\n:host([scale=l]) .section:first-of-type {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n:host([scale=l]) .saved-colors {\n  grid-template-columns: repeat(auto-fill, 32px);\n}\n:host([scale=l]) .control-section {\n  flex-wrap: nowrap;\n  align-items: baseline;\n  flex-wrap: wrap;\n}\n:host([scale=l]) .color-hex-options {\n  display: flex;\n  flex-shrink: 1;\n  flex-direction: column;\n  justify-content: space-around;\n}\n:host([scale=l]) .color-mode-container {\n  flex-shrink: 3;\n}\n\n.container {\n  background-color: var(--calcite-color-foreground-1);\n  display: inline-block;\n  border: 1px solid var(--calcite-color-border-1);\n}\n\n.control-and-scope {\n  position: relative;\n  display: flex;\n  cursor: pointer;\n  touch-action: none;\n}\n\n.scope {\n  pointer-events: none;\n  position: absolute;\n  z-index: var(--calcite-z-index);\n  block-size: 1px;\n  inline-size: 1px;\n  border-radius: 9999px;\n  background-color: transparent;\n  font-size: var(--calcite-font-size--1);\n  outline-color: transparent;\n}\n.scope:focus {\n  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));\n  outline-offset: calc(\n            2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          );\n  outline-offset: 6px;\n}\n\n.hex-and-channels-group {\n  inline-size: 100%;\n}\n\n.hex-and-channels-group,\n.control-section {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.section {\n  padding-block: 0 var(--calcite-color-picker-spacing);\n  padding-inline: var(--calcite-color-picker-spacing);\n}\n.section:first-of-type {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.sliders {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-inline-start: var(--calcite-color-picker-spacing);\n  gap: var(--calcite-spacing-xxs);\n}\n\n.preview-and-sliders {\n  display: flex;\n  align-items: center;\n  padding: var(--calcite-color-picker-spacing);\n}\n\n.color-hex-options,\n.section--split {\n  flex-grow: 1;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: var(--calcite-color-text-1);\n}\n\n.color-mode-container {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.channels {\n  display: flex;\n  row-gap: 0.125rem;\n}\n\n.channel[data-channel-index=\"3\"] {\n  inline-size: 159px;\n}\n\n:host([scale=s]) .channels {\n  flex-wrap: wrap;\n}\n:host([scale=s]) .channel {\n  flex-basis: 30%;\n  flex-grow: 1;\n}\n:host([scale=s]) .channel[data-channel-index=\"3\"] {\n  inline-size: unset;\n  margin-inline-start: unset;\n}\n\n:host([scale=l]) .channel[data-channel-index=\"3\"] {\n  inline-size: 131px;\n}\n\n.saved-colors {\n  display: grid;\n  gap: 0.5rem;\n  padding-block-start: var(--calcite-color-picker-spacing);\n  grid-template-columns: repeat(auto-fill, 24px);\n}\n\n.saved-colors-buttons {\n  display: flex;\n}\n\n.saved-color {\n  outline-offset: 0;\n  outline-color: transparent;\n  cursor: pointer;\n}\n.saved-color:focus {\n  outline: 2px solid var(--calcite-color-brand);\n  outline-offset: 2px;\n}\n.saved-color:hover {\n  transition: outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;\n  outline: 2px solid var(--calcite-color-border-2);\n  outline-offset: 2px;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, } from \"@stencil/core\";\nimport Color from \"color\";\nimport { throttle } from \"lodash-es\";\nimport { focusFirstTabbable, getElementDir, isPrimaryPointerButton, } from \"../../utils/dom\";\nimport { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, } from \"../../utils/locale\";\nimport { clamp, closeToRangeEdge, remap } from \"../../utils/math\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from \"../../utils/t9n\";\nimport { alphaCompatible, alphaToOpacity, colorEqual, CSSColorMode, getSliderWidth, hexify, normalizeAlpha, normalizeColor, normalizeHex, opacityToAlpha, parseMode, toAlphaMode, toNonAlphaMode, } from \"./utils\";\nimport { CSS, DEFAULT_COLOR, DEFAULT_STORAGE_KEY_PREFIX, DIMENSIONS, HSV_LIMITS, HUE_LIMIT_CONSTRAINED, OPACITY_LIMITS, RGB_LIMITS, SCOPE_SIZE, } from \"./resources\";\nconst throttleFor60FpsInMs = 16;\nexport class ColorPicker {\n    constructor() {\n        this.internalColorUpdateContext = null;\n        this.isActiveChannelInputEmpty = false;\n        this.mode = CSSColorMode.HEX;\n        this.shiftKeyChannelAdjustment = 0;\n        this.upOrDownArrowKeyTracker = null;\n        this.handleTabActivate = (event) => {\n            this.channelMode = event.currentTarget.getAttribute(\"data-color-mode\");\n            this.updateChannelsFromColor(this.color);\n        };\n        this.handleColorFieldScopeKeyDown = (event) => {\n            const { key } = event;\n            const arrowKeyToXYOffset = {\n                ArrowUp: { x: 0, y: -10 },\n                ArrowRight: { x: 10, y: 0 },\n                ArrowDown: { x: 0, y: 10 },\n                ArrowLeft: { x: -10, y: 0 },\n            };\n            if (arrowKeyToXYOffset[key]) {\n                event.preventDefault();\n                this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n                this.captureColorFieldColor(this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0, this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0, false);\n            }\n        };\n        this.handleHueScopeKeyDown = (event) => {\n            const modifier = event.shiftKey ? 10 : 1;\n            const { key } = event;\n            const arrowKeyToXOffset = {\n                ArrowUp: 1,\n                ArrowRight: 1,\n                ArrowDown: -1,\n                ArrowLeft: -1,\n            };\n            if (arrowKeyToXOffset[key]) {\n                event.preventDefault();\n                const delta = arrowKeyToXOffset[key] * modifier;\n                const hue = this.baseColorFieldColor.hue();\n                const color = this.baseColorFieldColor.hue(hue + delta);\n                this.internalColorSet(color, false);\n            }\n        };\n        this.handleHexInputChange = (event) => {\n            event.stopPropagation();\n            const { isClearable, color } = this;\n            const input = event.target;\n            const hex = input.value;\n            if (isClearable && !hex) {\n                this.internalColorSet(null);\n                return;\n            }\n            const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n            if (hex !== normalizedHex) {\n                this.internalColorSet(Color(hex));\n            }\n        };\n        this.handleSavedColorSelect = (event) => {\n            const swatch = event.currentTarget;\n            this.internalColorSet(Color(swatch.color));\n        };\n        this.handleChannelInput = (event) => {\n            const input = event.currentTarget;\n            const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n            const isAlphaChannel = channelIndex === 3;\n            const limit = isAlphaChannel\n                ? OPACITY_LIMITS.max\n                : this.channelMode === \"rgb\"\n                    ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n                    : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n            let inputValue;\n            if (!input.value) {\n                inputValue = \"\";\n                this.isActiveChannelInputEmpty = true;\n                // reset this to allow typing in new value, when channel input is cleared after ArrowUp or ArrowDown have been pressed\n                this.upOrDownArrowKeyTracker = null;\n            }\n            else {\n                const value = Number(input.value);\n                const adjustedValue = value + this.shiftKeyChannelAdjustment;\n                const clamped = clamp(adjustedValue, 0, limit);\n                inputValue = clamped.toString();\n            }\n            input.value = inputValue;\n            if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n                // we treat nudging as a change event since the input won't emit when modifying the value directly\n                this.handleChannelChange(event);\n            }\n            else if (inputValue !== \"\") {\n                this.handleChannelChange(event);\n            }\n        };\n        this.handleChannelBlur = (event) => {\n            const input = event.currentTarget;\n            const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n            const channels = [...this.channels];\n            const restoreValueDueToEmptyInput = !input.value && !this.isClearable;\n            if (restoreValueDueToEmptyInput) {\n                input.value = channels[channelIndex]?.toString();\n            }\n        };\n        this.handleChannelFocus = (event) => {\n            const input = event.currentTarget;\n            input.selectText();\n        };\n        this.handleChannelChange = (event) => {\n            const input = event.currentTarget;\n            const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n            const channels = [...this.channels];\n            const shouldClearChannels = this.isClearable && !input.value;\n            if (shouldClearChannels) {\n                this.channels = [null, null, null, null];\n                this.internalColorSet(null);\n                return;\n            }\n            const isAlphaChannel = channelIndex === 3;\n            if (this.isActiveChannelInputEmpty && this.upOrDownArrowKeyTracker) {\n                input.value =\n                    this.upOrDownArrowKeyTracker === \"up\"\n                        ? (channels[channelIndex] + 1 <= this.getChannelInputLimit(channelIndex)\n                            ? channels[channelIndex] + 1\n                            : this.getChannelInputLimit(channelIndex)).toString()\n                        : (channels[channelIndex] - 1 >= 0 ? channels[channelIndex] - 1 : 0).toString();\n                this.isActiveChannelInputEmpty = false;\n                this.upOrDownArrowKeyTracker = null;\n            }\n            const value = input.value ? Number(input.value) : channels[channelIndex];\n            channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n            this.updateColorFromChannels(channels);\n        };\n        this.handleSavedColorKeyDown = (event) => {\n            if (isActivationKey(event.key)) {\n                event.preventDefault();\n                this.handleSavedColorSelect(event);\n            }\n        };\n        this.handleColorFieldPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX, offsetY } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.colorFieldRenderingContext,\n                bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureColorFieldColor(offsetX, offsetY);\n            this.focusScope(this.colorFieldScopeNode);\n        };\n        this.handleHueSliderPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.hueSliderRenderingContext,\n                bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureHueSliderColor(offsetX);\n            this.focusScope(this.hueScopeNode);\n        };\n        this.handleOpacitySliderPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.opacitySliderRenderingContext,\n                bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureOpacitySliderValue(offsetX);\n            this.focusScope(this.opacityScopeNode);\n        };\n        this.globalPointerUpHandler = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const previouslyDragging = this.activeCanvasInfo;\n            this.activeCanvasInfo = null;\n            this.drawColorControls();\n            if (previouslyDragging) {\n                this.calciteColorPickerChange.emit();\n            }\n        };\n        this.globalPointerMoveHandler = (event) => {\n            const { activeCanvasInfo, el } = this;\n            if (!el.isConnected || !activeCanvasInfo) {\n                return;\n            }\n            const { context, bounds } = activeCanvasInfo;\n            let samplingX;\n            let samplingY;\n            const { clientX, clientY } = event;\n            if (context.canvas.matches(\":hover\")) {\n                samplingX = clientX - bounds.x;\n                samplingY = clientY - bounds.y;\n            }\n            else {\n                // snap x and y to the closest edge\n                if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n                    samplingX = clientX - bounds.x;\n                }\n                else if (clientX < bounds.x) {\n                    samplingX = 0;\n                }\n                else {\n                    samplingX = bounds.width;\n                }\n                if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n                    samplingY = clientY - bounds.y;\n                }\n                else if (clientY < bounds.y) {\n                    samplingY = 0;\n                }\n                else {\n                    samplingY = bounds.height;\n                }\n            }\n            if (context === this.colorFieldRenderingContext) {\n                this.captureColorFieldColor(samplingX, samplingY, false);\n            }\n            else if (context === this.hueSliderRenderingContext) {\n                this.captureHueSliderColor(samplingX);\n            }\n            else if (context === this.opacitySliderRenderingContext) {\n                this.captureOpacitySliderValue(samplingX);\n            }\n        };\n        this.storeColorFieldScope = (node) => {\n            this.colorFieldScopeNode = node;\n        };\n        this.storeHueScope = (node) => {\n            this.hueScopeNode = node;\n        };\n        this.renderChannelsTabTitle = (channelMode) => {\n            const { channelMode: activeChannelMode, messages } = this;\n            const selected = channelMode === activeChannelMode;\n            const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n            return (h(\"calcite-tab-title\", { class: CSS.colorMode, \"data-color-mode\": channelMode, key: channelMode, onCalciteTabsActivate: this.handleTabActivate, selected: selected }, label));\n        };\n        this.renderChannelsTab = (channelMode) => {\n            const { isClearable, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;\n            const selected = channelMode === activeChannelMode;\n            const isRgb = channelMode === \"rgb\";\n            const channelAriaLabels = isRgb\n                ? [messages.red, messages.green, messages.blue]\n                : [messages.hue, messages.saturation, messages.value];\n            const direction = getElementDir(this.el);\n            const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n            return (h(\"calcite-tab\", { class: CSS.control, key: channelMode, selected: selected }, h(\"div\", { class: CSS.channels, dir: \"ltr\" }, channelsToRender.map((channelValue, index) => {\n                const isAlphaChannel = index === 3;\n                if (isAlphaChannel) {\n                    channelValue =\n                        isClearable && !channelValue ? channelValue : alphaToOpacity(channelValue);\n                }\n                /* the channel container is ltr, so we apply the host's direction */\n                return this.renderChannel(channelValue, index, channelAriaLabels[index], direction, isAlphaChannel ? \"%\" : \"\");\n            }))));\n        };\n        this.renderChannel = (value, index, ariaLabel, direction, suffix) => {\n            return (h(\"calcite-input-number\", { class: CSS.channel, \"data-channel-index\": index, dir: direction, key: index, label: ariaLabel, lang: this.effectiveLocale, numberButtonType: \"none\", numberingSystem: this.numberingSystem, onCalciteInputNumberChange: this.handleChannelChange, onCalciteInputNumberInput: this.handleChannelInput, onCalciteInternalInputNumberBlur: this.handleChannelBlur, onCalciteInternalInputNumberFocus: this.handleChannelFocus, onKeyDown: this.handleKeyDown, scale: this.scale === \"l\" ? \"m\" : \"s\",\n                // workaround to ensure input borders overlap as desired\n                // this is because the build transforms margin-left to its\n                // logical-prop, which is undesired as channels are always ltr\n                style: {\n                    marginLeft: index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\",\n                }, suffixText: suffix, value: value?.toString() }));\n        };\n        this.deleteColor = () => {\n            const colorToDelete = hexify(this.color, this.alphaChannel);\n            const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n            if (!inStorage) {\n                return;\n            }\n            const savedColors = this.savedColors.filter((color) => color !== colorToDelete);\n            this.savedColors = savedColors;\n            const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n            if (this.storageId) {\n                localStorage.setItem(storageKey, JSON.stringify(savedColors));\n            }\n        };\n        this.saveColor = () => {\n            const colorToSave = hexify(this.color, this.alphaChannel);\n            const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n            if (alreadySaved) {\n                return;\n            }\n            const savedColors = [...this.savedColors, colorToSave];\n            this.savedColors = savedColors;\n            const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n            if (this.storageId) {\n                localStorage.setItem(storageKey, JSON.stringify(savedColors));\n            }\n        };\n        this.drawColorControls = throttle((type = \"all\") => {\n            if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n                this.drawColorField();\n            }\n            if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n                this.drawHueSlider();\n            }\n            if (this.alphaChannel &&\n                (type === \"all\" || type === \"opacity-slider\") &&\n                this.opacitySliderRenderingContext) {\n                this.drawOpacitySlider();\n            }\n        }, throttleFor60FpsInMs);\n        this.captureColorFieldColor = (x, y, skipEqual = true) => {\n            const { dimensions: { colorField: { height, width }, }, } = this;\n            const saturation = Math.round((HSV_LIMITS.s / width) * x);\n            const value = Math.round((HSV_LIMITS.v / height) * (height - y));\n            this.internalColorSet(this.baseColorFieldColor.hsv().saturationv(saturation).value(value), skipEqual);\n        };\n        this.initColorField = (canvas) => {\n            this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"color-field\");\n            this.drawColorControls();\n        };\n        this.initHueSlider = (canvas) => {\n            this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"hue-slider\");\n            this.drawHueSlider();\n        };\n        this.initOpacitySlider = (canvas) => {\n            if (!canvas) {\n                return;\n            }\n            this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"opacity-slider\");\n            this.drawOpacitySlider();\n        };\n        this.storeOpacityScope = (node) => {\n            this.opacityScopeNode = node;\n        };\n        this.handleOpacityScopeKeyDown = (event) => {\n            const modifier = event.shiftKey ? 10 : 1;\n            const { key } = event;\n            const arrowKeyToXOffset = {\n                ArrowUp: 0.01,\n                ArrowRight: 0.01,\n                ArrowDown: -0.01,\n                ArrowLeft: -0.01,\n            };\n            if (arrowKeyToXOffset[key]) {\n                event.preventDefault();\n                const delta = arrowKeyToXOffset[key] * modifier;\n                const alpha = this.baseColorFieldColor.alpha();\n                const color = this.baseColorFieldColor.alpha(alpha + delta);\n                this.internalColorSet(color, false);\n            }\n        };\n        this.allowEmpty = false;\n        this.alphaChannel = false;\n        this.channelsDisabled = false;\n        this.clearable = false;\n        this.color = DEFAULT_COLOR;\n        this.disabled = false;\n        this.format = \"auto\";\n        this.hideChannels = false;\n        this.hexDisabled = false;\n        this.hideHex = false;\n        this.hideSaved = false;\n        this.savedDisabled = false;\n        this.scale = \"m\";\n        this.storageId = undefined;\n        this.messageOverrides = undefined;\n        this.numberingSystem = undefined;\n        this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel));\n        this.channelMode = \"rgb\";\n        this.channels = this.toChannels(DEFAULT_COLOR);\n        this.defaultMessages = undefined;\n        this.dimensions = DIMENSIONS.m;\n        this.effectiveLocale = \"\";\n        this.messages = undefined;\n        this.savedColors = [];\n        this.colorFieldScopeTop = undefined;\n        this.colorFieldScopeLeft = undefined;\n        this.hueScopeLeft = undefined;\n        this.opacityScopeLeft = undefined;\n        this.scopeOrientation = undefined;\n    }\n    handleAllowEmptyOrClearableChange() {\n        this.isClearable = this.clearable || this.allowEmpty;\n    }\n    handleAlphaChannelChange(alphaChannel) {\n        const { format } = this;\n        if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n            console.warn(`ignoring alphaChannel as the current format (${format}) does not support alpha`);\n            this.alphaChannel = false;\n        }\n    }\n    handleAlphaChannelDimensionsChange() {\n        this.effectiveSliderWidth = getSliderWidth(this.dimensions, this.alphaChannel);\n        this.drawColorControls();\n    }\n    handleColorChange(color, oldColor) {\n        this.drawColorControls();\n        this.updateChannelsFromColor(color);\n        this.previousColor = oldColor;\n    }\n    handleFormatOrAlphaChannelChange() {\n        this.setMode(this.format);\n        this.internalColorSet(this.color, false, \"internal\");\n    }\n    handleScaleChange(scale = \"m\") {\n        this.updateDimensions(scale);\n        this.updateCanvasSize(\"all\");\n        this.drawColorControls();\n    }\n    onMessagesChange() {\n        /* wired up by t9n util */\n    }\n    handleValueChange(value, oldValue) {\n        const { isClearable, format } = this;\n        const checkMode = !isClearable || value;\n        let modeChanged = false;\n        if (checkMode) {\n            const nextMode = parseMode(value);\n            if (!nextMode || (format !== \"auto\" && nextMode !== format)) {\n                this.showIncompatibleColorWarning(value, format);\n                this.value = oldValue;\n                return;\n            }\n            modeChanged = this.mode !== nextMode;\n            this.setMode(nextMode, this.internalColorUpdateContext === null);\n        }\n        const dragging = this.activeCanvasInfo;\n        if (this.internalColorUpdateContext === \"initial\") {\n            return;\n        }\n        if (this.internalColorUpdateContext === \"user-interaction\") {\n            this.calciteColorPickerInput.emit();\n            if (!dragging) {\n                this.calciteColorPickerChange.emit();\n            }\n            return;\n        }\n        const color = isClearable && !value\n            ? null\n            : Color(value != null && typeof value === \"object\" && alphaCompatible(this.mode)\n                ? normalizeColor(value)\n                : value);\n        const colorChanged = !colorEqual(color, this.color);\n        if (modeChanged || colorChanged) {\n            this.internalColorSet(color, this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")), \"internal\");\n        }\n    }\n    get baseColorFieldColor() {\n        return this.color || this.previousColor || DEFAULT_COLOR;\n    }\n    effectiveLocaleChange() {\n        updateMessages(this, this.effectiveLocale);\n    }\n    // using @Listen as a workaround for VDOM listener not firing\n    handleChannelKeyUpOrDown(event) {\n        this.shiftKeyChannelAdjustment = 0;\n        const { key } = event;\n        if ((key !== \"ArrowUp\" && key !== \"ArrowDown\") ||\n            !event.composedPath().some((node) => node.classList?.contains(CSS.channel))) {\n            return;\n        }\n        const { shiftKey } = event;\n        event.preventDefault();\n        if (!this.color) {\n            this.internalColorSet(this.previousColor);\n            event.stopPropagation();\n            return;\n        }\n        // this gets applied to the input's up/down arrow increment/decrement\n        const complementaryBump = 9;\n        this.shiftKeyChannelAdjustment =\n            key === \"ArrowUp\" && shiftKey\n                ? complementaryBump\n                : key === \"ArrowDown\" && shiftKey\n                    ? -complementaryBump\n                    : 0;\n        if (key === \"ArrowUp\") {\n            this.upOrDownArrowKeyTracker = \"up\";\n        }\n        if (key === \"ArrowDown\") {\n            this.upOrDownArrowKeyTracker = \"down\";\n        }\n    }\n    getChannelInputLimit(channelIndex) {\n        return this.channelMode === \"rgb\"\n            ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n            : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n    }\n    focusScope(focusEl) {\n        requestAnimationFrame(() => {\n            focusEl.focus();\n        });\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    //--------------------------------------------------------------------------\n    /** Sets focus on the component's first focusable element. */\n    async setFocus() {\n        await componentFocusable(this);\n        focusFirstTabbable(this.el);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.handleAllowEmptyOrClearableChange();\n        this.handleAlphaChannelDimensionsChange();\n        const { isClearable, color, format, value } = this;\n        const willSetNoColor = isClearable && !value;\n        const parsedMode = parseMode(value);\n        const valueIsCompatible = willSetNoColor || (format === \"auto\" && parsedMode) || format === parsedMode;\n        const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n        if (!valueIsCompatible) {\n            this.showIncompatibleColorWarning(value, format);\n        }\n        this.setMode(format, false);\n        this.internalColorSet(initialColor, false, \"initial\");\n        this.updateDimensions(this.scale);\n        const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n        if (this.storageId && localStorage.getItem(storageKey)) {\n            this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n        }\n        await setUpMessages(this);\n    }\n    connectedCallback() {\n        connectInteractive(this);\n        connectLocalized(this);\n        connectMessages(this);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n    }\n    disconnectedCallback() {\n        window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n        window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n        disconnectInteractive(this);\n        disconnectLocalized(this);\n        disconnectMessages(this);\n    }\n    componentDidRender() {\n        updateHostInteraction(this);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    render() {\n        const { channelsDisabled, color, colorFieldScopeLeft, colorFieldScopeTop, dimensions: { thumb: { radius: thumbRadius }, }, hexDisabled, hideChannels, hideHex, hideSaved, hueScopeLeft, messages, alphaChannel, opacityScopeLeft, savedColors, savedDisabled, scale, scopeOrientation, } = this;\n        const sliderWidth = this.effectiveSliderWidth;\n        const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n        const hueTop = thumbRadius;\n        const hueLeft = hueScopeLeft ?? (sliderWidth * DEFAULT_COLOR.hue()) / HSV_LIMITS.h;\n        const opacityTop = thumbRadius;\n        const opacityLeft = opacityScopeLeft ??\n            (sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha())) / OPACITY_LIMITS.max;\n        const noColor = color === null;\n        const vertical = scopeOrientation === \"vertical\";\n        const noHex = hexDisabled || hideHex;\n        const noChannels = channelsDisabled || hideChannels;\n        const noSaved = savedDisabled || hideSaved;\n        const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(colorFieldScopeLeft, colorFieldScopeTop);\n        const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(hueLeft, hueTop);\n        const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(opacityLeft, opacityTop);\n        return (h(InteractiveContainer, { key: '3fdda1fd2366d3ffb3405dfa28a8424d78586a61', disabled: this.disabled }, h(\"div\", { key: 'b3e95f63a7b4a9f49587fa458bf663cf82ff6961', class: CSS.container }, h(\"div\", { key: '5770ab5094e87956f0f8a49e16f1a9418cc6e7ff', class: CSS.controlAndScope }, h(\"canvas\", { key: '3773e30ddb17777a93b6091e4accc71e890f8cbb', class: CSS.colorField, onPointerDown: this.handleColorFieldPointerDown, ref: this.initColorField }), h(\"div\", { key: '66dfba03f7a7e35f50c1fc0f23ccb0c0cf91c247', \"aria-label\": vertical ? messages.value : messages.saturation, \"aria-valuemax\": vertical ? HSV_LIMITS.v : HSV_LIMITS.s, \"aria-valuemin\": \"0\", \"aria-valuenow\": (vertical ? color?.saturationv() : color?.value()) || \"0\", class: { [CSS.scope]: true, [CSS.colorFieldScope]: true }, onKeyDown: this.handleColorFieldScopeKeyDown, ref: this.storeColorFieldScope, role: \"slider\", style: {\n                top: `${adjustedColorFieldScopeTop || 0}px`,\n                left: `${adjustedColorFieldScopeLeft || 0}px`,\n            }, tabindex: \"0\" })), h(\"div\", { key: '61100b2e5e07a647b75641afe11e7dcfb6df3dd1', class: CSS.previewAndSliders }, h(\"calcite-color-picker-swatch\", { key: '3fd47b8fb737f322646f136a22ec5281c12dcdcb', class: CSS.preview, color: selectedColorInHex, scale: this.alphaChannel ? \"l\" : this.scale }), h(\"div\", { key: 'df7ed65ad05057a4a8c81239f1dc2f3341ea18fb', class: CSS.sliders }, h(\"div\", { key: '5bc288a2e4da751f6e4a1b3a1b0b1294c6421306', class: CSS.controlAndScope }, h(\"canvas\", { key: 'b350822aefb25ca6521d21a376c59885666798c5', class: { [CSS.slider]: true, [CSS.hueSlider]: true }, onPointerDown: this.handleHueSliderPointerDown, ref: this.initHueSlider }), h(\"div\", { key: '5ba9570cb05da8620030918757acd21b57c844eb', \"aria-label\": messages.hue, \"aria-valuemax\": HSV_LIMITS.h, \"aria-valuemin\": \"0\", \"aria-valuenow\": color?.round().hue() || DEFAULT_COLOR.round().hue(), class: { [CSS.scope]: true, [CSS.hueScope]: true }, onKeyDown: this.handleHueScopeKeyDown, ref: this.storeHueScope, role: \"slider\", style: {\n                top: `${adjustedHueScopeTop}px`,\n                left: `${adjustedHueScopeLeft}px`,\n            }, tabindex: \"0\" })), alphaChannel ? (h(\"div\", { class: CSS.controlAndScope }, h(\"canvas\", { class: { [CSS.slider]: true, [CSS.opacitySlider]: true }, onPointerDown: this.handleOpacitySliderPointerDown, ref: this.initOpacitySlider }), h(\"div\", { \"aria-label\": messages.opacity, \"aria-valuemax\": OPACITY_LIMITS.max, \"aria-valuemin\": OPACITY_LIMITS.min, \"aria-valuenow\": (color || DEFAULT_COLOR).round().alpha(), class: { [CSS.scope]: true, [CSS.opacityScope]: true }, onKeyDown: this.handleOpacityScopeKeyDown, ref: this.storeOpacityScope, role: \"slider\", style: {\n                top: `${adjustedOpacityScopeTop}px`,\n                left: `${adjustedOpacityScopeLeft}px`,\n            }, tabindex: \"0\" }))) : null)), noHex && noChannels ? null : (h(\"div\", { class: {\n                [CSS.controlSection]: true,\n                [CSS.section]: true,\n            } }, h(\"div\", { class: CSS.hexAndChannelsGroup }, noHex ? null : (h(\"div\", { class: CSS.hexOptions }, h(\"calcite-color-picker-hex-input\", { allowEmpty: this.isClearable, alphaChannel: alphaChannel, class: CSS.control, messages: messages, numberingSystem: this.numberingSystem, onCalciteColorPickerHexInputChange: this.handleHexInputChange, scale: scale, value: selectedColorInHex }))), noChannels ? null : (h(\"calcite-tabs\", { class: {\n                [CSS.colorModeContainer]: true,\n                [CSS.splitSection]: true,\n            }, scale: scale === \"l\" ? \"m\" : \"s\" }, h(\"calcite-tab-nav\", { slot: \"title-group\" }, this.renderChannelsTabTitle(\"rgb\"), this.renderChannelsTabTitle(\"hsv\")), this.renderChannelsTab(\"rgb\"), this.renderChannelsTab(\"hsv\")))))), noSaved ? null : (h(\"div\", { class: { [CSS.savedColorsSection]: true, [CSS.section]: true } }, h(\"div\", { class: CSS.header }, h(\"label\", null, messages.saved), h(\"div\", { class: CSS.savedColorsButtons }, h(\"calcite-button\", { appearance: \"transparent\", class: CSS.deleteColor, disabled: noColor, iconStart: \"minus\", kind: \"neutral\", label: messages.deleteColor, onClick: this.deleteColor, scale: scale, type: \"button\" }), h(\"calcite-button\", { appearance: \"transparent\", class: CSS.saveColor, disabled: noColor, iconStart: \"plus\", kind: \"neutral\", label: messages.saveColor, onClick: this.saveColor, scale: scale, type: \"button\" }))), savedColors.length > 0 ? (h(\"div\", { class: CSS.savedColors }, [\n            ...savedColors.map((color) => (h(\"calcite-color-picker-swatch\", { class: CSS.savedColor, color: color, key: color, onClick: this.handleSavedColorSelect, onKeyDown: this.handleSavedColorKeyDown, scale: scale, tabIndex: 0 }))),\n        ])) : null)))));\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    //--------------------------------------------------------------------------\n    handleKeyDown(event) {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n        }\n    }\n    showIncompatibleColorWarning(value, format) {\n        console.warn(`ignoring color value (${value}) as it is not compatible with the current format (${format})`);\n    }\n    setMode(format, warn = true) {\n        const mode = format === \"auto\" ? this.mode : format;\n        this.mode = this.ensureCompatibleMode(mode, warn);\n    }\n    ensureCompatibleMode(mode, warn) {\n        const { alphaChannel } = this;\n        const isAlphaCompatible = alphaCompatible(mode);\n        if (alphaChannel && !isAlphaCompatible) {\n            const alphaMode = toAlphaMode(mode);\n            if (warn) {\n                console.warn(`setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`);\n            }\n            return alphaMode;\n        }\n        if (!alphaChannel && isAlphaCompatible) {\n            const nonAlphaMode = toNonAlphaMode(mode);\n            if (warn) {\n                console.warn(`setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`);\n            }\n            return nonAlphaMode;\n        }\n        return mode;\n    }\n    captureHueSliderColor(x) {\n        const hue = (HUE_LIMIT_CONSTRAINED / this.effectiveSliderWidth) * x;\n        this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n    }\n    captureOpacitySliderValue(x) {\n        const alpha = opacityToAlpha((OPACITY_LIMITS.max / this.effectiveSliderWidth) * x);\n        this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n    }\n    internalColorSet(color, skipEqual = true, context = \"user-interaction\") {\n        if (skipEqual && colorEqual(color, this.color)) {\n            return;\n        }\n        this.internalColorUpdateContext = context;\n        this.color = color;\n        this.value = this.toValue(color);\n        this.internalColorUpdateContext = null;\n    }\n    toValue(color, format = this.mode) {\n        if (!color) {\n            return null;\n        }\n        const hexMode = \"hex\";\n        if (format.includes(hexMode)) {\n            const hasAlpha = format === CSSColorMode.HEXA;\n            return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n        }\n        if (format.includes(\"-css\")) {\n            const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n            // Color omits alpha values when alpha is 1\n            const needToInjectAlpha = (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n            if (needToInjectAlpha) {\n                const model = value.slice(0, 3);\n                const values = value.slice(4, -1);\n                return `${model}a(${values}, ${color.alpha()})`;\n            }\n            return value;\n        }\n        const colorObject = \n        /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n        color[toNonAlphaMode(format)]().round().object();\n        if (format.endsWith(\"a\")) {\n            return normalizeAlpha(colorObject);\n        }\n        return colorObject;\n    }\n    getSliderCapSpacing() {\n        const { dimensions: { slider: { height }, thumb: { radius }, }, } = this;\n        return radius * 2 - height;\n    }\n    updateDimensions(scale = \"m\") {\n        this.dimensions = DIMENSIONS[scale];\n    }\n    drawColorField() {\n        const context = this.colorFieldRenderingContext;\n        const { dimensions: { colorField: { height, width }, }, } = this;\n        context.fillStyle = this.baseColorFieldColor\n            .hsv()\n            .saturationv(100)\n            .value(100)\n            .alpha(1)\n            .string();\n        context.fillRect(0, 0, width, height);\n        const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n        whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n        whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n        context.fillStyle = whiteGradient;\n        context.fillRect(0, 0, width, height);\n        const blackGradient = context.createLinearGradient(0, 0, 0, height);\n        blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n        blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n        context.fillStyle = blackGradient;\n        context.fillRect(0, 0, width, height);\n        this.drawActiveColorFieldColor();\n    }\n    setCanvasContextSize(canvas, { height, width }) {\n        if (!canvas) {\n            return;\n        }\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        canvas.width = width * devicePixelRatio;\n        canvas.height = height * devicePixelRatio;\n        canvas.style.height = `${height}px`;\n        canvas.style.width = `${width}px`;\n        const context = canvas.getContext(\"2d\");\n        context.scale(devicePixelRatio, devicePixelRatio);\n    }\n    updateCanvasSize(context = \"all\") {\n        const { dimensions } = this;\n        if (context === \"all\" || context === \"color-field\") {\n            this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n        }\n        const adjustedSliderDimensions = {\n            width: this.effectiveSliderWidth,\n            height: dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,\n        };\n        if (context === \"all\" || context === \"hue-slider\") {\n            this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n        }\n        if (context === \"all\" || context === \"opacity-slider\") {\n            this.setCanvasContextSize(this.opacitySliderRenderingContext?.canvas, adjustedSliderDimensions);\n        }\n    }\n    drawActiveColorFieldColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color.hsv();\n        const { dimensions: { colorField: { height, width }, thumb: { radius }, }, } = this;\n        const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n        const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n        requestAnimationFrame(() => {\n            this.colorFieldScopeLeft = x;\n            this.colorFieldScopeTop = y;\n        });\n        this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n    }\n    drawThumb(context, radius, x, y, color, applyAlpha) {\n        const startAngle = 0;\n        const endAngle = 2 * Math.PI;\n        const outlineWidth = 1;\n        context.beginPath();\n        context.arc(x, y, radius, startAngle, endAngle);\n        context.fillStyle = \"#fff\";\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = outlineWidth;\n        context.stroke();\n        if (applyAlpha && color.alpha() < 1) {\n            const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n            context.beginPath();\n            context.arc(x, y, radius - 3, startAngle, endAngle);\n            context.fillStyle = pattern;\n            context.fill();\n        }\n        context.globalCompositeOperation = \"source-atop\";\n        context.beginPath();\n        context.arc(x, y, radius - 3, startAngle, endAngle);\n        const alpha = applyAlpha ? color.alpha() : 1;\n        context.fillStyle = color.rgb().alpha(alpha).string();\n        context.fill();\n        context.globalCompositeOperation = \"source-over\";\n    }\n    drawActiveHueSliderColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color.hsv().saturationv(100).value(100);\n        const { dimensions: { thumb: { radius }, }, } = this;\n        const width = this.effectiveSliderWidth;\n        const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n        const y = radius;\n        const sliderBoundX = this.getSliderBoundX(x, width, radius);\n        requestAnimationFrame(() => {\n            this.hueScopeLeft = sliderBoundX;\n        });\n        this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n    }\n    drawHueSlider() {\n        const context = this.hueSliderRenderingContext;\n        const { dimensions: { slider: { height }, thumb: { radius: thumbRadius }, }, } = this;\n        const x = 0;\n        const y = thumbRadius - height / 2;\n        const width = this.effectiveSliderWidth;\n        const gradient = context.createLinearGradient(0, 0, width, 0);\n        const hueSliderColorStopKeywords = [\n            \"red\",\n            \"yellow\",\n            \"lime\",\n            \"cyan\",\n            \"blue\",\n            \"magenta\",\n            \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */,\n        ];\n        const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n        let currentOffset = 0;\n        hueSliderColorStopKeywords.forEach((keyword) => {\n            gradient.addColorStop(currentOffset, Color(keyword).string());\n            currentOffset += offset;\n        });\n        context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n        this.drawSliderPath(context, height, width, x, y);\n        context.fillStyle = gradient;\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = 1;\n        context.stroke();\n        this.drawActiveHueSliderColor();\n    }\n    drawOpacitySlider() {\n        const context = this.opacitySliderRenderingContext;\n        const { baseColorFieldColor: previousColor, dimensions: { slider: { height }, thumb: { radius: thumbRadius }, }, } = this;\n        const x = 0;\n        const y = thumbRadius - height / 2;\n        const width = this.effectiveSliderWidth;\n        context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n        const gradient = context.createLinearGradient(0, y, width, 0);\n        const startColor = previousColor.rgb().alpha(0);\n        const midColor = previousColor.rgb().alpha(0.5);\n        const endColor = previousColor.rgb().alpha(1);\n        gradient.addColorStop(0, startColor.string());\n        gradient.addColorStop(0.5, midColor.string());\n        gradient.addColorStop(1, endColor.string());\n        this.drawSliderPath(context, height, width, x, y);\n        const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n        context.fillStyle = pattern;\n        context.fill();\n        context.fillStyle = gradient;\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = 1;\n        context.stroke();\n        this.drawActiveOpacitySliderColor();\n    }\n    drawSliderPath(context, height, width, x, y) {\n        const radius = height / 2 + 1;\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n    }\n    getCheckeredBackgroundPattern() {\n        if (this.checkerPattern) {\n            return this.checkerPattern;\n        }\n        const pattern = document.createElement(\"canvas\");\n        pattern.width = 10;\n        pattern.height = 10;\n        const patternContext = pattern.getContext(\"2d\");\n        patternContext.fillStyle = \"#ccc\";\n        patternContext.fillRect(0, 0, 10, 10);\n        patternContext.fillStyle = \"#fff\";\n        patternContext.fillRect(0, 0, 5, 5);\n        patternContext.fillRect(5, 5, 5, 5);\n        this.checkerPattern = pattern;\n        return pattern;\n    }\n    drawActiveOpacitySliderColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color;\n        const { dimensions: { thumb: { radius }, }, } = this;\n        const width = this.effectiveSliderWidth;\n        const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n        const y = radius;\n        const sliderBoundX = this.getSliderBoundX(x, width, radius);\n        requestAnimationFrame(() => {\n            this.opacityScopeLeft = sliderBoundX;\n        });\n        this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n    }\n    getSliderBoundX(x, width, radius) {\n        const closeToEdge = closeToRangeEdge(x, width, radius);\n        return closeToEdge === 0\n            ? x\n            : closeToEdge === -1\n                ? remap(x, 0, width, radius, radius * 2)\n                : remap(x, 0, width, width - radius * 2, width - radius);\n    }\n    updateColorFromChannels(channels) {\n        this.internalColorSet(Color(channels, this.channelMode));\n    }\n    updateChannelsFromColor(color) {\n        this.channels = color ? this.toChannels(color) : [null, null, null, null];\n    }\n    toChannels(color) {\n        const { channelMode } = this;\n        const channels = color[channelMode]()\n            .array()\n            .map((value, index) => {\n            const isAlpha = index === 3;\n            return isAlpha ? value : Math.floor(value);\n        });\n        if (channels.length === 3) {\n            channels.push(1); // Color omits alpha when 1\n        }\n        return channels;\n    }\n    getAdjustedScopePosition(left, top) {\n        return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n    }\n    static get is() { return \"calcite-color-picker\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"color-picker.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"color-picker.css\"]\n        };\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    static get properties() {\n        return {\n            \"allowEmpty\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"Use `clearable` instead\"\n                        }],\n                    \"text\": \"When `true`, an empty color (`null`) will be allowed as a `value`.\\n\\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\"\n                },\n                \"attribute\": \"allow-empty\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"alphaChannel\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the component will allow updates to the color's alpha value.\"\n                },\n                \"attribute\": \"alpha-channel\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"channelsDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the RGB/HSV channel inputs.\"\n                },\n                \"attribute\": \"channels-disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearable\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, an empty color (`null`) will be allowed as a `value`.\\n\\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\"\n                },\n                \"attribute\": \"clearable\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"color\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"InternalColor | null\",\n                    \"resolved\": \"Color<ColorParam>\",\n                    \"references\": {\n                        \"InternalColor\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/color-picker/interfaces.ts::InternalColor\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Internal prop for advanced use-cases.\"\n                },\n                \"defaultValue\": \"DEFAULT_COLOR\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"format\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Format\",\n                    \"resolved\": \"\\\"auto\\\" | \\\"hex\\\" | \\\"hexa\\\" | \\\"hsl\\\" | \\\"hsl-css\\\" | \\\"hsla\\\" | \\\"hsla-css\\\" | \\\"hsv\\\" | \\\"hsva\\\" | \\\"rgb\\\" | \\\"rgb-css\\\" | \\\"rgba\\\" | \\\"rgba-css\\\"\",\n                    \"references\": {\n                        \"Format\": {\n                            \"location\": \"import\",\n                            \"path\": \"./utils\",\n                            \"id\": \"src/components/color-picker/utils.ts::Format\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"default\",\n                            \"text\": \"\\\"auto\\\"\"\n                        }],\n                    \"text\": \"The format of `value`.\\n\\nWhen `\\\"auto\\\"`, the format will be inferred from `value` when set.\"\n                },\n                \"attribute\": \"format\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"auto\\\"\"\n            },\n            \"hideChannels\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `channelsDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the RGB/HSV channel inputs.\"\n                },\n                \"attribute\": \"hide-channels\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"hexDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the hex input.\"\n                },\n                \"attribute\": \"hex-disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"hideHex\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `hexDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the hex input.\"\n                },\n                \"attribute\": \"hide-hex\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"hideSaved\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `savedDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the saved colors section.\"\n                },\n                \"attribute\": \"hide-saved\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"savedDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the saved colors section.\"\n                },\n                \"attribute\": \"saved-disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"storageId\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the storage ID for colors.\"\n                },\n                \"attribute\": \"storage-id\",\n                \"reflect\": true\n            },\n            \"messageOverrides\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"Partial<ColorPickerMessages>\",\n                    \"resolved\": \"{ b?: string; blue?: string; deleteColor?: string; g?: string; green?: string; h?: string; hsv?: string; hex?: string; hue?: string; noColor?: string; opacity?: string; r?: string; red?: string; rgb?: string; s?: string; saturation?: string; saveColor?: string; saved?: string; v?: string; value?: string; }\",\n                    \"references\": {\n                        \"Partial\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Partial\"\n                        },\n                        \"ColorPickerMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/color-picker/t9n\",\n                            \"id\": \"src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Use this property to override individual strings used by the component.\"\n                }\n            },\n            \"numberingSystem\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"NumberingSystem\",\n                    \"resolved\": \"\\\"arab\\\" | \\\"arabext\\\" | \\\"latn\\\"\",\n                    \"references\": {\n                        \"NumberingSystem\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/locale\",\n                            \"id\": \"src/utils/locale.ts::NumberingSystem\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the Unicode numeral system used by the component for localization.\"\n                },\n                \"attribute\": \"numbering-system\",\n                \"reflect\": true\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ColorValue | null\",\n                    \"resolved\": \"HSL | HSL & ObjectWithAlpha | HSV | HSV & ObjectWithAlpha | RGB | RGB & ObjectWithAlpha | string\",\n                    \"references\": {\n                        \"ColorValue\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/color-picker/interfaces.ts::ColorValue\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"default\",\n                            \"text\": \"\\\"#007ac2\\\"\"\n                        }, {\n                            \"name\": \"see\",\n                            \"text\": \"[CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\"\n                        }, {\n                            \"name\": \"see\",\n                            \"text\": \"[ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/src/components/color-picker/interfaces.ts#L10)\"\n                        }],\n                    \"text\": \"The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\\n\\nThe type will be preserved as the color is updated.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"normalizeHex(\\n    hexify(DEFAULT_COLOR, this.alphaChannel),\\n  )\"\n            },\n            \"messages\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ColorPickerMessages\",\n                    \"resolved\": \"{ b: string; blue: string; deleteColor: string; g: string; green: string; h: string; hsv: string; hex: string; hue: string; noColor: string; opacity: string; r: string; red: string; rgb: string; s: string; saturation: string; saveColor: string; saved: string; v: string; value: string; }\",\n                    \"references\": {\n                        \"ColorPickerMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/color-picker/t9n\",\n                            \"id\": \"src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Made into a prop for testing purposes only\"\n                }\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"channelMode\": {},\n            \"channels\": {},\n            \"defaultMessages\": {},\n            \"dimensions\": {},\n            \"effectiveLocale\": {},\n            \"savedColors\": {},\n            \"colorFieldScopeTop\": {},\n            \"colorFieldScopeLeft\": {},\n            \"hueScopeLeft\": {},\n            \"opacityScopeLeft\": {},\n            \"scopeOrientation\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteColorPickerChange\",\n                \"name\": \"calciteColorPickerChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the color value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteColorPickerInput\",\n                \"name\": \"calciteColorPickerInput\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires as the color value changes.\\n\\nSimilar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"allowEmpty\",\n                \"methodName\": \"handleAllowEmptyOrClearableChange\"\n            }, {\n                \"propName\": \"clearable\",\n                \"methodName\": \"handleAllowEmptyOrClearableChange\"\n            }, {\n                \"propName\": \"alphaChannel\",\n                \"methodName\": \"handleAlphaChannelChange\"\n            }, {\n                \"propName\": \"alphaChannel\",\n                \"methodName\": \"handleAlphaChannelDimensionsChange\"\n            }, {\n                \"propName\": \"dimensions\",\n                \"methodName\": \"handleAlphaChannelDimensionsChange\"\n            }, {\n                \"propName\": \"color\",\n                \"methodName\": \"handleColorChange\"\n            }, {\n                \"propName\": \"alphaChannel\",\n                \"methodName\": \"handleFormatOrAlphaChannelChange\"\n            }, {\n                \"propName\": \"format\",\n                \"methodName\": \"handleFormatOrAlphaChannelChange\"\n            }, {\n                \"propName\": \"scale\",\n                \"methodName\": \"handleScaleChange\"\n            }, {\n                \"propName\": \"messageOverrides\",\n                \"methodName\": \"onMessagesChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"handleValueChange\"\n            }, {\n                \"propName\": \"effectiveLocale\",\n                \"methodName\": \"effectiveLocaleChange\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"keydown\",\n                \"method\": \"handleChannelKeyUpOrDown\",\n                \"target\": undefined,\n                \"capture\": true,\n                \"passive\": false\n            }, {\n                \"name\": \"keyup\",\n                \"method\": \"handleChannelKeyUpOrDown\",\n                \"target\": undefined,\n                \"capture\": true,\n                \"passive\": false\n            }];\n    }\n}\n//# sourceMappingURL=color-picker.js.map\n"],"mappings":"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"}