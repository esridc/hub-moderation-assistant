{"version":3,"names":["maxTenthForMinuteAndSecond","createLocaleDateTimeFormatter","locale","numberingSystem","includeSeconds","fractionalSecondDigits","options","hour","minute","timeZone","getSupportedNumberingSystem","second","getDateTimeFormat","formatTimePart","number","minLength","undefined","numberAsString","toString","numberDecimalPlaces","decimalPlaces","fractionalDigits","replace","length","padEnd","padStart","formatTimeString","value","isValidTime","fractionalSecond","parseTimeString","formattedValue","parseInt","fractionalSecondPartToMilliseconds","fractionalSecondPart","parseFloat","toFixed","getLocaleHourCycle","formatter","parts","formatToParts","Date","UTC","getLocalizedTimePart","getLocalizedDecimalSeparator","numberStringFormatter","numberFormatOptions","localize","split","getLocalizedTimePartSuffix","part","hourIndex","indexOf","find","type","minuteIndex","hourSuffix","trim","secondIndex","minuteSuffix","secondSuffix","getMeridiem","isValidNumber","hourAsNumber","getMeridiemOrder","isRtl","timeParts","getTimeParts","findIndex","startsWith","endsWith","splitValue","validLength","minuteAsNumber","secondAsNumber","hourValid","minuteValid","secondValid","isValidTimePart","valueAsNumber","Number","localizeTimePart","localizedDecimalSeparator","localizedFractionalSecond","localizedZero","date","localizeTimeString","dateFromTimeString","format","localizeTimeStringToParts","localizedHour","localizedHourSuffix","localizedMinute","localizedMinuteSuffix","localizedSecond","localizedSecondSuffix","localizedMeridiem","secondDecimal","includes","toISOTimeString","isoTimeString"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/time.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { getDateTimeFormat, getSupportedNumberingSystem, numberStringFormatter } from \"./locale\";\nimport { decimalPlaces } from \"./math\";\nimport { isValidNumber } from \"./number\";\nexport const maxTenthForMinuteAndSecond = 5;\nfunction createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds = true, fractionalSecondDigits) {\n    const options = {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        timeZone: \"UTC\",\n        numberingSystem: getSupportedNumberingSystem(numberingSystem),\n    };\n    if (includeSeconds) {\n        options.second = \"2-digit\";\n        if (fractionalSecondDigits) {\n            options.fractionalSecondDigits = fractionalSecondDigits;\n        }\n    }\n    return getDateTimeFormat(locale, options);\n}\nexport function formatTimePart(number, minLength) {\n    if (number === null || number === undefined) {\n        return;\n    }\n    const numberAsString = number.toString();\n    const numberDecimalPlaces = decimalPlaces(number);\n    if (number < 1 && numberDecimalPlaces > 0 && numberDecimalPlaces < 4) {\n        const fractionalDigits = numberAsString.replace(\"0.\", \"\");\n        if (!minLength || fractionalDigits.length === minLength) {\n            return fractionalDigits;\n        }\n        if (fractionalDigits.length < minLength) {\n            return fractionalDigits.padEnd(minLength, \"0\");\n        }\n        return fractionalDigits;\n    }\n    if (number >= 0 && number < 10) {\n        return numberAsString.padStart(2, \"0\");\n    }\n    if (number >= 10) {\n        return numberAsString;\n    }\n}\nexport function formatTimeString(value) {\n    if (!isValidTime(value)) {\n        return null;\n    }\n    const { hour, minute, second, fractionalSecond } = parseTimeString(value);\n    let formattedValue = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;\n    if (second) {\n        formattedValue += `:${formatTimePart(parseInt(second))}`;\n        if (fractionalSecond) {\n            formattedValue += `.${fractionalSecond}`;\n        }\n    }\n    return formattedValue;\n}\nfunction fractionalSecondPartToMilliseconds(fractionalSecondPart) {\n    return parseInt((parseFloat(`0.${fractionalSecondPart}`) / 0.001).toFixed(3));\n}\nexport function getLocaleHourCycle(locale, numberingSystem) {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));\n    return getLocalizedTimePart(\"meridiem\", parts) ? \"12\" : \"24\";\n}\nexport function getLocalizedDecimalSeparator(locale, numberingSystem) {\n    numberStringFormatter.numberFormatOptions = {\n        locale,\n        numberingSystem,\n    };\n    return numberStringFormatter.localize(\"1.1\").split(\"\")[1];\n}\nexport function getLocalizedTimePartSuffix(part, locale, numberingSystem = \"latn\") {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));\n    return getLocalizedTimePart(`${part}Suffix`, parts);\n}\nfunction getLocalizedTimePart(part, parts) {\n    if (!part || !parts) {\n        return null;\n    }\n    if (part === \"hourSuffix\") {\n        const hourIndex = parts.indexOf(parts.find(({ type }) => type === \"hour\"));\n        const minuteIndex = parts.indexOf(parts.find(({ type }) => type === \"minute\"));\n        const hourSuffix = parts[hourIndex + 1];\n        return hourSuffix && hourSuffix.type === \"literal\" && minuteIndex - hourIndex === 2\n            ? hourSuffix.value?.trim() || null\n            : null;\n    }\n    if (part === \"minuteSuffix\") {\n        const minuteIndex = parts.indexOf(parts.find(({ type }) => type === \"minute\"));\n        const secondIndex = parts.indexOf(parts.find(({ type }) => type === \"second\"));\n        const minuteSuffix = parts[minuteIndex + 1];\n        return minuteSuffix && minuteSuffix.type === \"literal\" && secondIndex - minuteIndex === 2\n            ? minuteSuffix.value?.trim() || null\n            : null;\n    }\n    if (part === \"secondSuffix\") {\n        const secondIndex = parts.indexOf(parts.find(({ type }) => type === \"second\"));\n        const secondSuffix = parts[secondIndex + 1];\n        return secondSuffix && secondSuffix.type === \"literal\" ? secondSuffix.value?.trim() || null : null;\n    }\n    return parts.find(({ type }) => (part == \"meridiem\" ? type === \"dayPeriod\" : type === part))?.value || null;\n}\nexport function getMeridiem(hour) {\n    if (!isValidNumber(hour)) {\n        return null;\n    }\n    const hourAsNumber = parseInt(hour);\n    return hourAsNumber >= 0 && hourAsNumber <= 11 ? \"AM\" : \"PM\";\n}\nexport function getMeridiemOrder(locale) {\n    const isRtl = locale === \"ar\" || locale === \"he\";\n    if (isRtl) {\n        return 0;\n    }\n    const timeParts = getTimeParts({\n        value: \"00:00:00\",\n        locale,\n        numberingSystem: \"latn\",\n    });\n    return timeParts.findIndex((value) => value.type === \"dayPeriod\");\n}\nexport function isValidTime(value) {\n    if (!value || value.startsWith(\":\") || value.endsWith(\":\")) {\n        return false;\n    }\n    const splitValue = value.split(\":\");\n    const validLength = splitValue.length > 1 && splitValue.length < 4;\n    if (!validLength) {\n        return false;\n    }\n    const [hour, minute, second] = splitValue;\n    const hourAsNumber = parseInt(splitValue[0]);\n    const minuteAsNumber = parseInt(splitValue[1]);\n    const secondAsNumber = parseInt(splitValue[2]);\n    const hourValid = isValidNumber(hour) && hourAsNumber >= 0 && hourAsNumber < 24;\n    const minuteValid = isValidNumber(minute) && minuteAsNumber >= 0 && minuteAsNumber < 60;\n    const secondValid = isValidNumber(second) && secondAsNumber >= 0 && secondAsNumber < 60;\n    if ((hourValid && minuteValid && !second) || (hourValid && minuteValid && secondValid)) {\n        return true;\n    }\n}\nfunction isValidTimePart(value, part) {\n    if (part === \"meridiem\") {\n        return value === \"AM\" || value === \"PM\";\n    }\n    if (!isValidNumber(value)) {\n        return false;\n    }\n    const valueAsNumber = Number(value);\n    return part === \"hour\" ? valueAsNumber >= 0 && valueAsNumber < 24 : valueAsNumber >= 0 && valueAsNumber < 60;\n}\nexport function localizeTimePart({ value, part, locale, numberingSystem }) {\n    if (part === \"fractionalSecond\") {\n        const localizedDecimalSeparator = getLocalizedDecimalSeparator(locale, numberingSystem);\n        let localizedFractionalSecond = null;\n        if (value) {\n            numberStringFormatter.numberFormatOptions = {\n                locale,\n                numberingSystem,\n            };\n            const localizedZero = numberStringFormatter.localize(\"0\");\n            if (parseInt(value) === 0) {\n                localizedFractionalSecond = \"\".padStart(value.length, localizedZero);\n            }\n            else {\n                localizedFractionalSecond = numberStringFormatter\n                    .localize(`0.${value}`)\n                    .replace(`${localizedZero}${localizedDecimalSeparator}`, \"\");\n                if (localizedFractionalSecond.length < value.length) {\n                    localizedFractionalSecond = localizedFractionalSecond.padEnd(value.length, localizedZero);\n                }\n            }\n        }\n        return localizedFractionalSecond;\n    }\n    if (!isValidTimePart(value, part)) {\n        return;\n    }\n    const valueAsNumber = parseInt(value);\n    const date = new Date(Date.UTC(0, 0, 0, part === \"hour\" ? valueAsNumber : part === \"meridiem\" ? (value === \"AM\" ? 0 : 12) : 0, part === \"minute\" ? valueAsNumber : 0, part === \"second\" ? valueAsNumber : 0));\n    if (!date) {\n        return;\n    }\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(date);\n    return getLocalizedTimePart(part, parts);\n}\nexport function localizeTimeString({ value, locale, numberingSystem, includeSeconds = true, fractionalSecondDigits, }) {\n    if (!isValidTime(value)) {\n        return null;\n    }\n    const { hour, minute, second = \"0\", fractionalSecond } = parseTimeString(value);\n    const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second), fractionalSecond && fractionalSecondPartToMilliseconds(fractionalSecond)));\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds, fractionalSecondDigits);\n    return formatter.format(dateFromTimeString) || null;\n}\nexport function localizeTimeStringToParts({ value, locale, numberingSystem = \"latn\", }) {\n    if (!isValidTime(value)) {\n        return null;\n    }\n    const { hour, minute, second = \"0\", fractionalSecond } = parseTimeString(value);\n    const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n    if (dateFromTimeString) {\n        const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n        const parts = formatter.formatToParts(dateFromTimeString);\n        return {\n            localizedHour: getLocalizedTimePart(\"hour\", parts),\n            localizedHourSuffix: getLocalizedTimePart(\"hourSuffix\", parts),\n            localizedMinute: getLocalizedTimePart(\"minute\", parts),\n            localizedMinuteSuffix: getLocalizedTimePart(\"minuteSuffix\", parts),\n            localizedSecond: getLocalizedTimePart(\"second\", parts),\n            localizedDecimalSeparator: getLocalizedDecimalSeparator(locale, numberingSystem),\n            localizedFractionalSecond: localizeTimePart({\n                value: fractionalSecond,\n                part: \"fractionalSecond\",\n                locale,\n                numberingSystem,\n            }),\n            localizedSecondSuffix: getLocalizedTimePart(\"secondSuffix\", parts),\n            localizedMeridiem: getLocalizedTimePart(\"meridiem\", parts),\n        };\n    }\n    return null;\n}\nexport function getTimeParts({ value, locale, numberingSystem }) {\n    if (!isValidTime(value)) {\n        return null;\n    }\n    const { hour, minute, second = \"0\" } = parseTimeString(value);\n    const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n    if (dateFromTimeString) {\n        const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n        const parts = formatter.formatToParts(dateFromTimeString);\n        return parts;\n    }\n    return null;\n}\nexport function parseTimeString(value) {\n    if (isValidTime(value)) {\n        const [hour, minute, secondDecimal] = value.split(\":\");\n        let second = secondDecimal;\n        let fractionalSecond = null;\n        if (secondDecimal?.includes(\".\")) {\n            [second, fractionalSecond] = secondDecimal.split(\".\");\n        }\n        return {\n            fractionalSecond,\n            hour,\n            minute,\n            second,\n        };\n    }\n    return {\n        fractionalSecond: null,\n        hour: null,\n        minute: null,\n        second: null,\n    };\n}\nexport function toISOTimeString(value, includeSeconds = true) {\n    if (!isValidTime(value)) {\n        return \"\";\n    }\n    const { hour, minute, second, fractionalSecond } = parseTimeString(value);\n    let isoTimeString = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;\n    if (includeSeconds) {\n        isoTimeString += `:${formatTimePart(parseInt((includeSeconds && second) || \"0\"))}`;\n        if (fractionalSecond) {\n            isoTimeString += `.${fractionalSecond}`;\n        }\n    }\n    return isoTimeString;\n}\n//# sourceMappingURL=time.js.map\n"],"mappings":"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"}