{"version":3,"names":["unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","constructor","input","integers","decimals","expandExponentialNumberString","split","concat","this","value","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","getIntegersAndDecimals","s","toString","replace","padStart","length","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","integersFormatted","decimalsFormatted","map","Number","join","add","n","fromBigInt","subtract","multiply","_divRound","SHIFT","divide","repeat","dividend","divisor","bigint","Object","assign","create","prototype","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","numberKeys","includes","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","hasTrailingDecimalZeros","sanitizeNumberString","sanitizedValue","test","getBigDecimalAsString","sanitizedValueDecimals","bigDecimalValueInteger","bigDecimalValueDecimals","func","firstE","toLowerCase","indexOf","substring","section","exponentialParts","number","isSafeInteger","magnitude","decimalParts","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","shiftedDecimal","shiftDecimalRight","rightPaddedZeros","expandedNumberString","string","some","addLocalizedTrailingDecimalZeros","localizedValue","trailingDecimalZeros","delocalize","decimalSeparator","localize","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","createObserver","records","record","el","target","inUnrelatedSubtree","containsCrossShadowBoundary","closestLangEl","closestElementCrossShadowBoundary","closestLang","lang","hasAttribute","NumberStringFormat","_numberFormatOptions","_minusSign","_group","_decimal","_digits","_getDigitIndex","trim","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter","dateTimeFormatCache","previousLocaleUsedForCaching","buildDateTimeFormatCacheKey","entries","sort","key1","key2","localeCompare","keyValue","flat","getDateTimeFormat","clear","key","cached","DateTimeFormat","set"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/number.js","./node_modules/@esri/calcite-components/dist/collection/utils/locale.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { numberKeys } from \"./key\";\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n    constructor(input) {\n        if (input instanceof BigDecimal) {\n            return input;\n        }\n        const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n        this.value =\n            BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n                BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n        this.isNegative = input.charAt(0) === \"-\";\n    }\n    getIntegersAndDecimals() {\n        const s = this.value\n            .toString()\n            .replace(\"-\", \"\")\n            .padStart(BigDecimal.DECIMALS + 1, \"0\");\n        const integers = s.slice(0, -BigDecimal.DECIMALS);\n        const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n        return { integers, decimals };\n    }\n    toString() {\n        const { integers, decimals } = this.getIntegersAndDecimals();\n        return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n    }\n    formatToParts(formatter) {\n        const { integers, decimals } = this.getIntegersAndDecimals();\n        const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n        this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n        if (decimals.length) {\n            parts.push({ type: \"decimal\", value: formatter.decimal });\n            decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n        }\n        return parts;\n    }\n    format(formatter) {\n        const { integers, decimals } = this.getIntegersAndDecimals();\n        const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n        const decimalsFormatted = decimals.length\n            ? `${formatter.decimal}${decimals\n                .split(\"\")\n                .map((char) => formatter.numberFormatter.format(Number(char)))\n                .join(\"\")}`\n            : \"\";\n        return `${integersFormatted}${decimalsFormatted}`;\n    }\n    add(n) {\n        return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n    }\n    subtract(n) {\n        return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n    }\n    multiply(n) {\n        return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n    }\n    divide(n) {\n        return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n    }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\nexport function isValidNumber(numberString) {\n    return !(!numberString || isNaN(Number(numberString)));\n}\nexport function parseNumberString(numberString) {\n    if (!numberString || !stringContainsNumbers(numberString)) {\n        return \"\";\n    }\n    return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n        let containsDecimal = false;\n        const result = nonExpoNumString\n            .split(\"\")\n            .filter((value, i) => {\n            if (value.match(/\\./g) && !containsDecimal) {\n                containsDecimal = true;\n                return true;\n            }\n            if (value.match(/-/g) && i === 0) {\n                return true;\n            }\n            return numberKeys.includes(value);\n        })\n            .join(\"\");\n        return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n    });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\nexport const sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n        .replace(allHyphensExceptTheStart, \"\")\n        .replace(decimalOnlyAtEndOfString, \"\")\n        .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n        ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n            ? sanitizedValue\n            : getBigDecimalAsString(sanitizedValue)\n        : nonExpoNumString;\n});\nexport function getBigDecimalAsString(sanitizedValue) {\n    const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n    const value = new BigDecimal(sanitizedValue).toString();\n    const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n    return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n        ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n        : value;\n}\nexport function sanitizeExponentialNumberString(numberString, func) {\n    if (!numberString) {\n        return numberString;\n    }\n    const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n    if (!firstE) {\n        return func(numberString);\n    }\n    return numberString\n        .replace(/[eE]*$/g, \"\")\n        .substring(0, firstE)\n        .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n        .split(/[eE]/)\n        .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n        .join(\"e\")\n        .replace(/^e/, \"1e\");\n}\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString) {\n    const exponentialParts = numberString.split(/[eE]/);\n    if (exponentialParts.length === 1) {\n        return numberString;\n    }\n    const number = +numberString;\n    if (Number.isSafeInteger(number)) {\n        return `${number}`;\n    }\n    const isNegative = numberString.charAt(0) === \"-\";\n    const magnitude = +exponentialParts[1];\n    const decimalParts = exponentialParts[0].split(\".\");\n    const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n    const decimals = decimalParts[1] || \"\";\n    const shiftDecimalLeft = (integers, magnitude) => {\n        const magnitudeDelta = Math.abs(magnitude) - integers.length;\n        const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n        const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n        return shiftedDecimal;\n    };\n    const shiftDecimalRight = (decimals, magnitude) => {\n        const rightPaddedZeros = magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n        const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n        return shiftedDecimal;\n    };\n    const expandedNumberString = magnitude > 0\n        ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n        : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n    return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n        .replace(unnecessaryDecimal, \"\")\n        .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\nfunction stringContainsNumbers(string) {\n    return numberKeys.some((number) => string.includes(number));\n}\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(localizedValue, value, formatter) {\n    const decimals = value.split(\".\")[1];\n    if (decimals) {\n        const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n        if (trailingDecimalZeros &&\n            formatter.delocalize(localizedValue).length !== value.length &&\n            decimals.indexOf(\"e\") === -1) {\n            const decimalSeparator = formatter.decimal;\n            localizedValue = !localizedValue.includes(decimalSeparator)\n                ? `${localizedValue}${decimalSeparator}`\n                : localizedValue;\n            return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n        }\n    }\n    return localizedValue;\n}\n//# sourceMappingURL=number.js.map\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\nexport const defaultLocale = \"en\";\nexport const t9nLocales = [\n    \"ar\",\n    \"bg\",\n    \"bs\",\n    \"ca\",\n    \"cs\",\n    \"da\",\n    \"de\",\n    \"el\",\n    defaultLocale,\n    \"es\",\n    \"et\",\n    \"fi\",\n    \"fr\",\n    \"he\",\n    \"hr\",\n    \"hu\",\n    \"id\",\n    \"it\",\n    \"ja\",\n    \"ko\",\n    \"lt\",\n    \"lv\",\n    \"no\",\n    \"nl\",\n    \"pl\",\n    \"pt-BR\",\n    \"pt-PT\",\n    \"ro\",\n    \"ru\",\n    \"sk\",\n    \"sl\",\n    \"sr\",\n    \"sv\",\n    \"th\",\n    \"tr\",\n    \"uk\",\n    \"vi\",\n    \"zh-CN\",\n    \"zh-HK\",\n    \"zh-TW\",\n];\nexport const locales = [\n    \"ar\",\n    \"bg\",\n    \"bs\",\n    \"ca\",\n    \"cs\",\n    \"da\",\n    \"de\",\n    \"de-AT\",\n    \"de-CH\",\n    \"el\",\n    defaultLocale,\n    \"en-AU\",\n    \"en-CA\",\n    \"en-GB\",\n    \"es\",\n    \"es-MX\",\n    \"et\",\n    \"fi\",\n    \"fr\",\n    \"fr-CH\",\n    \"he\",\n    \"hi\",\n    \"hr\",\n    \"hu\",\n    \"id\",\n    \"it\",\n    \"it-CH\",\n    \"ja\",\n    \"ko\",\n    \"lt\",\n    \"lv\",\n    \"mk\",\n    \"no\",\n    \"nl\",\n    \"pl\",\n    \"pt\",\n    \"pt-PT\",\n    \"ro\",\n    \"ru\",\n    \"sk\",\n    \"sl\",\n    \"sr\",\n    \"sv\",\n    \"th\",\n    \"tr\",\n    \"uk\",\n    \"vi\",\n    \"zh-CN\",\n    \"zh-HK\",\n    \"zh-TW\",\n];\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"];\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\nexport const getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale, context = \"cldr\") {\n    const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n    if (!locale) {\n        return defaultLocale;\n    }\n    if (contextualLocales.includes(locale)) {\n        return locale;\n    }\n    locale = locale.toLowerCase();\n    // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n    if (locale === \"nb\") {\n        return \"no\";\n    }\n    // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n    if (context === \"t9n\" && locale === \"pt\") {\n        return \"pt-BR\";\n    }\n    if (locale.includes(\"-\")) {\n        locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n        if (!contextualLocales.includes(locale)) {\n            locale = locale.split(\"-\")[0];\n        }\n    }\n    // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n    if (locale === \"zh\") {\n        return \"zh-CN\";\n    }\n    if (!contextualLocales.includes(locale)) {\n        console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n        return defaultLocale;\n    }\n    return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component) {\n    updateEffectiveLocale(component);\n    if (connectedComponents.size === 0) {\n        mutationObserver?.observe(document.documentElement, {\n            attributes: true,\n            attributeFilter: [\"lang\"],\n            subtree: true,\n        });\n    }\n    connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component) {\n    component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component) {\n    connectedComponents.delete(component);\n    if (connectedComponents.size === 0) {\n        mutationObserver.disconnect();\n    }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n    records.forEach((record) => {\n        const el = record.target;\n        connectedComponents.forEach((component) => {\n            const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n            if (inUnrelatedSubtree) {\n                return;\n            }\n            const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n            if (!closestLangEl) {\n                component.effectiveLocale = defaultLocale;\n                return;\n            }\n            const closestLang = closestLangEl.lang;\n            component.effectiveLocale =\n                // user set lang=\"\" means unknown language, so we use default\n                closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n        });\n    });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n    return (component.el.lang ||\n        closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n        document.documentElement.lang ||\n        defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n    constructor() {\n        this.delocalize = (numberString) => \n        // For performance, (de)localization is skipped if the formatter isn't initialized.\n        // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n        // `numberFormatOptions` must be set in a component to create and cache the formatter.\n        this._numberFormatOptions\n            ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n                .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n                .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n                .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n                .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n            : numberString;\n        this.localize = (numberString) => this._numberFormatOptions\n            ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n                ? new BigDecimal(nonExpoNumString.trim())\n                    .format(this)\n                    .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n                : nonExpoNumString)\n            : numberString;\n    }\n    get group() {\n        return this._group;\n    }\n    get decimal() {\n        return this._decimal;\n    }\n    get minusSign() {\n        return this._minusSign;\n    }\n    get digits() {\n        return this._digits;\n    }\n    get numberFormatter() {\n        return this._numberFormatter;\n    }\n    get numberFormatOptions() {\n        return this._numberFormatOptions;\n    }\n    /**\n     * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n     */\n    set numberFormatOptions(options) {\n        options.locale = getSupportedLocale(options?.locale);\n        options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n        if (\n        // No need to create the formatter if `locale` and `numberingSystem`\n        // are the default values and `numberFormatOptions` has not been set\n        (!this._numberFormatOptions &&\n            options.locale === defaultLocale &&\n            options.numberingSystem === defaultNumberingSystem &&\n            // don't skip initialization if any options besides locale/numberingSystem are set\n            Object.keys(options).length === 2) ||\n            // cache formatter by only recreating when options change\n            JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n            return;\n        }\n        this._numberFormatOptions = options;\n        this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n        this._digits = [\n            ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n                useGrouping: false,\n                numberingSystem: this._numberFormatOptions.numberingSystem,\n            }).format(9876543210),\n        ].reverse();\n        const index = new Map(this._digits.map((d, i) => [d, i]));\n        // numberingSystem is parsed to return consistent decimal separator across browsers.\n        const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n            numberingSystem: this._numberFormatOptions.numberingSystem,\n        }).formatToParts(-12345678.9);\n        this._actualGroup = parts.find((d) => d.type === \"group\").value;\n        // change whitespace group separators to the unicode non-breaking space (nbsp)\n        this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n        this._decimal = parts.find((d) => d.type === \"decimal\").value;\n        this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n        this._getDigitIndex = (d) => index.get(d);\n    }\n}\nexport const numberStringFormatter = new NumberStringFormat();\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache;\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching;\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options = {}) {\n    return Object.entries(options)\n        .sort(([key1], [key2]) => key1.localeCompare(key2))\n        .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n        .flat()\n        .join(\":\");\n}\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale, options) {\n    locale = getSupportedLocale(locale);\n    if (!dateTimeFormatCache) {\n        dateTimeFormatCache = new Map();\n    }\n    if (previousLocaleUsedForCaching !== locale) {\n        dateTimeFormatCache.clear();\n        previousLocaleUsedForCaching = locale;\n    }\n    const key = buildDateTimeFormatCacheKey(options);\n    const cached = dateTimeFormatCache.get(key);\n    if (cached) {\n        return cached;\n    }\n    const format = new Intl.DateTimeFormat(locale, options);\n    dateTimeFormatCache.set(key, format);\n    return format;\n}\n//# sourceMappingURL=locale.js.map\n"],"mappings":"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"}