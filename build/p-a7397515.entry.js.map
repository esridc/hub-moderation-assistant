{"version":3,"names":["CSS","container","handle","ICON_TYPES","grip","getScreenReaderText","item","status","valueList","items","messages","total","length","position","getItemIndex","template","dragHandleIdle","dragHandleActive","dragHandleChange","dragHandleCommit","replacePlaceholders","label","getHandleAndItemElement","event","composedPath","find","dataset","jsHandle","undefined","tagName","toLowerCase","text","replacePosition","replace","toString","replaceLabel","valueListCss","logger","deprecated","name","removalVersion","suggested","ValueList","constructor","hostRef","this","lastSelectedItem","mutationObserver","createObserver","mutationObserverCallback","bind","handleSelector","dragSelector","setFilterEl","el","filterEl","setFilteredItems","filteredItems","deselectRemovedItems","deselectSiblingItems","selectSiblings","handleFilter","handleFilterEvent","getItemData","keyDownHandler","defaultPrevented","handleActivated","key","updateScreenReaderText","call","preventDefault","nextIndex","moveItemIndex","appendChild","itemAtNextIndex","children","insertionReferenceItem","nextElementSibling","insertBefore","getItems","calciteListOrderChange","emit","map","value","requestAnimationFrame","focusElement","updateHandleAriaLabel","storeAssistiveEl","assistiveTextEl","handleFocusIn","disabled","canPull","canPut","dragEnabled","filteredData","filterEnabled","filterPlaceholder","filterText","group","loading","multiple","selectionFollowsFocus","messageOverrides","dataForFilter","defaultMessages","effectiveLocale","selectedValues","Map","onMessagesChange","effectiveLocaleChange","updateMessages","connectedCallback","connectInteractive","connectLocalized","connectMessages","initialize","initializeObserver","setUpSorting","async","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","handleInitialFilter","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectInteractive","disconnectSortableComponent","disconnectLocalized","disconnectMessages","cleanUpObserver","calciteListFocusOutHandler","calciteListItemRemoveHandler","removeItem","calciteListItemChangeHandler","calciteInternalListItemPropsChangeHandler","stopPropagation","setUpFilter","calciteInternalListItemValueChangeHandler","onGlobalDragStart","onGlobalDragEnd","onDragEnd","onDragStart","onDragSort","Array","from","querySelectorAll","values","setUpItems","connectSortableComponent","handleBlur","focusId","componentFocusable","setFocus","getIconType","type","textContent","handleElement","ariaLabel","handleValueListItemBlur","detail","render","h","List","onBlur","onFocusin","onKeyDown","props","assetsDirs"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/value-list/resources.js","./node_modules/@esri/calcite-components/dist/collection/components/value-list/utils.js","./node_modules/@esri/calcite-components/dist/collection/components/value-list/value-list.css?tag=calcite-value-list&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/value-list/value-list.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nexport const CSS = {\n    container: \"container\",\n    handle: \"handle\",\n};\nexport const ICON_TYPES = {\n    grip: \"grip\",\n};\nexport const TEXT = {\n    filterResults: \"Filter results\",\n};\n//# sourceMappingURL=resources.js.map\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { getItemIndex } from \"../pick-list/shared-list-logic\";\nexport function getScreenReaderText(item, status, valueList) {\n    const { items, messages } = valueList;\n    const total = items.length;\n    const position = getItemIndex(valueList, item) + 1;\n    const template = status === \"idle\"\n        ? messages.dragHandleIdle\n        : status === \"active\"\n            ? messages.dragHandleActive\n            : status === \"change\"\n                ? messages.dragHandleChange\n                : messages.dragHandleCommit;\n    return replacePlaceholders(template, item.label, position, total);\n}\nexport function getHandleAndItemElement(event) {\n    const handle = event\n        .composedPath()\n        .find((item) => item.dataset?.jsHandle !== undefined);\n    const item = event\n        .composedPath()\n        .find((item) => item.tagName?.toLowerCase() === \"calcite-value-list-item\");\n    return { handle, item };\n}\nexport function replacePlaceholders(text, label, position, total) {\n    const replacePosition = text.replace(\"{position}\", position.toString());\n    const replaceLabel = replacePosition.replace(\"{itemLabel}\", label);\n    return replaceLabel.replace(\"{total}\", total.toString());\n}\n//# sourceMappingURL=utils.js.map\n","/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n:host {\n  position: relative;\n  box-sizing: border-box;\n  display: flex;\n  flex-shrink: 0;\n  flex-grow: 0;\n  flex-direction: column;\n  align-items: stretch;\n  background-color: transparent;\n  font-size: var(--calcite-font-size--1);\n  color: var(--calcite-color-text-2);\n}\n:host * {\n  box-sizing: border-box;\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\ncalcite-value-list-item:last-of-type {\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n:host([filter-enabled]) header {\n  margin-block-end: 0.25rem;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  background-color: var(--calcite-color-foreground-1);\n  --tw-shadow: 0 1px 0 var(--calcite-color-border-3);\n  --tw-shadow-colored: 0 1px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n:host([filter-enabled]) header.sticky-pos {\n  position: sticky;\n  inset-block-start: 0px;\n  z-index: var(--calcite-z-index-sticky);\n}\n\ncalcite-filter {\n  margin-block-end: 1px;\n}\n\n.assistive-text {\n  position: absolute;\n  inline-size: 1px;\n  block-size: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, } from \"@stencil/core\";\nimport { connectInteractive, disconnectInteractive, updateHostInteraction, } from \"../../utils/interactive\";\nimport { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from \"../../utils/t9n\";\nimport { calciteInternalListItemValueChangeHandler, calciteListFocusOutHandler, calciteListItemChangeHandler, cleanUpObserver, deselectRemovedItems, deselectSiblingItems, getItemData, handleFilter, handleFilterEvent, handleInitialFilter, initialize, initializeObserver, keyDownHandler, moveItemIndex, mutationObserverCallback, removeItem, selectSiblings, setFocus, setUpItems, } from \"../pick-list/shared-list-logic\";\nimport List from \"../pick-list/shared-list-render\";\nimport { connectSortableComponent, disconnectSortableComponent, } from \"../../utils/sortableComponent\";\nimport { focusElement } from \"../../utils/dom\";\nimport { logger } from \"../../utils/logger\";\nimport { CSS, ICON_TYPES } from \"./resources\";\nimport { getHandleAndItemElement, getScreenReaderText } from \"./utils\";\nlogger.deprecated(\"component\", {\n    name: \"value-list\",\n    removalVersion: 3,\n    suggested: \"list\",\n});\n/**\n * @deprecated Use the `calcite-list` component instead.\n * @slot - A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list.\n * @slot menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting.\n */\nexport class ValueList {\n    constructor() {\n        this.lastSelectedItem = null;\n        this.mutationObserver = createObserver(\"mutation\", mutationObserverCallback.bind(this));\n        this.handleSelector = `.${CSS.handle}`;\n        this.dragSelector = \"calcite-value-list-item\";\n        this.setFilterEl = (el) => {\n            this.filterEl = el;\n        };\n        this.setFilteredItems = (filteredItems) => {\n            this.filteredItems = filteredItems;\n        };\n        this.deselectRemovedItems = deselectRemovedItems.bind(this);\n        this.deselectSiblingItems = deselectSiblingItems.bind(this);\n        this.selectSiblings = selectSiblings.bind(this);\n        this.handleFilter = handleFilter.bind(this);\n        this.handleFilterEvent = handleFilterEvent.bind(this);\n        this.getItemData = getItemData.bind(this);\n        this.keyDownHandler = (event) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n            const { handle, item } = getHandleAndItemElement(event);\n            if (handle && !item.handleActivated && event.key === \" \") {\n                this.updateScreenReaderText(getScreenReaderText(item, \"commit\", this));\n            }\n            if (!handle || !item.handleActivated) {\n                keyDownHandler.call(this, event);\n                return;\n            }\n            event.preventDefault();\n            const { items } = this;\n            if (event.key === \" \") {\n                this.updateScreenReaderText(getScreenReaderText(item, \"active\", this));\n            }\n            if ((event.key !== \"ArrowUp\" && event.key !== \"ArrowDown\") || items.length <= 1) {\n                return;\n            }\n            const { el } = this;\n            const nextIndex = moveItemIndex(this, item, event.key === \"ArrowUp\" ? \"up\" : \"down\");\n            if (nextIndex === items.length - 1) {\n                el.appendChild(item);\n            }\n            else {\n                const itemAtNextIndex = el.children[nextIndex];\n                const insertionReferenceItem = itemAtNextIndex === item.nextElementSibling\n                    ? itemAtNextIndex.nextElementSibling\n                    : itemAtNextIndex;\n                el.insertBefore(item, insertionReferenceItem);\n            }\n            this.items = this.getItems();\n            this.calciteListOrderChange.emit(this.items.map(({ value }) => value));\n            requestAnimationFrame(() => focusElement(handle));\n            item.handleActivated = true;\n            this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"change\", this));\n        };\n        this.storeAssistiveEl = (el) => {\n            this.assistiveTextEl = el;\n        };\n        this.handleFocusIn = (event) => {\n            const { handle, item } = getHandleAndItemElement(event);\n            if (!item?.handleActivated && item && handle) {\n                this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n            }\n        };\n        this.disabled = false;\n        this.canPull = undefined;\n        this.canPut = undefined;\n        this.dragEnabled = false;\n        this.filteredItems = [];\n        this.filteredData = [];\n        this.filterEnabled = false;\n        this.filterPlaceholder = undefined;\n        this.filterText = undefined;\n        this.group = undefined;\n        this.loading = false;\n        this.multiple = false;\n        this.selectionFollowsFocus = false;\n        this.messageOverrides = undefined;\n        this.messages = undefined;\n        this.dataForFilter = [];\n        this.defaultMessages = undefined;\n        this.effectiveLocale = \"\";\n        this.selectedValues = new Map();\n    }\n    onMessagesChange() {\n        /* wired up by t9n util */\n    }\n    effectiveLocaleChange() {\n        updateMessages(this, this.effectiveLocale);\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    // --------------------------------------------------------------------------\n    connectedCallback() {\n        connectInteractive(this);\n        connectLocalized(this);\n        connectMessages(this);\n        initialize.call(this);\n        initializeObserver.call(this);\n        this.setUpSorting();\n    }\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        await setUpMessages(this);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n        handleInitialFilter.call(this);\n    }\n    componentDidRender() {\n        updateHostInteraction(this);\n    }\n    disconnectedCallback() {\n        disconnectInteractive(this);\n        disconnectSortableComponent(this);\n        disconnectLocalized(this);\n        disconnectMessages(this);\n        cleanUpObserver.call(this);\n    }\n    calciteListFocusOutHandler(event) {\n        calciteListFocusOutHandler.call(this, event);\n    }\n    calciteListItemRemoveHandler(event) {\n        removeItem.call(this, event);\n    }\n    calciteListItemChangeHandler(event) {\n        calciteListItemChangeHandler.call(this, event);\n    }\n    calciteInternalListItemPropsChangeHandler(event) {\n        event.stopPropagation();\n        this.setUpFilter();\n    }\n    calciteInternalListItemValueChangeHandler(event) {\n        calciteInternalListItemValueChangeHandler.call(this, event);\n        event.stopPropagation();\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    onGlobalDragStart() {\n        cleanUpObserver.call(this);\n    }\n    onGlobalDragEnd() {\n        initializeObserver.call(this);\n    }\n    onDragEnd() { }\n    onDragStart() { }\n    onDragSort() {\n        this.items = Array.from(this.el.querySelectorAll(\"calcite-value-list-item\"));\n        const values = this.items.map((item) => item.value);\n        this.calciteListOrderChange.emit(values);\n    }\n    getItems() {\n        return Array.from(this.el.querySelectorAll(\"calcite-value-list-item\"));\n    }\n    setUpItems() {\n        setUpItems.call(this, \"calcite-value-list-item\");\n        this.setUpSorting();\n    }\n    setUpFilter() {\n        if (this.filterEnabled) {\n            this.dataForFilter = this.getItemData();\n        }\n    }\n    setUpSorting() {\n        const { dragEnabled } = this;\n        if (!dragEnabled) {\n            return;\n        }\n        connectSortableComponent(this);\n    }\n    handleBlur() {\n        if (this.dragEnabled) {\n            this.updateScreenReaderText(\"\");\n        }\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    // --------------------------------------------------------------------------\n    /** Returns the component's selected items. */\n    async getSelectedItems() {\n        return this.selectedValues;\n    }\n    /**\n     * Sets focus on the component's first focusable element.\n     *\n     * @param focusId\n     */\n    async setFocus(focusId) {\n        await componentFocusable(this);\n        return setFocus.call(this, focusId);\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    // --------------------------------------------------------------------------\n    getIconType() {\n        let type = null;\n        if (this.dragEnabled) {\n            type = ICON_TYPES.grip;\n        }\n        return type;\n    }\n    updateScreenReaderText(text) {\n        this.assistiveTextEl.textContent = text;\n    }\n    updateHandleAriaLabel(handleElement, text) {\n        handleElement.ariaLabel = text;\n    }\n    handleValueListItemBlur(event) {\n        const { item, handle } = event.detail;\n        if (!item?.handleActivated && item) {\n            this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n        }\n        event.stopPropagation();\n    }\n    render() {\n        return (h(List, { key: '226659128d8b783ff03fabc4ad086291d3ec749c', onBlur: this.handleBlur, onFocusin: this.handleFocusIn, onKeyDown: this.keyDownHandler, props: this }));\n    }\n    static get is() { return \"calcite-value-list\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"value-list.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"value-list.css\"]\n        };\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    static get properties() {\n        return {\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"canPull\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(detail: DragDetail) => boolean\",\n                    \"resolved\": \"(detail: DragDetail) => boolean\",\n                    \"references\": {\n                        \"DragDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sortableComponent\",\n                            \"id\": \"src/utils/sortableComponent.ts::DragDetail\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When provided, the method will be called to determine whether the element can move from the list.\"\n                }\n            },\n            \"canPut\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(detail: DragDetail) => boolean\",\n                    \"resolved\": \"(detail: DragDetail) => boolean\",\n                    \"references\": {\n                        \"DragDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sortableComponent\",\n                            \"id\": \"src/utils/sortableComponent.ts::DragDetail\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When provided, the method will be called to determine whether the element can be added from another list.\"\n                }\n            },\n            \"dragEnabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, `calcite-value-list-item`s are sortable via a draggable button.\"\n                },\n                \"attribute\": \"drag-enabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"filteredItems\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"HTMLCalciteValueListItemElement[]\",\n                    \"resolved\": \"HTMLCalciteValueListItemElement[]\",\n                    \"references\": {\n                        \"HTMLCalciteValueListItemElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteValueListItemElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"The currently filtered items.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"filteredData\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ItemData\",\n                    \"resolved\": \"{ label: string; description: string; metadata: Record<string, unknown>; value: string; }[]\",\n                    \"references\": {\n                        \"ItemData\": {\n                            \"location\": \"import\",\n                            \"path\": \"../pick-list/shared-list-logic\",\n                            \"id\": \"src/components/pick-list/shared-list-logic.ts::ItemData\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"The currently filtered data.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"filterEnabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, an input appears at the top of the component that can be used by end users to filter list items.\"\n                },\n                \"attribute\": \"filter-enabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"filterPlaceholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Placeholder text for the filter's input field.\"\n                },\n                \"attribute\": \"filter-placeholder\",\n                \"reflect\": true\n            },\n            \"filterText\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text for the filter input field.\"\n                },\n                \"attribute\": \"filter-text\",\n                \"reflect\": true\n            },\n            \"group\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The component's group identifier.\\n\\nTo drag elements from one list into another, both lists must have the same group value.\"\n                },\n                \"attribute\": \"group\",\n                \"reflect\": true\n            },\n            \"loading\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, a busy indicator is displayed.\"\n                },\n                \"attribute\": \"loading\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"multiple\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Similar to standard radio buttons and checkboxes.\\nWhen `true`, a user can select multiple `calcite-value-list-item`s at a time.\\nWhen `false`, only a single `calcite-value-list-item` can be selected at a time,\\nand a new selection will deselect previous selections.\"\n                },\n                \"attribute\": \"multiple\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"selectionFollowsFocus\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.\"\n                },\n                \"attribute\": \"selection-follows-focus\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"messageOverrides\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"Partial<ValueListMessages>\",\n                    \"resolved\": \"{ dragHandleActive?: string; dragHandleChange?: string; dragHandleCommit?: string; dragHandleIdle?: string; }\",\n                    \"references\": {\n                        \"Partial\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Partial\"\n                        },\n                        \"ValueListMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/value-list/t9n\",\n                            \"id\": \"src/components/value-list/assets/value-list/t9n/index.d.ts::ValueListMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Use this property to override individual strings used by the component.\"\n                }\n            },\n            \"messages\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ValueListMessages\",\n                    \"resolved\": \"{ dragHandleActive: string; dragHandleChange: string; dragHandleCommit: string; dragHandleIdle: string; }\",\n                    \"references\": {\n                        \"ValueListMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/value-list/t9n\",\n                            \"id\": \"src/components/value-list/assets/value-list/t9n/index.d.ts::ValueListMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Made into a prop for testing purposes only\"\n                }\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"dataForFilter\": {},\n            \"defaultMessages\": {},\n            \"effectiveLocale\": {},\n            \"selectedValues\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteListChange\",\n                \"name\": \"calciteListChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emits when any of the list item selections have changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"Map<string, HTMLCalciteValueListItemElement>\",\n                    \"resolved\": \"Map<string, HTMLCalciteValueListItemElement>\",\n                    \"references\": {\n                        \"Map\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Map\"\n                        },\n                        \"HTMLCalciteValueListItemElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteValueListItemElement\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"calciteListOrderChange\",\n                \"name\": \"calciteListOrderChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emits when the order of the list has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"any[]\",\n                    \"resolved\": \"any[]\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteListFilter\",\n                \"name\": \"calciteListFilter\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emits when a filter has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"getSelectedItems\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<Map<string, HTMLCalciteValueListItemElement>>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"Map\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Map\"\n                        },\n                        \"HTMLCalciteValueListItemElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteValueListItemElement\"\n                        }\n                    },\n                    \"return\": \"Promise<Map<string, HTMLCalciteValueListItemElement>>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the component's selected items.\",\n                    \"tags\": []\n                }\n            },\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"(focusId?: ListFocusId) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"focusId\",\n                            \"type\": \"\\\"filter\\\"\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"ListFocusId\": {\n                            \"location\": \"import\",\n                            \"path\": \"../pick-list/shared-list-logic\",\n                            \"id\": \"src/components/pick-list/shared-list-logic.ts::ListFocusId\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"focusId\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"messageOverrides\",\n                \"methodName\": \"onMessagesChange\"\n            }, {\n                \"propName\": \"effectiveLocale\",\n                \"methodName\": \"effectiveLocaleChange\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"focusout\",\n                \"method\": \"calciteListFocusOutHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteListItemRemove\",\n                \"method\": \"calciteListItemRemoveHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteListItemChange\",\n                \"method\": \"calciteListItemChangeHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteInternalListItemPropsChange\",\n                \"method\": \"calciteInternalListItemPropsChangeHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteInternalListItemValueChange\",\n                \"method\": \"calciteInternalListItemValueChangeHandler\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteValueListItemDragHandleBlur\",\n                \"method\": \"handleValueListItemBlur\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n//# sourceMappingURL=value-list.js.map\n"],"mappings":"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"}