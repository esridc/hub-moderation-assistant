{"version":3,"names":["CSS","container","fill","stepLine","label","labelHidden","labelRange","labelValue","unitLabel","stepsVisible","valueVisible","success","warning","danger","meterCss","Meter","constructor","hostRef","this","labelFlipMax","labelFlipProximity","maxPercent","minPercent","resizeObserver","createObserver","resizeHandler","formatLabel","value","labelType","percentFormatting","locale","getSupportedLocale","effectiveLocale","formatter","Intl","NumberFormat","useGrouping","groupSeparator","style","format","numberStringFormatter","numberFormatOptions","numberingSystem","localize","toString","appearance","disabled","fillType","form","undefined","high","low","max","min","name","rangeLabels","rangeLabelType","scale","valueLabel","valueLabelType","currentPercent","highActive","highPercent","lowActive","lowPercent","handleRangeChange","calculateValues","updateLabels","handleLabelChange","async","setUpLoadableComponent","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","connectedCallback","connectLocalized","connectForm","_a","observe","el","disconnectedCallback","disconnectLocalized","disconnectForm","disconnect","valueLabelEl","determineValueLabelPosition","determineVisibleLabels","getMeterKindCssClass","lowest","highest","aboveLowest","belowLowest","aboveHighest","belowHighest","intersects","el1","el2","getBoundingClientRect","minLabelEl","lowLabelEl","highLabelEl","maxLabelEl","highMaxOverlap","lowHighOverlap","lowMaxOverlap","minHighOverlap","minLowOverlap","minMaxOverlap","hiddenClass","classList","add","remove","meterContainerEl","valuePosition","valueLabelWidth","width","containerWidth","labelWidthPercent","insetInlineEnd","removeProperty","insetInlineStart","renderMeterFill","kindClass","h","class","renderRangeLine","position","renderValueLabel","key","ref","renderMinLabel","labelMin","renderLowLabel","styleDefault","styleFlipped","renderHighLabel","renderMaxLabel","labelMax","render","textPercentLabelWithPercent","textUnitLabel","valueText","Host","role"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/meter/resources.js","./node_modules/@esri/calcite-components/dist/collection/components/meter/meter.css?tag=calcite-meter&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/meter/meter.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nexport const CSS = {\n    container: \"container\",\n    fill: \"fill\",\n    stepLine: \"step-line\",\n    label: \"label\",\n    labelHidden: \"label-hidden\",\n    labelRange: \"label-range\",\n    labelValue: \"label-value\",\n    unitLabel: \"unit-label\",\n    stepsVisible: \"steps-visible\",\n    valueVisible: \"value-visible\",\n    success: \"fill-success\",\n    warning: \"fill-warning\",\n    danger: \"fill-danger\",\n};\n//# sourceMappingURL=resources.js.map\n","/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host {\n  display: flex;\n  --calcite-meter-space-internal: 0.125rem;\n  --calcite-meter-height-internal: 1rem;\n  --calcite-meter-font-size-internal: var(--calcite-font-size--1);\n}\n\n:host([scale=s]) {\n  --calcite-meter-height-internal: 0.75rem;\n  --calcite-meter-font-size-internal: var(--calcite-font-size--2);\n}\n\n:host([scale=l]) {\n  --calcite-meter-height-internal: 1.5rem;\n  --calcite-meter-font-size-internal: var(--calcite-font-size-0);\n}\n\n.container {\n  position: relative;\n  margin: 0px;\n  display: flex;\n  inline-size: 100%;\n  align-items: center;\n  block-size: var(--calcite-meter-height-internal);\n  background-color: var(--calcite-color-foreground-2);\n  border: 1px solid var(--calcite-color-border-3);\n  border-radius: var(--calcite-meter-height-internal);\n}\n\n.solid {\n  border: 1px solid var(--calcite-color-foreground-3);\n  background-color: var(--calcite-color-foreground-3);\n}\n\n.outline {\n  background-color: transparent;\n}\n\n.value-visible {\n  margin-block-start: 1.5rem;\n}\n\n.steps-visible {\n  margin-block-end: 1.5rem;\n}\n\n.step-line {\n  position: absolute;\n  inset-block: 0px;\n  display: block;\n  inline-size: var(--calcite-meter-space-internal);\n  background-color: var(--calcite-color-border-3);\n}\n\n.label {\n  position: absolute;\n  font-size: var(--calcite-meter-font-size-internal);\n}\n\n.label-hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n\n.label-value {\n  inset-block-end: calc(100% + 0.5em);\n  font-weight: var(--calcite-font-weight-bold);\n  color: var(--calcite-color-text-1);\n}\n\n.label-range {\n  color: var(--calcite-color-text-3);\n  inset-block-start: calc(100% + 0.5em);\n}\n\n.unit-label {\n  font-weight: var(--calcite-font-weight-medium);\n  color: var(--calcite-color-text-3);\n}\n\n.label-value .unit-label {\n  font-weight: var(--calcite-font-weight-bold);\n  color: var(--calcite-color-text-2);\n}\n\n.fill {\n  position: absolute;\n  z-index: var(--calcite-z-index);\n  display: block;\n  background-color: var(--calcite-color-brand);\n  transition-duration: 150ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  inset-inline-start: var(--calcite-meter-space-internal);\n  inset-block: var(--calcite-meter-space-internal);\n  border-radius: var(--calcite-meter-height-internal);\n  max-inline-size: calc(100% - var(--calcite-meter-space-internal) * 2);\n  min-inline-size: calc(var(--calcite-meter-height-internal) - var(--calcite-meter-space-internal) * 2);\n  transition-property: inline-size, background-color, box-shadow;\n}\n\n.fill-danger {\n  background-color: var(--calcite-color-status-danger);\n}\n\n.fill-success {\n  background-color: var(--calcite-color-status-success);\n}\n\n.fill-warning {\n  background-color: var(--calcite-color-status-warning);\n}\n\n.solid .fill {\n  inset-block: 0;\n  inset-inline-start: 0;\n  max-inline-size: 100%;\n  min-inline-size: calc(var(--calcite-meter-height-internal));\n  box-shadow: 0 0 0 1px var(--calcite-color-brand);\n}\n\n.solid .fill-danger {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-danger);\n}\n\n.solid .fill-success {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-success);\n}\n\n.solid .fill-warning {\n  box-shadow: 0 0 0 1px var(--calcite-color-status-warning);\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, Host } from \"@stencil/core\";\nimport { setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { afterConnectDefaultValueSet, connectForm, disconnectForm, } from \"../../utils/form\";\nimport { connectLocalized, disconnectLocalized, getSupportedLocale, numberStringFormatter, } from \"../../utils/locale\";\nimport { intersects } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { CSS } from \"./resources\";\nexport class Meter {\n    constructor() {\n        this.labelFlipMax = 0.8;\n        this.labelFlipProximity = 0.15;\n        this.maxPercent = 100;\n        this.minPercent = 0;\n        this.resizeObserver = createObserver(\"resize\", () => this.resizeHandler());\n        this.formatLabel = (value, labelType) => {\n            if (labelType === \"percent\") {\n                if (!this.percentFormatting) {\n                    const locale = getSupportedLocale(this.effectiveLocale);\n                    const formatter = new Intl.NumberFormat(locale, {\n                        useGrouping: this.groupSeparator,\n                        style: \"percent\",\n                    });\n                    this.percentFormatting = { formatter, locale };\n                }\n                return this.percentFormatting.formatter.format(value);\n            }\n            else {\n                numberStringFormatter.numberFormatOptions = {\n                    locale: this.effectiveLocale,\n                    numberingSystem: this.numberingSystem,\n                    useGrouping: this.groupSeparator,\n                };\n                return numberStringFormatter.localize(value.toString());\n            }\n        };\n        this.appearance = \"outline-fill\";\n        this.disabled = false;\n        this.fillType = \"range\";\n        this.form = undefined;\n        this.groupSeparator = false;\n        this.high = undefined;\n        this.label = undefined;\n        this.low = undefined;\n        this.max = 100;\n        this.min = 0;\n        this.name = undefined;\n        this.numberingSystem = undefined;\n        this.rangeLabels = false;\n        this.rangeLabelType = \"percent\";\n        this.scale = \"m\";\n        this.unitLabel = \"\";\n        this.value = undefined;\n        this.valueLabel = false;\n        this.valueLabelType = \"percent\";\n        this.currentPercent = undefined;\n        this.effectiveLocale = undefined;\n        this.highActive = undefined;\n        this.highPercent = undefined;\n        this.lowActive = undefined;\n        this.lowPercent = undefined;\n    }\n    handleRangeChange() {\n        this.calculateValues();\n        this.updateLabels();\n    }\n    handleLabelChange() {\n        this.updateLabels();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.calculateValues();\n        afterConnectDefaultValueSet(this, this.value);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n        this.updateLabels();\n    }\n    connectedCallback() {\n        connectLocalized(this);\n        connectForm(this);\n        this.resizeObserver?.observe(this.el);\n    }\n    disconnectedCallback() {\n        disconnectLocalized(this);\n        disconnectForm(this);\n        this.resizeObserver?.disconnect();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    //--------------------------------------------------------------------------\n    resizeHandler() {\n        this.updateLabels();\n    }\n    updateLabels() {\n        if (this.valueLabelEl) {\n            this.determineValueLabelPosition();\n        }\n        if (this.rangeLabels) {\n            this.determineVisibleLabels();\n        }\n    }\n    calculateValues() {\n        const { min, max, low, high, value } = this;\n        const lowPercent = (100 * (low - min)) / (max - min);\n        const highPercent = (100 * (high - min)) / (max - min);\n        const currentPercent = (100 * (value - min)) / (max - min);\n        if (!low || low < min || low > high || low > max) {\n            this.low = min;\n        }\n        if (!high || high > max || high < low || high < min) {\n            this.high = max;\n        }\n        if (!value) {\n            this.value = min;\n        }\n        this.lowPercent = lowPercent;\n        this.highPercent = highPercent;\n        this.currentPercent = value ? currentPercent : 0;\n        this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);\n        this.highActive =\n            !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);\n    }\n    getMeterKindCssClass() {\n        const { low, high, min, max, value } = this;\n        const lowest = low ? low : min;\n        const highest = high ? high : max;\n        const aboveLowest = value >= lowest;\n        const belowLowest = value < lowest;\n        const aboveHighest = value >= highest;\n        const belowHighest = value < highest;\n        if (!value || (!low && belowHighest) || belowLowest) {\n            return CSS.success;\n        }\n        else if (aboveLowest && belowHighest) {\n            return CSS.warning;\n        }\n        else if (aboveHighest) {\n            return CSS.danger;\n        }\n        else {\n            return CSS.success;\n        }\n    }\n    intersects(el1, el2) {\n        return el1 && el2 && intersects(el1.getBoundingClientRect(), el2.getBoundingClientRect());\n    }\n    determineVisibleLabels() {\n        const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;\n        const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);\n        const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);\n        const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);\n        const minHighOverlap = this.intersects(minLabelEl, highLabelEl);\n        const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);\n        const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);\n        const hiddenClass = CSS.labelHidden;\n        if (lowLabelEl) {\n            if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {\n                lowLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                lowLabelEl.classList.remove(hiddenClass);\n            }\n        }\n        if (highLabelEl) {\n            if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {\n                highLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                highLabelEl.classList.remove(hiddenClass);\n            }\n        }\n        if (minLabelEl && maxLabelEl) {\n            if (minMaxOverlap) {\n                maxLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                maxLabelEl.classList.remove(hiddenClass);\n            }\n        }\n    }\n    determineValueLabelPosition() {\n        const { valueLabelEl, meterContainerEl, currentPercent } = this;\n        const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;\n        const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;\n        const containerWidth = meterContainerEl.getBoundingClientRect().width;\n        const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);\n        if (valuePosition + labelWidthPercent >= 100) {\n            valueLabelEl.style.insetInlineEnd = \"0%\";\n            valueLabelEl.style.removeProperty(\"inset-inline-start\");\n        }\n        else {\n            valueLabelEl.style.insetInlineStart = `${valuePosition}% `;\n            valueLabelEl.style.removeProperty(\"inset-inline-end\");\n        }\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    renderMeterFill() {\n        const { currentPercent, fillType } = this;\n        const kindClass = this.getMeterKindCssClass();\n        return (h(\"div\", { class: { [CSS.fill]: true, [kindClass]: fillType !== \"single\" }, style: { width: `${currentPercent}%` } }));\n    }\n    renderRangeLine(position) {\n        const style = { insetInlineStart: `${position}%` };\n        return h(\"div\", { class: CSS.stepLine, style: style });\n    }\n    renderValueLabel() {\n        const { currentPercent, valueLabelType, unitLabel, value } = this;\n        const label = this.formatLabel(valueLabelType === \"percent\" ? currentPercent / 100 : value || 0, valueLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelValue]: true }, key: \"low-label-line\", ref: (el) => (this.valueLabelEl = el) }, label, unitLabel && valueLabelType !== \"percent\" && (h(\"span\", { class: CSS.unitLabel }, \"\\u00A0\", unitLabel))));\n    }\n    renderMinLabel() {\n        const { rangeLabelType, min, minPercent, unitLabel } = this;\n        const style = { insetInlineStart: `${minPercent}%` };\n        const labelMin = this.formatLabel(rangeLabelType === \"percent\" ? minPercent : min, rangeLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"min-label-line\", ref: (el) => (this.minLabelEl = el), style: style }, labelMin, unitLabel && rangeLabelType !== \"percent\" && (h(\"span\", { class: CSS.unitLabel }, \"\\u00A0\", unitLabel))));\n    }\n    renderLowLabel() {\n        const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;\n        const label = low\n            ? this.formatLabel(rangeLabelType === \"percent\" ? lowPercent / 100 : low, rangeLabelType)\n            : \"\";\n        const styleDefault = { insetInlineStart: `${lowPercent}%` };\n        const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };\n        const style = (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"low-label-line\", ref: (el) => (this.lowLabelEl = el), style: style }, label));\n    }\n    renderHighLabel() {\n        const { rangeLabelType, high, highPercent, labelFlipMax } = this;\n        const label = high\n            ? this.formatLabel(rangeLabelType === \"percent\" ? highPercent / 100 : high, rangeLabelType)\n            : \"\";\n        const styleDefault = { insetInlineStart: `${highPercent}%` };\n        const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };\n        const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"high-label-line\", ref: (el) => (this.highLabelEl = el), style: style }, label));\n    }\n    renderMaxLabel() {\n        const { rangeLabelType, max, maxPercent } = this;\n        const style = { insetInlineEnd: `${100 - maxPercent}%` };\n        const labelMax = this.formatLabel(rangeLabelType === \"percent\" ? maxPercent / 100 : max, rangeLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"max-label-line\", ref: (el) => (this.maxLabelEl = el), style: style }, labelMax));\n    }\n    render() {\n        const { appearance, currentPercent, highActive, highPercent, label, lowActive, lowPercent, max, maxPercent, min, minPercent, rangeLabels, rangeLabelType, unitLabel, value, valueLabel, valueLabelType, } = this;\n        const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, \"percent\");\n        const textUnitLabel = `${value} ${unitLabel}`;\n        const valueText = valueLabelType === \"percent\"\n            ? textPercentLabelWithPercent\n            : unitLabel\n                ? textUnitLabel\n                : undefined;\n        return (h(Host, { key: 'fcee48513fcd17eaf45fd1b17588eaef055f718f' }, h(\"div\", { key: '17d2afdfc9c8447789a54648e6ad14580be2bdcd', \"aria-label\": label, \"aria-valuemax\": rangeLabelType === \"percent\" ? maxPercent : max, \"aria-valuemin\": rangeLabelType === \"percent\" ? minPercent : min, \"aria-valuenow\": valueLabelType === \"percent\" ? currentPercent : value, \"aria-valuetext\": valueText, class: {\n                [CSS.container]: true,\n                [CSS.stepsVisible]: rangeLabels,\n                [CSS.valueVisible]: valueLabel,\n                [appearance]: appearance !== \"outline-fill\",\n            }, ref: (el) => (this.meterContainerEl = el), role: \"meter\" }, this.renderMeterFill(), valueLabel && this.renderValueLabel(), lowActive && this.renderRangeLine(lowPercent), highActive && this.renderRangeLine(highPercent), rangeLabels && this.renderMinLabel(), rangeLabels && lowActive && this.renderLowLabel(), rangeLabels && highActive && this.renderHighLabel(), rangeLabels && this.renderMaxLabel())));\n    }\n    static get is() { return \"calcite-meter\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"meter.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"meter.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"appearance\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\\"outline\\\" | \\\"outline-fill\\\" | \\\"solid\\\", Appearance>\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"outline-fill\\\" | \\\"solid\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"Appearance\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Appearance\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the appearance style of the component.\"\n                },\n                \"attribute\": \"appearance\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"outline-fill\\\"\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"fillType\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"MeterFillType\",\n                    \"resolved\": \"\\\"range\\\" | \\\"single\\\"\",\n                    \"references\": {\n                        \"MeterFillType\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/meter/interfaces.ts::MeterFillType\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the component's display, where `\\\"single\\\"` displays a single color and `\\\"range\\\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.\"\n                },\n                \"attribute\": \"fill-type\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"range\\\"\"\n            },\n            \"form\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `id` of the form that will be associated with the component.\\n\\nWhen not set, the component will be associated with its ancestor form element, if any.\"\n                },\n                \"attribute\": \"form\",\n                \"reflect\": true\n            },\n            \"groupSeparator\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, number values are displayed with a group separator corresponding to the language and country format.\"\n                },\n                \"attribute\": \"group-separator\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"high\": {\n                \"type\": \"number\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies a high value.  When `fillType` is `\\\"range\\\"`, displays a different color when above the specified threshold.\"\n                },\n                \"attribute\": \"high\",\n                \"reflect\": true\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": true,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Accessible name for the component.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"low\": {\n                \"type\": \"number\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies a low value.  When `fillType` is `\\\"range\\\"`, displays a different color when above the specified threshold.\"\n                },\n                \"attribute\": \"low\",\n                \"reflect\": true\n            },\n            \"max\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the highest allowed value of the component.\"\n                },\n                \"attribute\": \"max\",\n                \"reflect\": true,\n                \"defaultValue\": \"100\"\n            },\n            \"min\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the lowest allowed value of the component.\"\n                },\n                \"attribute\": \"min\",\n                \"reflect\": true,\n                \"defaultValue\": \"0\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the name of the component.\\n\\nRequired to pass the component's `value` on form submission.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": true\n            },\n            \"numberingSystem\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"NumberingSystem\",\n                    \"resolved\": \"\\\"arab\\\" | \\\"arabext\\\" | \\\"latn\\\"\",\n                    \"references\": {\n                        \"NumberingSystem\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/locale\",\n                            \"id\": \"src/utils/locale.ts::NumberingSystem\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the Unicode numeral system used by the component for localization.\"\n                },\n                \"attribute\": \"numbering-system\",\n                \"reflect\": false\n            },\n            \"rangeLabels\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, displays the values of `high`, `low`, `min`, and `max`.\"\n                },\n                \"attribute\": \"range-labels\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"rangeLabelType\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"MeterLabelType\",\n                    \"resolved\": \"\\\"percent\\\" | \\\"units\\\"\",\n                    \"references\": {\n                        \"MeterLabelType\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/meter/interfaces.ts::MeterLabelType\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `rangeLabels` is `true`, specifies the format of displayed labels.\"\n                },\n                \"attribute\": \"range-label-type\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"percent\\\"\"\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"unitLabel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `rangeLabelType` is `\\\"units\\\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.\"\n                },\n                \"attribute\": \"unit-label\",\n                \"reflect\": false,\n                \"defaultValue\": \"\\\"\\\"\"\n            },\n            \"value\": {\n                \"type\": \"number\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the current value of the component.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            },\n            \"valueLabel\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, displays the current value.\"\n                },\n                \"attribute\": \"value-label\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"valueLabelType\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"MeterLabelType\",\n                    \"resolved\": \"\\\"percent\\\" | \\\"units\\\"\",\n                    \"references\": {\n                        \"MeterLabelType\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/meter/interfaces.ts::MeterLabelType\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `valueLabel` is `true`, specifies the format of displayed label.\"\n                },\n                \"attribute\": \"value-label-type\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"percent\\\"\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"currentPercent\": {},\n            \"effectiveLocale\": {},\n            \"highActive\": {},\n            \"highPercent\": {},\n            \"lowActive\": {},\n            \"lowPercent\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"min\",\n                \"methodName\": \"handleRangeChange\"\n            }, {\n                \"propName\": \"max\",\n                \"methodName\": \"handleRangeChange\"\n            }, {\n                \"propName\": \"low\",\n                \"methodName\": \"handleRangeChange\"\n            }, {\n                \"propName\": \"high\",\n                \"methodName\": \"handleRangeChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"handleRangeChange\"\n            }, {\n                \"propName\": \"rangeLabels\",\n                \"methodName\": \"handleLabelChange\"\n            }, {\n                \"propName\": \"rangeLabelType\",\n                \"methodName\": \"handleLabelChange\"\n            }, {\n                \"propName\": \"unitLabel\",\n                \"methodName\": \"handleLabelChange\"\n            }, {\n                \"propName\": \"valueLabel\",\n                \"methodName\": \"handleLabelChange\"\n            }, {\n                \"propName\": \"valueLabelType\",\n                \"methodName\": \"handleLabelChange\"\n            }];\n    }\n}\n//# sourceMappingURL=meter.js.map\n"],"mappings":"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"}