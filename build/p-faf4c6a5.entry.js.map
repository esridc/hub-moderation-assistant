{"version":3,"names":["cardGroupCss","CardGroup","constructor","hostRef","this","items","udpateItemsOnSelectionModeChange","updateSlottedItems","slotRefEl","updateSelectedItems","updateItemsOnSlotChange","event","target","assignedElements","flatten","filter","el","matches","forEach","selectionMode","setSelectedItems","emit","elToMatch","matchingEl","selected","selectedItems","disabled","calciteCardGroupSelect","label","undefined","onSelectionModeChange","connectedCallback","connectInteractive","componentDidRender","updateHostInteraction","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectInteractive","async","setUpLoadableComponent","calciteInternalCardKeyEventListener","composedPath","includes","interactiveItems","detail","focusElementInGroup","calciteCardSelectListener","selectable","componentLoaded","focusElement","render","role","h","Host","key","InteractiveContainer","toAriaBoolean","class","onSlotchange","ref"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/card-group/card-group.css?tag=calcite-card-group&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/card-group/card-group.js"],"sourcesContent":["/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:08 GMT\n */\n/**\n * Do not edit directly\n * Generated on Fri, 02 Aug 2024 20:03:06 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-card-group-gap: Specifies the gap between slotted components.\n*/\n:host {\n  --calcite-card-group-gap: var(--calcite-size-md);\n  display: block;\n}\n\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--calcite-card-group-gap);\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.11.1\n */\nimport { h, Host, } from \"@stencil/core\";\nimport { focusElement, focusElementInGroup, toAriaBoolean } from \"../../utils/dom\";\nimport { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from \"../../utils/interactive\";\nimport { componentLoaded, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\n/**\n * @slot - A slot for adding one or more `calcite-card`s.\n */\nexport class CardGroup {\n    constructor() {\n        //--------------------------------------------------------------------------\n        //\n        //  Private Properties\n        //\n        //--------------------------------------------------------------------------\n        this.items = [];\n        //--------------------------------------------------------------------------\n        //\n        //  Private Methods\n        //\n        //--------------------------------------------------------------------------\n        this.udpateItemsOnSelectionModeChange = () => {\n            this.updateSlottedItems(this.slotRefEl);\n            this.updateSelectedItems();\n        };\n        this.updateItemsOnSlotChange = (event) => {\n            this.updateSlottedItems(event.target);\n            this.updateSelectedItems();\n        };\n        this.updateSlottedItems = (target) => {\n            this.items = target\n                .assignedElements({ flatten: true })\n                .filter((el) => el?.matches(\"calcite-card\"));\n        };\n        this.updateSelectedItems = () => {\n            this.items.forEach((el) => {\n                el.selectionMode = this.selectionMode;\n            });\n            this.setSelectedItems(false);\n        };\n        this.setSelectedItems = (emit, elToMatch) => {\n            if (elToMatch) {\n                this.items.forEach((el) => {\n                    const matchingEl = elToMatch === el;\n                    switch (this.selectionMode) {\n                        case \"multiple\":\n                            if (matchingEl) {\n                                el.selected = !el.selected;\n                            }\n                            break;\n                        case \"single\":\n                            el.selected = matchingEl ? !el.selected : false;\n                            break;\n                        case \"single-persist\":\n                            el.selected = !!matchingEl;\n                            break;\n                    }\n                });\n            }\n            this.selectedItems = this.items.filter((el) => el.selected);\n            if (emit && this.selectionMode !== \"none\" && !this.disabled) {\n                this.calciteCardGroupSelect.emit();\n            }\n        };\n        this.disabled = false;\n        this.label = undefined;\n        this.selectionMode = \"none\";\n        this.selectedItems = [];\n    }\n    onSelectionModeChange() {\n        this.udpateItemsOnSelectionModeChange();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    connectedCallback() {\n        connectInteractive(this);\n    }\n    componentDidRender() {\n        updateHostInteraction(this);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n    }\n    disconnectedCallback() {\n        disconnectInteractive(this);\n    }\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Event Listeners\n    //\n    //--------------------------------------------------------------------------\n    calciteInternalCardKeyEventListener(event) {\n        if (event.composedPath().includes(this.el)) {\n            const interactiveItems = this.items.filter((el) => !el.disabled);\n            switch (event.detail[\"key\"]) {\n                case \"ArrowRight\":\n                    focusElementInGroup(interactiveItems, event.target, \"next\");\n                    break;\n                case \"ArrowLeft\":\n                    focusElementInGroup(interactiveItems, event.target, \"previous\");\n                    break;\n                case \"Home\":\n                    focusElementInGroup(interactiveItems, event.target, \"first\");\n                    break;\n                case \"End\":\n                    focusElementInGroup(interactiveItems, event.target, \"last\");\n                    break;\n            }\n        }\n    }\n    calciteCardSelectListener(event) {\n        if (event.composedPath().includes(this.el) &&\n            !event.target.selectable) {\n            this.setSelectedItems(true, event.target);\n        }\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    // --------------------------------------------------------------------------\n    /**\n     * Sets focus on the component's first focusable element.\n     */\n    async setFocus() {\n        await componentLoaded(this);\n        if (!this.disabled) {\n            focusElement(this.items[0]);\n        }\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    render() {\n        const role = this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n        return (h(Host, { key: 'f7d72ac0d0c8b0cec9b1c5c048ed2a8ee304d9e2' }, h(InteractiveContainer, { key: 'b477bbced684168f1e68c1fe0d8511a689653995', disabled: this.disabled }, h(\"div\", { key: 'ce0aa841b96ad23886e109203a14ac2b0e54b948', \"aria-disabled\": toAriaBoolean(this.disabled), \"aria-label\": this.label, class: \"container\", role: role }, h(\"slot\", { key: '338c12be0a5a675daf911aad6049aff6319d3064', onSlotchange: this.updateItemsOnSlotChange, ref: (el) => (this.slotRefEl = el) })))));\n    }\n    static get is() { return \"calcite-card-group\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"card-group.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"card-group.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": true,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Accessible name for the component.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"selectionMode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\n    \\\"multiple\\\" | \\\"single\\\" | \\\"single-persist\\\" | \\\"none\\\",\\n    SelectionMode\\n  >\",\n                    \"resolved\": \"\\\"multiple\\\" | \\\"none\\\" | \\\"single\\\" | \\\"single-persist\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"SelectionMode\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::SelectionMode\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the selection mode of the component.\"\n                },\n                \"attribute\": \"selection-mode\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"none\\\"\"\n            },\n            \"selectedItems\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"HTMLCalciteCardElement[]\",\n                    \"resolved\": \"HTMLCalciteCardElement[]\",\n                    \"references\": {\n                        \"HTMLCalciteCardElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLCalciteCardElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"readonly\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Specifies the component's selected items.\"\n                },\n                \"defaultValue\": \"[]\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteCardGroupSelect\",\n                \"name\": \"calciteCardGroupSelect\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emits when the component's selection changes and the `selectionMode` is not `none`.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"selectionMode\",\n                \"methodName\": \"onSelectionModeChange\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"calciteInternalCardKeyEvent\",\n                \"method\": \"calciteInternalCardKeyEventListener\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"calciteCardSelect\",\n                \"method\": \"calciteCardSelectListener\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n//# sourceMappingURL=card-group.js.map\n"],"mappings":"qSAAA,MAAMA,EAAe,whB,MCYRC,EAAS,MAClBC,YAAAC,G,yEAMIC,KAAKC,MAAQ,GAMbD,KAAKE,iCAAmC,KACpCF,KAAKG,mBAAmBH,KAAKI,WAC7BJ,KAAKK,qBAAqB,EAE9BL,KAAKM,wBAA2BC,IAC5BP,KAAKG,mBAAmBI,EAAMC,QAC9BR,KAAKK,qBAAqB,EAE9BL,KAAKG,mBAAsBK,IACvBR,KAAKC,MAAQO,EACRC,iBAAiB,CAAEC,QAAS,OAC5BC,QAAQC,GAAOA,IAAE,MAAFA,SAAE,SAAFA,EAAIC,QAAQ,iBAAgB,EAEpDb,KAAKK,oBAAsB,KACvBL,KAAKC,MAAMa,SAASF,IAChBA,EAAGG,cAAgBf,KAAKe,aAAa,IAEzCf,KAAKgB,iBAAiB,MAAM,EAEhChB,KAAKgB,iBAAmB,CAACC,EAAMC,KAC3B,GAAIA,EAAW,CACXlB,KAAKC,MAAMa,SAASF,IAChB,MAAMO,EAAaD,IAAcN,EACjC,OAAQZ,KAAKe,eACT,IAAK,WACD,GAAII,EAAY,CACZP,EAAGQ,UAAYR,EAAGQ,Q,CAEtB,MACJ,IAAK,SACDR,EAAGQ,SAAWD,GAAcP,EAAGQ,SAAW,MAC1C,MACJ,IAAK,iBACDR,EAAGQ,WAAaD,EAChB,M,IAIhBnB,KAAKqB,cAAgBrB,KAAKC,MAAMU,QAAQC,GAAOA,EAAGQ,WAClD,GAAIH,GAAQjB,KAAKe,gBAAkB,SAAWf,KAAKsB,SAAU,CACzDtB,KAAKuB,uBAAuBN,M,GAGpCjB,KAAKsB,SAAW,MAChBtB,KAAKwB,MAAQC,UACbzB,KAAKe,cAAgB,OACrBf,KAAKqB,cAAgB,E,CAEzBK,wBACI1B,KAAKE,kC,CAOTyB,oBACIC,EAAmB5B,K,CAEvB6B,qBACIC,EAAsB9B,K,CAE1B+B,mBACIC,EAAmBhC,K,CAEvBiC,uBACIC,EAAsBlC,K,CAE1BmC,0BACIC,EAAuBpC,K,CAO3BqC,oCAAoC9B,GAChC,GAAIA,EAAM+B,eAAeC,SAASvC,KAAKY,IAAK,CACxC,MAAM4B,EAAmBxC,KAAKC,MAAMU,QAAQC,IAAQA,EAAGU,WACvD,OAAQf,EAAMkC,OAAO,QACjB,IAAK,aACDC,EAAoBF,EAAkBjC,EAAMC,OAAQ,QACpD,MACJ,IAAK,YACDkC,EAAoBF,EAAkBjC,EAAMC,OAAQ,YACpD,MACJ,IAAK,OACDkC,EAAoBF,EAAkBjC,EAAMC,OAAQ,SACpD,MACJ,IAAK,MACDkC,EAAoBF,EAAkBjC,EAAMC,OAAQ,QACpD,M,EAIhBmC,0BAA0BpC,GACtB,GAAIA,EAAM+B,eAAeC,SAASvC,KAAKY,MAClCL,EAAMC,OAAOoC,WAAY,CAC1B5C,KAAKgB,iBAAiB,KAAMT,EAAMC,O,EAW1C2B,uBACUU,EAAgB7C,MACtB,IAAKA,KAAKsB,SAAU,CAChBwB,EAAa9C,KAAKC,MAAM,G,EAQhC8C,SACI,MAAMC,EAAOhD,KAAKe,gBAAkB,QAAUf,KAAKe,gBAAkB,WAAa,QAAU,aAC5F,OAAQkC,EAAEC,EAAM,CAAEC,IAAK,4CAA8CF,EAAEG,EAAsB,CAAED,IAAK,2CAA4C7B,SAAUtB,KAAKsB,UAAY2B,EAAE,MAAO,CAAEE,IAAK,2CAA4C,gBAAiBE,EAAcrD,KAAKsB,UAAW,aAActB,KAAKwB,MAAO8B,MAAO,YAAaN,KAAMA,GAAQC,EAAE,OAAQ,CAAEE,IAAK,2CAA4CI,aAAcvD,KAAKM,wBAAyBkD,IAAM5C,GAAQZ,KAAKI,UAAYQ,M"}