{"version":3,"names":["colorPickerCss","CalciteColorPickerStyle0","throttleFor60FpsInMs","ColorPicker","this","internalColorUpdateContext","isActiveChannelInputEmpty","mode","CSSColorMode","HEX","shiftKeyChannelAdjustment","upOrDownArrowKeyTracker","handleTabActivate","event","channelMode","currentTarget","getAttribute","updateChannelsFromColor","color","handleColorFieldScopeKeyDown","key","arrowKeyToXYOffset","ArrowUp","x","y","ArrowRight","ArrowDown","ArrowLeft","preventDefault","scopeOrientation","captureColorFieldColor","colorFieldScopeLeft","colorFieldScopeTop","handleHueScopeKeyDown","modifier","shiftKey","arrowKeyToXOffset","delta","hue","baseColorFieldColor","internalColorSet","handleHexInputChange","stopPropagation","isClearable","input","target","hex","value","normalizedHex","normalizeHex","hexify","alphaCompatible","Color","handleSavedColorSelect","swatch","handleChannelInput","channelIndex","Number","isAlphaChannel","limit","OPACITY_LIMITS","max","RGB_LIMITS","Object","keys","HSV_LIMITS","inputValue","adjustedValue","clamped","clamp","toString","handleChannelChange","handleChannelBlur","channels","restoreValueDueToEmptyInput","handleChannelFocus","selectText","shouldClearChannels","getChannelInputLimit","opacityToAlpha","updateColorFromChannels","handleSavedColorKeyDown","isActivationKey","handleColorFieldPointerDown","isPrimaryPointerButton","offsetX","offsetY","window","addEventListener","globalPointerMoveHandler","globalPointerUpHandler","once","activeCanvasInfo","context","colorFieldRenderingContext","bounds","canvas","getBoundingClientRect","focusScope","colorFieldScopeNode","handleHueSliderPointerDown","hueSliderRenderingContext","captureHueSliderColor","hueScopeNode","handleOpacitySliderPointerDown","opacitySliderRenderingContext","captureOpacitySliderValue","opacityScopeNode","previouslyDragging","drawColorControls","calciteColorPickerChange","emit","el","isConnected","samplingX","samplingY","clientX","clientY","matches","width","height","storeColorFieldScope","node","storeHueScope","renderChannelsTabTitle","activeChannelMode","messages","selected","label","rgb","hsv","h","class","CSS","colorMode","onCalciteTabsActivate","renderChannelsTab","alphaChannel","isRgb","channelAriaLabels","red","green","blue","saturation","direction","getElementDir","channelsToRender","slice","control","dir","map","channelValue","index","alphaToOpacity","renderChannel","ariaLabel","suffix","channel","lang","effectiveLocale","numberButtonType","numberingSystem","onCalciteInputNumberChange","onCalciteInputNumberInput","onCalciteInternalInputNumberBlur","onCalciteInternalInputNumberFocus","onKeyDown","handleKeyDown","scale","style","marginLeft","suffixText","deleteColor","colorToDelete","inStorage","savedColors","indexOf","filter","storageKey","DEFAULT_STORAGE_KEY_PREFIX","storageId","localStorage","setItem","JSON","stringify","saveColor","colorToSave","alreadySaved","throttle","type","drawColorField","drawHueSlider","drawOpacitySlider","skipEqual","dimensions","colorField","Math","round","s","v","saturationv","initColorField","getContext","updateCanvasSize","initHueSlider","initOpacitySlider","storeOpacityScope","handleOpacityScopeKeyDown","alpha","DEFAULT_COLOR","toChannels","DIMENSIONS","m","handleAllowEmptyOrClearableChange","clearable","allowEmpty","handleAlphaChannelChange","format","console","warn","handleAlphaChannelDimensionsChange","effectiveSliderWidth","getSliderWidth","handleColorChange","oldColor","previousColor","handleFormatOrAlphaChannelChange","setMode","handleScaleChange","updateDimensions","onMessagesChange","handleValueChange","oldValue","checkMode","modeChanged","nextMode","parseMode","showIncompatibleColorWarning","dragging","calciteColorPickerInput","normalizeColor","colorChanged","colorEqual","endsWith","effectiveLocaleChange","updateMessages","handleChannelKeyUpOrDown","composedPath","some","classList","contains","complementaryBump","focusEl","requestAnimationFrame","focus","setFocus","componentFocusable","focusFirstTabbable","componentWillLoad","setUpLoadableComponent","willSetNoColor","parsedMode","valueIsCompatible","initialColor","getItem","parse","setUpMessages","connectedCallback","connectInteractive","connectLocalized","connectMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","removeEventListener","disconnectInteractive","disconnectLocalized","disconnectMessages","componentDidRender","updateHostInteraction","render","channelsDisabled","thumb","radius","thumbRadius","hexDisabled","hideChannels","hideHex","hideSaved","hueScopeLeft","opacityScopeLeft","savedDisabled","sliderWidth","selectedColorInHex","hueTop","hueLeft","opacityTop","opacityLeft","noColor","vertical","noHex","noChannels","noSaved","adjustedColorFieldScopeLeft","adjustedColorFieldScopeTop","getAdjustedScopePosition","adjustedHueScopeLeft","adjustedHueScopeTop","adjustedOpacityScopeLeft","adjustedOpacityScopeTop","InteractiveContainer","disabled","container","controlAndScope","onPointerDown","ref","scope","colorFieldScope","role","top","left","tabindex","previewAndSliders","preview","sliders","slider","hueSlider","hueScope","opacitySlider","opacity","min","opacityScope","controlSection","section","hexAndChannelsGroup","hexOptions","onCalciteColorPickerHexInputChange","colorModeContainer","splitSection","slot","savedColorsSection","header","saved","savedColorsButtons","appearance","iconStart","kind","onClick","length","savedColor","tabIndex","ensureCompatibleMode","isAlphaCompatible","alphaMode","toAlphaMode","nonAlphaMode","toNonAlphaMode","HUE_LIMIT_CONSTRAINED","toValue","hexMode","includes","hasAlpha","HEXA","replace","string","needToInjectAlpha","model","values","colorObject","object","normalizeAlpha","getSliderCapSpacing","fillStyle","fillRect","whiteGradient","createLinearGradient","addColorStop","blackGradient","drawActiveColorFieldColor","setCanvasContextSize","devicePixelRatio","adjustedSliderDimensions","hsvColor","drawThumb","applyAlpha","startAngle","endAngle","PI","outlineWidth","beginPath","arc","fill","strokeStyle","lineWidth","stroke","pattern","createPattern","getCheckeredBackgroundPattern","globalCompositeOperation","drawActiveHueSliderColor","sliderBoundX","getSliderBoundX","gradient","hueSliderColorStopKeywords","offset","currentOffset","forEach","keyword","clearRect","drawSliderPath","startColor","midColor","endColor","drawActiveOpacitySliderColor","moveTo","lineTo","quadraticCurveTo","closePath","checkerPattern","document","createElement","patternContext","closeToEdge","closeToRangeEdge","remap","array","isAlpha","floor","push","SCOPE_SIZE","hexInput","opacityInput","colorPickerHexInputCss","CalciteColorPickerHexInputStyle0","ColorPickerHexInput","onHexInputBlur","hexInputNode","internalColor","willClearValue","isLonghand","isLonghandHex","isShorthandHex","onHexInputChange","isValidHex","formatHexForInternalInput","rgbToHex","onOpacityInputBlur","opacityInputNode","formatOpacityForInternalInput","onOpacityInputInput","onOpacityInputChange","nodeValue","normalized","preserveExistingAlpha","alphaHex","hexa","internalSetValue","onInputFocus","onHexInputInput","hexInputValue","onInputKeyDown","altKey","ctrlKey","metaKey","isNudgeKey","previousNonNullValue","bump","nudgeRGBChannels","withModifiers","singleChar","validHexChar","hexChar","test","onHexInputPaste","clipboardData","getData","storeHexInputRef","storeOpacityInputRef","hexLabel","opacityInputValue","inputScale","maxLength","onCalciteInputTextChange","onCalciteInputTextInput","onCalciteInternalInputTextBlur","onCalciteInternalInputTextFocus","onPaste","prefixText","focusElement","currentColor","nextColor","normalizedLonghand","changed","calciteColorPickerHexInputChange","amount","nudgedChannels","rgbChannels","nudgedRGBChannels","undefined","nudgedAlpha","noColorSwatch","checker","COLORS","borderLight","borderDark","checkerSquareSize","CHECKER_DIMENSIONS","squareSize","size","colorPickerSwatchCss","CalciteColorPickerSwatchStyle0","ColorPickerSwatch","isEmpty","classes","xmlns","renderSwatch","active","borderRadius","theme","getModeName","borderColor","commonSwatchProps","rx","Fragment","id","x1","x2","y1","y2","patternUnits"],"sources":["src/components/color-picker/color-picker.scss?tag=calcite-color-picker&encapsulation=shadow","src/components/color-picker/color-picker.tsx","src/components/color-picker-hex-input/resources.ts","src/components/color-picker-hex-input/color-picker-hex-input.scss?tag=calcite-color-picker-hex-input&encapsulation=shadow","src/components/color-picker-hex-input/color-picker-hex-input.tsx","src/components/color-picker-swatch/resources.ts","src/components/color-picker-swatch/color-picker-swatch.scss?tag=calcite-color-picker-swatch&encapsulation=shadow","src/components/color-picker-swatch/color-picker-swatch.tsx"],"sourcesContent":[":host {\n  @apply text-n2h inline-block font-normal;\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  --calcite-color-picker-spacing: 8px;\n\n  .container {\n    inline-size: 160px;\n  }\n\n  .saved-colors {\n    @apply gap-1;\n    grid-template-columns: repeat(auto-fill, 20px);\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-color-picker-spacing: 12px;\n\n  .container {\n    inline-size: 272px;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-color-picker-spacing: 16px;\n\n  @apply text-n1h;\n\n  .container {\n    inline-size: 464px;\n  }\n\n  .section {\n    &:first-of-type {\n      padding-block-start: var(--calcite-color-picker-spacing);\n    }\n  }\n\n  .saved-colors {\n    grid-template-columns: repeat(auto-fill, 32px);\n  }\n\n  .control-section {\n    @apply flex-nowrap items-baseline;\n  }\n\n  .control-section {\n    @apply flex-wrap;\n  }\n\n  .color-hex-options {\n    @apply flex\n      flex-shrink\n      flex-col\n      justify-around;\n  }\n\n  .color-mode-container {\n    flex-shrink: 3;\n  }\n}\n\n.container {\n  @apply bg-foreground-1;\n  display: inline-block;\n  border: 1px solid var(--calcite-color-border-1);\n}\n\n.control-and-scope {\n  @apply flex relative cursor-pointer touch-none;\n}\n\n.scope {\n  @apply text-n1\n    focus-base\n    absolute\n    z-default\n    rounded-full\n    bg-transparent\n    w-px\n    h-px\n    pointer-events-none;\n  &:focus {\n    @apply focus-outset;\n    outline-offset: 6px;\n  }\n}\n\n.hex-and-channels-group {\n  @apply w-full;\n}\n\n.hex-and-channels-group,\n.control-section {\n  @apply flex flex-row flex-wrap;\n}\n\n.section {\n  padding-block: 0 var(--calcite-color-picker-spacing);\n  padding-inline: var(--calcite-color-picker-spacing);\n\n  &:first-of-type {\n    padding-block-start: var(--calcite-color-picker-spacing);\n  }\n}\n\n.sliders {\n  @apply flex flex-col justify-between;\n  margin-inline-start: var(--calcite-color-picker-spacing);\n  gap: var(--calcite-spacing-xxs);\n}\n\n.preview-and-sliders {\n  @apply flex items-center;\n  padding: var(--calcite-color-picker-spacing);\n}\n\n.color-hex-options,\n.section--split {\n  flex-grow: 1;\n}\n\n.header {\n  @apply text-color-1\n    flex\n    items-center\n    justify-between;\n}\n\n.color-mode-container {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.channels {\n  @apply flex gap-y-0.5;\n}\n\n.channel {\n  &[data-channel-index=\"3\"] {\n    inline-size: 159px;\n  }\n}\n\n:host([scale=\"s\"]) {\n  .channels {\n    @apply flex-wrap;\n  }\n\n  .channel {\n    flex-basis: 30%;\n    flex-grow: 1;\n\n    &[data-channel-index=\"3\"] {\n      inline-size: unset;\n      margin-inline-start: unset;\n    }\n  }\n}\n\n:host([scale=\"l\"]) {\n  .channel {\n    &[data-channel-index=\"3\"] {\n      inline-size: 131px;\n    }\n  }\n}\n\n.saved-colors {\n  @apply grid gap-2;\n  padding-block-start: var(--calcite-color-picker-spacing);\n  grid-template-columns: repeat(auto-fill, 24px);\n}\n\n.saved-colors-buttons {\n  display: flex;\n}\n\n.saved-color {\n  @include focus-style-base();\n\n  cursor: pointer;\n\n  &:focus {\n    @include focus-style-outset();\n  }\n\n  &:hover {\n    transition: outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;\n    outline: 2px solid var(--calcite-color-border-2);\n    outline-offset: 2px;\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Color from \"color\";\nimport { throttle } from \"lodash-es\";\nimport {\n  Direction,\n  focusFirstTabbable,\n  getElementDir,\n  isPrimaryPointerButton,\n} from \"../../utils/dom\";\nimport { Scale } from \"../interfaces\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  NumberingSystem,\n} from \"../../utils/locale\";\nimport { clamp, closeToRangeEdge, remap } from \"../../utils/math\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  alphaCompatible,\n  alphaToOpacity,\n  colorEqual,\n  CSSColorMode,\n  Format,\n  getSliderWidth,\n  hexify,\n  normalizeAlpha,\n  normalizeColor,\n  normalizeHex,\n  opacityToAlpha,\n  parseMode,\n  SupportedMode,\n  toAlphaMode,\n  toNonAlphaMode,\n} from \"./utils\";\nimport {\n  CSS,\n  DEFAULT_COLOR,\n  DEFAULT_STORAGE_KEY_PREFIX,\n  DIMENSIONS,\n  HSV_LIMITS,\n  HUE_LIMIT_CONSTRAINED,\n  OPACITY_LIMITS,\n  RGB_LIMITS,\n  SCOPE_SIZE,\n} from \"./resources\";\nimport { Channels, ColorMode, ColorValue, HSLA, HSVA, InternalColor, RGBA } from \"./interfaces\";\nimport { ColorPickerMessages } from \"./assets/color-picker/t9n\";\n\nconst throttleFor60FpsInMs = 16;\n\n@Component({\n  tag: \"calcite-color-picker\",\n  styleUrl: \"color-picker.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class ColorPicker\n  implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Public properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   *\n   * @deprecated Use `clearable` instead\n   */\n  @Prop({ reflect: true }) allowEmpty = false;\n\n  @Watch(\"allowEmpty\")\n  @Watch(\"clearable\")\n  handleAllowEmptyOrClearableChange(): void {\n    this.isClearable = this.clearable || this.allowEmpty;\n  }\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  @Watch(\"alphaChannel\")\n  handleAlphaChannelChange(alphaChannel: boolean): void {\n    const { format } = this;\n\n    if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n      console.warn(\n        `ignoring alphaChannel as the current format (${format}) does not support alpha`,\n      );\n      this.alphaChannel = false;\n    }\n  }\n\n  @Watch(\"alphaChannel\")\n  @Watch(\"dimensions\")\n  handleAlphaChannelDimensionsChange(): void {\n    this.effectiveSliderWidth = getSliderWidth(this.dimensions, this.alphaChannel);\n    this.drawColorControls();\n  }\n\n  /** When `true`, hides the RGB/HSV channel inputs. */\n  @Prop() channelsDisabled = false;\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * Internal prop for advanced use-cases.\n   *\n   * @internal\n   */\n  @Prop({ mutable: true }) color: InternalColor | null = DEFAULT_COLOR;\n\n  @Watch(\"color\")\n  handleColorChange(color: Color | null, oldColor: Color | null): void {\n    this.drawColorControls();\n    this.updateChannelsFromColor(color);\n    this.previousColor = oldColor;\n  }\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The format of `value`.\n   *\n   * When `\"auto\"`, the format will be inferred from `value` when set.\n   *\n   * @default \"auto\"\n   */\n  @Prop({ reflect: true }) format: Format = \"auto\";\n\n  @Watch(\"alphaChannel\")\n  @Watch(\"format\")\n  handleFormatOrAlphaChannelChange(): void {\n    this.setMode(this.format);\n    this.internalColorSet(this.color, false, \"internal\");\n  }\n\n  /**\n   * When `true`, hides the RGB/HSV channel inputs.\n   *\n   * @deprecated use `channelsDisabled` instead\n   */\n  @Prop({ reflect: true }) hideChannels = false;\n\n  /** When `true`, hides the hex input. */\n  @Prop() hexDisabled = false;\n\n  /**\n   * When `true`, hides the hex input.\n   *\n   * @deprecated use `hexDisabled` instead\n   */\n  @Prop({ reflect: true }) hideHex = false;\n\n  /**\n   * When `true`, hides the saved colors section.\n   *\n   * @deprecated use `savedDisabled` instead\n   */\n  @Prop({ reflect: true }) hideSaved = false;\n\n  /** When `true`, hides the saved colors section. */\n  @Prop({ reflect: true }) savedDisabled = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  handleScaleChange(scale: Scale = \"m\"): void {\n    this.updateDimensions(scale);\n    this.updateCanvasSize(\"all\");\n    this.drawColorControls();\n  }\n\n  /** Specifies the storage ID for colors. */\n  @Prop({ reflect: true }) storageId: string;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ColorPickerMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop({ reflect: true }) numberingSystem: NumberingSystem;\n\n  /**\n   * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n   *\n   * The type will be preserved as the color is updated.\n   *\n   * @default \"#007ac2\"\n   * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n   * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/src/components/color-picker/interfaces.ts#L10)\n   */\n  @Prop({ mutable: true }) value: ColorValue | null = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: ColorValue | null, oldValue: ColorValue | null): void {\n    const { isClearable, format } = this;\n    const checkMode = !isClearable || value;\n    let modeChanged = false;\n\n    if (checkMode) {\n      const nextMode = parseMode(value);\n\n      if (!nextMode || (format !== \"auto\" && nextMode !== format)) {\n        this.showIncompatibleColorWarning(value, format);\n        this.value = oldValue;\n        return;\n      }\n\n      modeChanged = this.mode !== nextMode;\n      this.setMode(nextMode, this.internalColorUpdateContext === null);\n    }\n\n    const dragging = this.activeCanvasInfo;\n\n    if (this.internalColorUpdateContext === \"initial\") {\n      return;\n    }\n\n    if (this.internalColorUpdateContext === \"user-interaction\") {\n      this.calciteColorPickerInput.emit();\n\n      if (!dragging) {\n        this.calciteColorPickerChange.emit();\n      }\n      return;\n    }\n\n    const color =\n      isClearable && !value\n        ? null\n        : Color(\n            value != null && typeof value === \"object\" && alphaCompatible(this.mode)\n              ? normalizeColor(value as RGBA | HSVA | HSLA)\n              : value,\n          );\n    const colorChanged = !colorEqual(color, this.color);\n\n    if (modeChanged || colorChanged) {\n      this.internalColorSet(\n        color,\n        this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")),\n        \"internal\",\n      );\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Internal State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerElement;\n\n  private activeCanvasInfo: {\n    context: CanvasRenderingContext2D;\n    bounds: DOMRect;\n  };\n\n  private get baseColorFieldColor(): Color {\n    return this.color || this.previousColor || DEFAULT_COLOR;\n  }\n\n  private checkerPattern: HTMLCanvasElement;\n\n  private colorFieldRenderingContext: CanvasRenderingContext2D;\n\n  private colorFieldScopeNode: HTMLDivElement;\n\n  private effectiveSliderWidth: number;\n\n  private hueSliderRenderingContext: CanvasRenderingContext2D;\n\n  private hueScopeNode: HTMLDivElement;\n\n  private internalColorUpdateContext: \"internal\" | \"initial\" | \"user-interaction\" | null = null;\n\n  private isActiveChannelInputEmpty: boolean = false;\n\n  private isClearable: boolean;\n\n  private mode: SupportedMode = CSSColorMode.HEX;\n\n  private opacityScopeNode: HTMLDivElement;\n\n  private opacitySliderRenderingContext: CanvasRenderingContext2D;\n\n  private previousColor: InternalColor | null;\n\n  private shiftKeyChannelAdjustment = 0;\n\n  private upOrDownArrowKeyTracker: \"down\" | \"up\" | null = null;\n\n  @State() channelMode: ColorMode = \"rgb\";\n\n  @State() channels: Channels = this.toChannels(DEFAULT_COLOR);\n\n  @State() defaultMessages: ColorPickerMessages;\n\n  @State() dimensions = DIMENSIONS.m;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ColorPickerMessages;\n\n  @State() savedColors: string[] = [];\n\n  @State() colorFieldScopeTop: number;\n\n  @State() colorFieldScopeLeft: number;\n\n  @State() hueScopeLeft: number;\n\n  @State() opacityScopeLeft: number;\n\n  @State() scopeOrientation: \"vertical\" | \"horizontal\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the color value has changed.\n   */\n  @Event({ cancelable: false }) calciteColorPickerChange: EventEmitter<void>;\n\n  /**\n   * Fires as the color value changes.\n   *\n   * Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.\n   */\n  @Event({ cancelable: false }) calciteColorPickerInput: EventEmitter<void>;\n\n  private handleTabActivate = (event: Event): void => {\n    this.channelMode = (event.currentTarget as HTMLElement).getAttribute(\n      \"data-color-mode\",\n    ) as ColorMode;\n\n    this.updateChannelsFromColor(this.color);\n  };\n\n  private handleColorFieldScopeKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const arrowKeyToXYOffset = {\n      ArrowUp: { x: 0, y: -10 },\n      ArrowRight: { x: 10, y: 0 },\n      ArrowDown: { x: 0, y: 10 },\n      ArrowLeft: { x: -10, y: 0 },\n    };\n\n    if (arrowKeyToXYOffset[key]) {\n      event.preventDefault();\n      this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n      this.captureColorFieldColor(\n        this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0,\n        this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0,\n        false,\n      );\n    }\n  };\n\n  private handleHueScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 1,\n      ArrowRight: 1,\n      ArrowDown: -1,\n      ArrowLeft: -1,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const hue = this.baseColorFieldColor.hue();\n      const color = this.baseColorFieldColor.hue(hue + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private handleHexInputChange = (event: Event): void => {\n    event.stopPropagation();\n    const { isClearable, color } = this;\n    const input = event.target as HTMLCalciteColorPickerHexInputElement;\n    const hex = input.value;\n\n    if (isClearable && !hex) {\n      this.internalColorSet(null);\n      return;\n    }\n\n    const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n\n    if (hex !== normalizedHex) {\n      this.internalColorSet(Color(hex));\n    }\n  };\n\n  private handleSavedColorSelect = (event: Event): void => {\n    const swatch = event.currentTarget as HTMLCalciteColorPickerSwatchElement;\n    this.internalColorSet(Color(swatch.color));\n  };\n\n  private handleChannelInput = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const isAlphaChannel = channelIndex === 3;\n\n    const limit = isAlphaChannel\n      ? OPACITY_LIMITS.max\n      : this.channelMode === \"rgb\"\n        ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n        : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n\n    let inputValue: string;\n\n    if (!input.value) {\n      inputValue = \"\";\n      this.isActiveChannelInputEmpty = true;\n      // reset this to allow typing in new value, when channel input is cleared after ArrowUp or ArrowDown have been pressed\n      this.upOrDownArrowKeyTracker = null;\n    } else {\n      const value = Number(input.value);\n      const adjustedValue = value + this.shiftKeyChannelAdjustment;\n      const clamped = clamp(adjustedValue, 0, limit);\n\n      inputValue = clamped.toString();\n    }\n\n    input.value = inputValue;\n\n    if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n      // we treat nudging as a change event since the input won't emit when modifying the value directly\n      this.handleChannelChange(event);\n    } else if (inputValue !== \"\") {\n      this.handleChannelChange(event);\n    }\n  };\n\n  private handleChannelBlur = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const channels = [...this.channels] as this[\"channels\"];\n    const restoreValueDueToEmptyInput = !input.value && !this.isClearable;\n\n    if (restoreValueDueToEmptyInput) {\n      input.value = channels[channelIndex]?.toString();\n    }\n  };\n\n  handleChannelFocus = (event: Event): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    input.selectText();\n  };\n\n  // using @Listen as a workaround for VDOM listener not firing\n  @Listen(\"keydown\", { capture: true })\n  @Listen(\"keyup\", { capture: true })\n  protected handleChannelKeyUpOrDown(event: KeyboardEvent): void {\n    this.shiftKeyChannelAdjustment = 0;\n    const { key } = event;\n\n    if (\n      (key !== \"ArrowUp\" && key !== \"ArrowDown\") ||\n      !event.composedPath().some((node: HTMLElement) => node.classList?.contains(CSS.channel))\n    ) {\n      return;\n    }\n\n    const { shiftKey } = event;\n    event.preventDefault();\n\n    if (!this.color) {\n      this.internalColorSet(this.previousColor);\n      event.stopPropagation();\n      return;\n    }\n\n    // this gets applied to the input's up/down arrow increment/decrement\n    const complementaryBump = 9;\n\n    this.shiftKeyChannelAdjustment =\n      key === \"ArrowUp\" && shiftKey\n        ? complementaryBump\n        : key === \"ArrowDown\" && shiftKey\n          ? -complementaryBump\n          : 0;\n\n    if (key === \"ArrowUp\") {\n      this.upOrDownArrowKeyTracker = \"up\";\n    }\n    if (key === \"ArrowDown\") {\n      this.upOrDownArrowKeyTracker = \"down\";\n    }\n  }\n\n  private getChannelInputLimit(channelIndex: number): number {\n    return this.channelMode === \"rgb\"\n      ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n      : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n  }\n\n  private handleChannelChange = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const channels = [...this.channels] as this[\"channels\"];\n\n    const shouldClearChannels = this.isClearable && !input.value;\n\n    if (shouldClearChannels) {\n      this.channels = [null, null, null, null];\n      this.internalColorSet(null);\n      return;\n    }\n\n    const isAlphaChannel = channelIndex === 3;\n\n    if (this.isActiveChannelInputEmpty && this.upOrDownArrowKeyTracker) {\n      input.value =\n        this.upOrDownArrowKeyTracker === \"up\"\n          ? (channels[channelIndex] + 1 <= this.getChannelInputLimit(channelIndex)\n              ? channels[channelIndex] + 1\n              : this.getChannelInputLimit(channelIndex)\n            ).toString()\n          : (channels[channelIndex] - 1 >= 0 ? channels[channelIndex] - 1 : 0).toString();\n      this.isActiveChannelInputEmpty = false;\n      this.upOrDownArrowKeyTracker = null;\n    }\n    const value = input.value ? Number(input.value) : channels[channelIndex];\n\n    channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n    this.updateColorFromChannels(channels);\n  };\n\n  private handleSavedColorKeyDown = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      event.preventDefault();\n      this.handleSavedColorSelect(event);\n    }\n  };\n\n  private handleColorFieldPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX, offsetY } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.colorFieldRenderingContext,\n      bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureColorFieldColor(offsetX, offsetY);\n    this.focusScope(this.colorFieldScopeNode);\n  };\n\n  private focusScope(focusEl: HTMLElement): void {\n    requestAnimationFrame(() => {\n      focusEl.focus();\n    });\n  }\n\n  private handleHueSliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.hueSliderRenderingContext,\n      bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureHueSliderColor(offsetX);\n    this.focusScope(this.hueScopeNode);\n  };\n\n  private handleOpacitySliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.opacitySliderRenderingContext,\n      bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureOpacitySliderValue(offsetX);\n    this.focusScope(this.opacityScopeNode);\n  };\n\n  private globalPointerUpHandler = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const previouslyDragging = this.activeCanvasInfo;\n    this.activeCanvasInfo = null;\n    this.drawColorControls();\n\n    if (previouslyDragging) {\n      this.calciteColorPickerChange.emit();\n    }\n  };\n\n  private globalPointerMoveHandler = (event: PointerEvent): void => {\n    const { activeCanvasInfo, el } = this;\n\n    if (!el.isConnected || !activeCanvasInfo) {\n      return;\n    }\n\n    const { context, bounds } = activeCanvasInfo;\n\n    let samplingX: number;\n    let samplingY: number;\n\n    const { clientX, clientY } = event;\n\n    if (context.canvas.matches(\":hover\")) {\n      samplingX = clientX - bounds.x;\n      samplingY = clientY - bounds.y;\n    } else {\n      // snap x and y to the closest edge\n\n      if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n        samplingX = clientX - bounds.x;\n      } else if (clientX < bounds.x) {\n        samplingX = 0;\n      } else {\n        samplingX = bounds.width;\n      }\n\n      if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n        samplingY = clientY - bounds.y;\n      } else if (clientY < bounds.y) {\n        samplingY = 0;\n      } else {\n        samplingY = bounds.height;\n      }\n    }\n\n    if (context === this.colorFieldRenderingContext) {\n      this.captureColorFieldColor(samplingX, samplingY, false);\n    } else if (context === this.hueSliderRenderingContext) {\n      this.captureHueSliderColor(samplingX);\n    } else if (context === this.opacitySliderRenderingContext) {\n      this.captureOpacitySliderValue(samplingX);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusFirstTabbable(this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n\n    this.handleAllowEmptyOrClearableChange();\n    this.handleAlphaChannelDimensionsChange();\n\n    const { isClearable, color, format, value } = this;\n    const willSetNoColor = isClearable && !value;\n    const parsedMode = parseMode(value);\n    const valueIsCompatible =\n      willSetNoColor || (format === \"auto\" && parsedMode) || format === parsedMode;\n    const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n\n    if (!valueIsCompatible) {\n      this.showIncompatibleColorWarning(value, format);\n    }\n    this.setMode(format, false);\n    this.internalColorSet(initialColor, false, \"initial\");\n\n    this.updateDimensions(this.scale);\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId && localStorage.getItem(storageKey)) {\n      this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n    }\n\n    await setUpMessages(this);\n  }\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n    disconnectInteractive(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const {\n      channelsDisabled,\n      color,\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n      dimensions: {\n        thumb: { radius: thumbRadius },\n      },\n      hexDisabled,\n      hideChannels,\n      hideHex,\n      hideSaved,\n      hueScopeLeft,\n      messages,\n      alphaChannel,\n      opacityScopeLeft,\n      savedColors,\n      savedDisabled,\n      scale,\n      scopeOrientation,\n    } = this;\n\n    const sliderWidth = this.effectiveSliderWidth;\n    const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n    const hueTop = thumbRadius;\n    const hueLeft = hueScopeLeft ?? (sliderWidth * DEFAULT_COLOR.hue()) / HSV_LIMITS.h;\n    const opacityTop = thumbRadius;\n    const opacityLeft =\n      opacityScopeLeft ??\n      (sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha())) / OPACITY_LIMITS.max;\n    const noColor = color === null;\n    const vertical = scopeOrientation === \"vertical\";\n    const noHex = hexDisabled || hideHex;\n    const noChannels = channelsDisabled || hideChannels;\n    const noSaved = savedDisabled || hideSaved;\n    const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n    );\n    const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(\n      hueLeft,\n      hueTop,\n    );\n    const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(\n      opacityLeft,\n      opacityTop,\n    );\n\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div class={CSS.container}>\n          <div class={CSS.controlAndScope}>\n            <canvas\n              class={CSS.colorField}\n              onPointerDown={this.handleColorFieldPointerDown}\n              ref={this.initColorField}\n            />\n            <div\n              aria-label={vertical ? messages.value : messages.saturation}\n              aria-valuemax={vertical ? HSV_LIMITS.v : HSV_LIMITS.s}\n              aria-valuemin=\"0\"\n              aria-valuenow={(vertical ? color?.saturationv() : color?.value()) || \"0\"}\n              class={{ [CSS.scope]: true, [CSS.colorFieldScope]: true }}\n              onKeyDown={this.handleColorFieldScopeKeyDown}\n              ref={this.storeColorFieldScope}\n              role=\"slider\"\n              style={{\n                top: `${adjustedColorFieldScopeTop || 0}px`,\n                left: `${adjustedColorFieldScopeLeft || 0}px`,\n              }}\n              tabindex=\"0\"\n            />\n          </div>\n          <div class={CSS.previewAndSliders}>\n            <calcite-color-picker-swatch\n              class={CSS.preview}\n              color={selectedColorInHex}\n              scale={this.alphaChannel ? \"l\" : this.scale}\n            />\n            <div class={CSS.sliders}>\n              <div class={CSS.controlAndScope}>\n                <canvas\n                  class={{ [CSS.slider]: true, [CSS.hueSlider]: true }}\n                  onPointerDown={this.handleHueSliderPointerDown}\n                  ref={this.initHueSlider}\n                />\n                <div\n                  aria-label={messages.hue}\n                  aria-valuemax={HSV_LIMITS.h}\n                  aria-valuemin=\"0\"\n                  aria-valuenow={color?.round().hue() || DEFAULT_COLOR.round().hue()}\n                  class={{ [CSS.scope]: true, [CSS.hueScope]: true }}\n                  onKeyDown={this.handleHueScopeKeyDown}\n                  ref={this.storeHueScope}\n                  role=\"slider\"\n                  style={{\n                    top: `${adjustedHueScopeTop}px`,\n                    left: `${adjustedHueScopeLeft}px`,\n                  }}\n                  tabindex=\"0\"\n                />\n              </div>\n              {alphaChannel ? (\n                <div class={CSS.controlAndScope}>\n                  <canvas\n                    class={{ [CSS.slider]: true, [CSS.opacitySlider]: true }}\n                    onPointerDown={this.handleOpacitySliderPointerDown}\n                    ref={this.initOpacitySlider}\n                  />\n                  <div\n                    aria-label={messages.opacity}\n                    aria-valuemax={OPACITY_LIMITS.max}\n                    aria-valuemin={OPACITY_LIMITS.min}\n                    aria-valuenow={(color || DEFAULT_COLOR).round().alpha()}\n                    class={{ [CSS.scope]: true, [CSS.opacityScope]: true }}\n                    onKeyDown={this.handleOpacityScopeKeyDown}\n                    ref={this.storeOpacityScope}\n                    role=\"slider\"\n                    style={{\n                      top: `${adjustedOpacityScopeTop}px`,\n                      left: `${adjustedOpacityScopeLeft}px`,\n                    }}\n                    tabindex=\"0\"\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n          {noHex && noChannels ? null : (\n            <div\n              class={{\n                [CSS.controlSection]: true,\n                [CSS.section]: true,\n              }}\n            >\n              <div class={CSS.hexAndChannelsGroup}>\n                {noHex ? null : (\n                  <div class={CSS.hexOptions}>\n                    <calcite-color-picker-hex-input\n                      allowEmpty={this.isClearable}\n                      alphaChannel={alphaChannel}\n                      class={CSS.control}\n                      messages={messages}\n                      numberingSystem={this.numberingSystem}\n                      onCalciteColorPickerHexInputChange={this.handleHexInputChange}\n                      scale={scale}\n                      value={selectedColorInHex}\n                    />\n                  </div>\n                )}\n                {noChannels ? null : (\n                  <calcite-tabs\n                    class={{\n                      [CSS.colorModeContainer]: true,\n                      [CSS.splitSection]: true,\n                    }}\n                    scale={scale === \"l\" ? \"m\" : \"s\"}\n                  >\n                    <calcite-tab-nav slot=\"title-group\">\n                      {this.renderChannelsTabTitle(\"rgb\")}\n                      {this.renderChannelsTabTitle(\"hsv\")}\n                    </calcite-tab-nav>\n                    {this.renderChannelsTab(\"rgb\")}\n                    {this.renderChannelsTab(\"hsv\")}\n                  </calcite-tabs>\n                )}\n              </div>\n            </div>\n          )}\n          {noSaved ? null : (\n            <div class={{ [CSS.savedColorsSection]: true, [CSS.section]: true }}>\n              <div class={CSS.header}>\n                <label>{messages.saved}</label>\n                <div class={CSS.savedColorsButtons}>\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.deleteColor}\n                    disabled={noColor}\n                    iconStart=\"minus\"\n                    kind=\"neutral\"\n                    label={messages.deleteColor}\n                    onClick={this.deleteColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.saveColor}\n                    disabled={noColor}\n                    iconStart=\"plus\"\n                    kind=\"neutral\"\n                    label={messages.saveColor}\n                    onClick={this.saveColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                </div>\n              </div>\n              {savedColors.length > 0 ? (\n                <div class={CSS.savedColors}>\n                  {[\n                    ...savedColors.map((color) => (\n                      <calcite-color-picker-swatch\n                        class={CSS.savedColor}\n                        color={color}\n                        key={color}\n                        onClick={this.handleSavedColorSelect}\n                        onKeyDown={this.handleSavedColorKeyDown}\n                        scale={scale}\n                        tabIndex={0}\n                      />\n                    )),\n                  ]}\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </InteractiveContainer>\n    );\n  }\n\n  private storeColorFieldScope = (node: HTMLDivElement): void => {\n    this.colorFieldScopeNode = node;\n  };\n\n  private storeHueScope = (node: HTMLDivElement): void => {\n    this.hueScopeNode = node;\n  };\n\n  private renderChannelsTabTitle = (channelMode: this[\"channelMode\"]): VNode => {\n    const { channelMode: activeChannelMode, messages } = this;\n    const selected = channelMode === activeChannelMode;\n    const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n\n    return (\n      <calcite-tab-title\n        class={CSS.colorMode}\n        data-color-mode={channelMode}\n        key={channelMode}\n        onCalciteTabsActivate={this.handleTabActivate}\n        selected={selected}\n      >\n        {label}\n      </calcite-tab-title>\n    );\n  };\n\n  private renderChannelsTab = (channelMode: this[\"channelMode\"]): VNode => {\n    const { isClearable, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;\n    const selected = channelMode === activeChannelMode;\n    const isRgb = channelMode === \"rgb\";\n    const channelAriaLabels = isRgb\n      ? [messages.red, messages.green, messages.blue]\n      : [messages.hue, messages.saturation, messages.value];\n    const direction = getElementDir(this.el);\n    const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n\n    return (\n      <calcite-tab class={CSS.control} key={channelMode} selected={selected}>\n        {/* channel order should not be mirrored */}\n        <div class={CSS.channels} dir=\"ltr\">\n          {channelsToRender.map((channelValue, index) => {\n            const isAlphaChannel = index === 3;\n\n            if (isAlphaChannel) {\n              channelValue =\n                isClearable && !channelValue ? channelValue : alphaToOpacity(channelValue);\n            }\n\n            /* the channel container is ltr, so we apply the host's direction */\n            return this.renderChannel(\n              channelValue,\n              index,\n              channelAriaLabels[index],\n              direction,\n              isAlphaChannel ? \"%\" : \"\",\n            );\n          })}\n        </div>\n      </calcite-tab>\n    );\n  };\n\n  private renderChannel = (\n    value: number | null,\n    index: number,\n    ariaLabel: string,\n    direction: Direction,\n    suffix?: string,\n  ): VNode => {\n    return (\n      <calcite-input-number\n        class={CSS.channel}\n        data-channel-index={index}\n        dir={direction}\n        key={index}\n        label={ariaLabel}\n        lang={this.effectiveLocale}\n        numberButtonType=\"none\"\n        numberingSystem={this.numberingSystem}\n        onCalciteInputNumberChange={this.handleChannelChange}\n        onCalciteInputNumberInput={this.handleChannelInput}\n        onCalciteInternalInputNumberBlur={this.handleChannelBlur}\n        onCalciteInternalInputNumberFocus={this.handleChannelFocus}\n        onKeyDown={this.handleKeyDown}\n        scale={this.scale === \"l\" ? \"m\" : \"s\"}\n        // workaround to ensure input borders overlap as desired\n        // this is because the build transforms margin-left to its\n        // logical-prop, which is undesired as channels are always ltr\n        style={{\n          marginLeft:\n            index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\",\n        }}\n        suffixText={suffix}\n        value={value?.toString()}\n      />\n    );\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n    }\n  }\n\n  private showIncompatibleColorWarning(value: ColorValue, format: Format): void {\n    console.warn(\n      `ignoring color value (${value}) as it is not compatible with the current format (${format})`,\n    );\n  }\n\n  private setMode(format: ColorPicker[\"format\"], warn = true): void {\n    const mode = format === \"auto\" ? this.mode : format;\n    this.mode = this.ensureCompatibleMode(mode, warn);\n  }\n\n  private ensureCompatibleMode(mode: SupportedMode, warn): SupportedMode {\n    const { alphaChannel } = this;\n    const isAlphaCompatible = alphaCompatible(mode);\n\n    if (alphaChannel && !isAlphaCompatible) {\n      const alphaMode = toAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return alphaMode;\n    }\n\n    if (!alphaChannel && isAlphaCompatible) {\n      const nonAlphaMode = toNonAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return nonAlphaMode;\n    }\n\n    return mode;\n  }\n\n  private captureHueSliderColor(x: number): void {\n    const hue = (HUE_LIMIT_CONSTRAINED / this.effectiveSliderWidth) * x;\n\n    this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n  }\n\n  private captureOpacitySliderValue(x: number): void {\n    const alpha = opacityToAlpha((OPACITY_LIMITS.max / this.effectiveSliderWidth) * x);\n\n    this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n  }\n\n  private internalColorSet(\n    color: Color | null,\n    skipEqual = true,\n    context: ColorPicker[\"internalColorUpdateContext\"] = \"user-interaction\",\n  ): void {\n    if (skipEqual && colorEqual(color, this.color)) {\n      return;\n    }\n\n    this.internalColorUpdateContext = context;\n    this.color = color;\n    this.value = this.toValue(color);\n    this.internalColorUpdateContext = null;\n  }\n\n  private toValue(color: Color | null, format: SupportedMode = this.mode): ColorValue | null {\n    if (!color) {\n      return null;\n    }\n\n    const hexMode = \"hex\";\n\n    if (format.includes(hexMode)) {\n      const hasAlpha = format === CSSColorMode.HEXA;\n      return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n    }\n\n    if (format.includes(\"-css\")) {\n      const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n\n      // Color omits alpha values when alpha is 1\n      const needToInjectAlpha =\n        (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n      if (needToInjectAlpha) {\n        const model = value.slice(0, 3);\n        const values = value.slice(4, -1);\n        return `${model}a(${values}, ${color.alpha()})`;\n      }\n\n      return value;\n    }\n\n    const colorObject =\n      /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n      color[toNonAlphaMode(format)]().round().object();\n\n    if (format.endsWith(\"a\")) {\n      return normalizeAlpha(colorObject);\n    }\n\n    return colorObject;\n  }\n\n  private getSliderCapSpacing(): number {\n    const {\n      dimensions: {\n        slider: { height },\n        thumb: { radius },\n      },\n    } = this;\n\n    return radius * 2 - height;\n  }\n\n  private updateDimensions(scale: Scale = \"m\"): void {\n    this.dimensions = DIMENSIONS[scale];\n  }\n\n  private deleteColor = (): void => {\n    const colorToDelete = hexify(this.color, this.alphaChannel);\n    const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n\n    if (!inStorage) {\n      return;\n    }\n\n    const savedColors = this.savedColors.filter((color) => color !== colorToDelete);\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private saveColor = (): void => {\n    const colorToSave = hexify(this.color, this.alphaChannel);\n    const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n\n    if (alreadySaved) {\n      return;\n    }\n\n    const savedColors = [...this.savedColors, colorToSave];\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private drawColorControls = throttle(\n    (type: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\"): void => {\n      if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n        this.drawColorField();\n      }\n\n      if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n        this.drawHueSlider();\n      }\n\n      if (\n        this.alphaChannel &&\n        (type === \"all\" || type === \"opacity-slider\") &&\n        this.opacitySliderRenderingContext\n      ) {\n        this.drawOpacitySlider();\n      }\n    },\n    throttleFor60FpsInMs,\n  );\n\n  private drawColorField(): void {\n    const context = this.colorFieldRenderingContext;\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n\n    context.fillStyle = this.baseColorFieldColor\n      .hsv()\n      .saturationv(100)\n      .value(100)\n      .alpha(1)\n      .string();\n    context.fillRect(0, 0, width, height);\n\n    const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n    whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n    whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n    context.fillStyle = whiteGradient;\n    context.fillRect(0, 0, width, height);\n\n    const blackGradient = context.createLinearGradient(0, 0, 0, height);\n    blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n    blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n    context.fillStyle = blackGradient;\n    context.fillRect(0, 0, width, height);\n\n    this.drawActiveColorFieldColor();\n  }\n\n  private setCanvasContextSize(\n    canvas: HTMLCanvasElement,\n    { height, width }: { height: number; width: number },\n  ): void {\n    if (!canvas) {\n      return;\n    }\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.height = `${height}px`;\n    canvas.style.width = `${width}px`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  private captureColorFieldColor = (x: number, y: number, skipEqual = true): void => {\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n    const saturation = Math.round((HSV_LIMITS.s / width) * x);\n    const value = Math.round((HSV_LIMITS.v / height) * (height - y));\n\n    this.internalColorSet(\n      this.baseColorFieldColor.hsv().saturationv(saturation).value(value),\n      skipEqual,\n    );\n  };\n\n  private initColorField = (canvas: HTMLCanvasElement): void => {\n    this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"color-field\");\n    this.drawColorControls();\n  };\n\n  private initHueSlider = (canvas: HTMLCanvasElement): void => {\n    this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"hue-slider\");\n    this.drawHueSlider();\n  };\n\n  private initOpacitySlider = (canvas: HTMLCanvasElement): void => {\n    if (!canvas) {\n      return;\n    }\n\n    this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"opacity-slider\");\n    this.drawOpacitySlider();\n  };\n\n  private updateCanvasSize(\n    context: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\",\n  ): void {\n    const { dimensions } = this;\n\n    if (context === \"all\" || context === \"color-field\") {\n      this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n    }\n\n    const adjustedSliderDimensions = {\n      width: this.effectiveSliderWidth,\n      height:\n        dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,\n    };\n\n    if (context === \"all\" || context === \"hue-slider\") {\n      this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n    }\n\n    if (context === \"all\" || context === \"opacity-slider\") {\n      this.setCanvasContextSize(\n        this.opacitySliderRenderingContext?.canvas,\n        adjustedSliderDimensions,\n      );\n    }\n  }\n\n  private drawActiveColorFieldColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv();\n\n    const {\n      dimensions: {\n        colorField: { height, width },\n        thumb: { radius },\n      },\n    } = this;\n\n    const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n    const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n\n    requestAnimationFrame(() => {\n      this.colorFieldScopeLeft = x;\n      this.colorFieldScopeTop = y;\n    });\n\n    this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n  }\n\n  private drawThumb(\n    context: CanvasRenderingContext2D,\n    radius: number,\n    x: number,\n    y: number,\n    color: Color,\n    applyAlpha: boolean,\n  ): void {\n    const startAngle = 0;\n    const endAngle = 2 * Math.PI;\n    const outlineWidth = 1;\n\n    context.beginPath();\n    context.arc(x, y, radius, startAngle, endAngle);\n    context.fillStyle = \"#fff\";\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = outlineWidth;\n    context.stroke();\n\n    if (applyAlpha && color.alpha() < 1) {\n      const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n      context.beginPath();\n      context.arc(x, y, radius - 3, startAngle, endAngle);\n      context.fillStyle = pattern;\n      context.fill();\n    }\n\n    context.globalCompositeOperation = \"source-atop\";\n\n    context.beginPath();\n    context.arc(x, y, radius - 3, startAngle, endAngle);\n    const alpha = applyAlpha ? color.alpha() : 1;\n    context.fillStyle = color.rgb().alpha(alpha).string();\n    context.fill();\n\n    context.globalCompositeOperation = \"source-over\";\n  }\n\n  private drawActiveHueSliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv().saturationv(100).value(100);\n\n    const {\n      dimensions: {\n        thumb: { radius },\n      },\n    } = this;\n\n    const width = this.effectiveSliderWidth;\n    const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.hueScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n  }\n\n  private drawHueSlider(): void {\n    const context = this.hueSliderRenderingContext;\n    const {\n      dimensions: {\n        slider: { height },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n\n    const gradient = context.createLinearGradient(0, 0, width, 0);\n\n    const hueSliderColorStopKeywords = [\n      \"red\",\n      \"yellow\",\n      \"lime\",\n      \"cyan\",\n      \"blue\",\n      \"magenta\",\n      \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */,\n    ];\n\n    const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n    let currentOffset = 0;\n\n    hueSliderColorStopKeywords.forEach((keyword) => {\n      gradient.addColorStop(currentOffset, Color(keyword).string());\n      currentOffset += offset;\n    });\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveHueSliderColor();\n  }\n\n  private drawOpacitySlider(): void {\n    const context = this.opacitySliderRenderingContext;\n    const {\n      baseColorFieldColor: previousColor,\n      dimensions: {\n        slider: { height },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    const gradient = context.createLinearGradient(0, y, width, 0);\n    const startColor = previousColor.rgb().alpha(0);\n    const midColor = previousColor.rgb().alpha(0.5);\n    const endColor = previousColor.rgb().alpha(1);\n\n    gradient.addColorStop(0, startColor.string());\n    gradient.addColorStop(0.5, midColor.string());\n    gradient.addColorStop(1, endColor.string());\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n    context.fillStyle = pattern;\n    context.fill();\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveOpacitySliderColor();\n  }\n\n  private drawSliderPath(\n    context: CanvasRenderingContext2D,\n    height: number,\n    width: number,\n    x: number,\n    y: number,\n  ): void {\n    const radius = height / 2 + 1;\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.lineTo(x + width - radius, y);\n    context.quadraticCurveTo(x + width, y, x + width, y + radius);\n    context.lineTo(x + width, y + height - radius);\n    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    context.lineTo(x + radius, y + height);\n    context.quadraticCurveTo(x, y + height, x, y + height - radius);\n    context.lineTo(x, y + radius);\n    context.quadraticCurveTo(x, y, x + radius, y);\n    context.closePath();\n  }\n\n  private getCheckeredBackgroundPattern(): HTMLCanvasElement {\n    if (this.checkerPattern) {\n      return this.checkerPattern;\n    }\n\n    const pattern = document.createElement(\"canvas\");\n    pattern.width = 10;\n    pattern.height = 10;\n    const patternContext = pattern.getContext(\"2d\");\n\n    patternContext.fillStyle = \"#ccc\";\n    patternContext.fillRect(0, 0, 10, 10);\n    patternContext.fillStyle = \"#fff\";\n    patternContext.fillRect(0, 0, 5, 5);\n    patternContext.fillRect(5, 5, 5, 5);\n\n    this.checkerPattern = pattern;\n\n    return pattern;\n  }\n\n  private drawActiveOpacitySliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color;\n\n    const {\n      dimensions: {\n        thumb: { radius },\n      },\n    } = this;\n\n    const width = this.effectiveSliderWidth;\n    const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.opacityScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n  }\n\n  private getSliderBoundX(x: number, width: number, radius: number): number {\n    const closeToEdge = closeToRangeEdge(x, width, radius);\n\n    return closeToEdge === 0\n      ? x\n      : closeToEdge === -1\n        ? remap(x, 0, width, radius, radius * 2)\n        : remap(x, 0, width, width - radius * 2, width - radius);\n  }\n\n  private storeOpacityScope = (node: HTMLDivElement): void => {\n    this.opacityScopeNode = node;\n  };\n\n  private handleOpacityScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 0.01,\n      ArrowRight: 0.01,\n      ArrowDown: -0.01,\n      ArrowLeft: -0.01,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const alpha = this.baseColorFieldColor.alpha();\n      const color = this.baseColorFieldColor.alpha(alpha + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private updateColorFromChannels(channels: this[\"channels\"]): void {\n    this.internalColorSet(Color(channels, this.channelMode));\n  }\n\n  private updateChannelsFromColor(color: Color | null): void {\n    this.channels = color ? this.toChannels(color) : [null, null, null, null];\n  }\n\n  private toChannels(color: Color): Channels {\n    const { channelMode } = this;\n\n    const channels = color[channelMode]()\n      .array()\n      .map((value, index) => {\n        const isAlpha = index === 3;\n        return isAlpha ? value : Math.floor(value);\n      });\n\n    if (channels.length === 3) {\n      channels.push(1); // Color omits alpha when 1\n    }\n\n    return channels as Channels;\n  }\n\n  private getAdjustedScopePosition(left: number, top: number): [number, number] {\n    return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n  }\n}\n","export const CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\",\n};\n",":host {\n  @apply block;\n}\n\n.container {\n  @apply flex w-full items-center flex-nowrap;\n}\n\n.hex-input {\n  @apply grow uppercase;\n}\n\n.opacity-input {\n  inline-size: 68px;\n  margin-inline-start: -1px;\n}\n\n:host([scale=\"s\"]) {\n  .container {\n    @apply flex-wrap gap-y-0.5;\n  }\n\n  .opacity-input {\n    inline-size: unset;\n    margin-inline-start: unset;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .opacity-input {\n    inline-size: 88px;\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Color from \"color\";\nimport { Scale } from \"../interfaces\";\nimport { Channels, RGB } from \"../color-picker/interfaces\";\nimport {\n  alphaToOpacity,\n  hexChar,\n  hexify,\n  isLonghandHex,\n  isShorthandHex,\n  isValidHex,\n  normalizeHex,\n  opacityToAlpha,\n  rgbToHex,\n} from \"../color-picker/utils\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { NumberingSystem } from \"../../utils/locale\";\nimport { OPACITY_LIMITS } from \"../color-picker/resources\";\nimport { ColorPickerMessages } from \"../color-picker/assets/color-picker/t9n\";\nimport { CSS } from \"./resources\";\n\nconst DEFAULT_COLOR = Color();\n\n@Component({\n  tag: \"calcite-color-picker-hex-input\",\n  styleUrl: \"color-picker-hex-input.scss\",\n  shadow: true,\n})\nexport class ColorPickerHexInput implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    const { allowEmpty, alphaChannel, value } = this;\n\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n\n      return;\n    }\n\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop() allowEmpty = false;\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  /**\n   * Specifies accessible label for the input field.\n   *\n   * @deprecated use `messages` instead\n   */\n  @Prop() hexLabel = \"Hex\";\n\n  /**\n   * Messages are passed by parent component for accessible labels.\n   *\n   * @internal\n   */\n  @Prop() messages: ColorPickerMessages;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem?: NumberingSystem;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * The hex value.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n    this.alphaChannel,\n    true,\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    this.internalSetValue(value, oldValue, false);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Emitted when the hex value changes.\n   */\n  @Event({ cancelable: false }) calciteColorPickerHexInputChange: EventEmitter<void>;\n\n  private onHexInputBlur = (): void => {\n    const node = this.hexInputNode;\n    const inputValue = node.value;\n    const hex = `#${inputValue}`;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n    const isLonghand = isLonghandHex(hex);\n\n    if (isShorthandHex(hex, this.alphaChannel)) {\n      // ensure modified pasted hex values are committed since we prevent default to remove the # char.\n      this.onHexInputChange();\n    }\n\n    if (willClearValue || (isValidHex(hex) && isLonghand)) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor\n        ? \"\"\n        : this.formatHexForInternalInput(\n            rgbToHex(\n              // always display hex input in RRGGBB format\n              internalColor.object() as any as RGB,\n            ),\n          );\n  };\n\n  private onOpacityInputBlur = (): void => {\n    const node = this.opacityInputNode;\n    const inputValue = node.value;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n\n    if (willClearValue) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n  };\n\n  private onOpacityInputInput = (): void => {\n    this.onOpacityInputChange();\n  };\n\n  private onHexInputChange = (): void => {\n    const nodeValue = this.hexInputNode.value;\n    let value = nodeValue;\n\n    if (value) {\n      const normalized = normalizeHex(value, false);\n      const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n      if (preserveExistingAlpha && this.internalColor) {\n        const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n        value = `${normalized + alphaHex}`;\n      }\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  private onOpacityInputChange = (): void => {\n    const node = this.opacityInputNode;\n    let value: number | string;\n\n    if (!node.value) {\n      value = node.value;\n    } else {\n      const alpha = opacityToAlpha(Number(node.value));\n      value = this.internalColor?.alpha(alpha).hexa();\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  private onInputFocus = (event: Event): void => {\n    event.type === \"calciteInternalInputTextFocus\"\n      ? this.hexInputNode.selectText()\n      : this.opacityInputNode.selectText();\n  };\n\n  private onHexInputInput = (): void => {\n    const hexInputValue = `#${this.hexInputNode.value}`;\n    const oldValue = this.value;\n\n    if (\n      isValidHex(hexInputValue, this.alphaChannel) &&\n      isLonghandHex(hexInputValue, this.alphaChannel)\n    ) {\n      this.internalSetValue(hexInputValue, oldValue);\n    }\n  };\n\n  protected onInputKeyDown = (event: KeyboardEvent): void => {\n    const { altKey, ctrlKey, metaKey, shiftKey } = event;\n    const { alphaChannel, hexInputNode, internalColor, value } = this;\n    const { key } = event;\n    const composedPath = event.composedPath();\n\n    if ((key === \"Tab\" && isShorthandHex(value, this.alphaChannel)) || key === \"Enter\") {\n      if (composedPath.includes(hexInputNode)) {\n        this.onHexInputChange();\n      } else {\n        this.onOpacityInputChange();\n      }\n\n      if (key === \"Enter\") {\n        event.preventDefault();\n      }\n\n      return;\n    }\n\n    const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n    const oldValue = this.value;\n\n    if (isNudgeKey) {\n      if (!value) {\n        this.internalSetValue(this.previousNonNullValue, oldValue);\n        event.preventDefault();\n        return;\n      }\n\n      const direction = key === \"ArrowUp\" ? 1 : -1;\n      const bump = shiftKey ? 10 : 1;\n\n      this.internalSetValue(\n        hexify(\n          this.nudgeRGBChannels(\n            internalColor,\n            bump * direction,\n            composedPath.includes(hexInputNode) ? \"rgb\" : \"a\",\n          ),\n          alphaChannel,\n        ),\n        oldValue,\n      );\n\n      event.preventDefault();\n      return;\n    }\n\n    const withModifiers = altKey || ctrlKey || metaKey;\n    const singleChar = key.length === 1;\n    const validHexChar = hexChar.test(key);\n\n    if (singleChar && !withModifiers && !validHexChar) {\n      event.preventDefault();\n    }\n  };\n\n  private onHexInputPaste = (event: ClipboardEvent): void => {\n    const hex = event.clipboardData.getData(\"text\");\n\n    if (isValidHex(hex, this.alphaChannel) && isLonghandHex(hex, this.alphaChannel)) {\n      event.preventDefault();\n      this.hexInputNode.value = hex.slice(1);\n      this.internalSetValue(hex, this.value);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerHexInputElement;\n\n  private hexInputNode: HTMLCalciteInputTextElement;\n\n  /**\n   * The last valid/selected color. Used as a fallback if an invalid hex code is entered.\n   */\n  @State() internalColor: Color | null = DEFAULT_COLOR;\n\n  private opacityInputNode: HTMLCalciteInputNumberElement;\n\n  private previousNonNullValue: string = this.value;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { alphaChannel, hexLabel, internalColor, messages, scale, value } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n\n    return (\n      <div class={CSS.container}>\n        <calcite-input-text\n          class={CSS.hexInput}\n          label={messages?.hex || hexLabel}\n          maxLength={this.alphaChannel ? 8 : 6}\n          onCalciteInputTextChange={this.onHexInputChange}\n          onCalciteInputTextInput={this.onHexInputInput}\n          onCalciteInternalInputTextBlur={this.onHexInputBlur}\n          onCalciteInternalInputTextFocus={this.onInputFocus}\n          onKeyDown={this.onInputKeyDown}\n          onPaste={this.onHexInputPaste}\n          prefixText=\"#\"\n          ref={this.storeHexInputRef}\n          scale={inputScale}\n          value={hexInputValue}\n        />\n        {alphaChannel ? (\n          <calcite-input-number\n            class={CSS.opacityInput}\n            key=\"opacity-input\"\n            label={messages?.opacity}\n            max={OPACITY_LIMITS.max}\n            maxLength={3}\n            min={OPACITY_LIMITS.min}\n            numberButtonType=\"none\"\n            numberingSystem={this.numberingSystem}\n            onCalciteInputNumberInput={this.onOpacityInputInput}\n            onCalciteInternalInputNumberBlur={this.onOpacityInputBlur}\n            onCalciteInternalInputNumberFocus={this.onInputFocus}\n            onKeyDown={this.onInputKeyDown}\n            ref={this.storeOpacityInputRef}\n            scale={inputScale}\n            suffixText=\"%\"\n            value={opacityInputValue}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.hexInputNode);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private internalSetValue(value: string | null, oldValue: string | null, emit = true): void {\n    if (value) {\n      const { alphaChannel } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        const { internalColor: currentColor } = this;\n        const nextColor = Color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n\n        const changed =\n          !currentColor ||\n          normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n\n      return;\n    }\n\n    this.value = oldValue;\n  }\n\n  private storeHexInputRef = (node: HTMLCalciteInputTextElement): void => {\n    this.hexInputNode = node;\n  };\n\n  private storeOpacityInputRef = (node: HTMLCalciteInputNumberElement): void => {\n    this.opacityInputNode = node;\n  };\n\n  private formatHexForInternalInput(hex: string): string {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n\n  private formatOpacityForInternalInput(color: Color): string {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n\n  private nudgeRGBChannels(color: Color, amount: number, context: \"rgb\" | \"a\"): Color {\n    let nudgedChannels: Channels;\n    const channels = color.array();\n    const rgbChannels = channels.slice(0, 3);\n\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map((channel) => channel + amount);\n      nudgedChannels = [\n        ...nudgedRGBChannels,\n        this.alphaChannel ? channels[3] : undefined,\n      ] as Channels;\n    } else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha] as Channels;\n    }\n\n    return Color(nudgedChannels);\n  }\n}\n","export const CSS = {\n  swatch: \"swatch\",\n  noColorSwatch: \"swatch--no-color\",\n  checker: \"checker\",\n};\n\nexport const COLORS = {\n  borderLight: \"rgba(0, 0, 0, 0.3)\",\n  borderDark: \"rgba(255, 255, 255, 0.15)\",\n};\n\nconst checkerSquareSize = 4;\n\nexport const CHECKER_DIMENSIONS = {\n  squareSize: checkerSquareSize,\n  size: checkerSquareSize * 2,\n};\n","$size-s: 20px;\n$size-m: 24px;\n$size-l: 28px;\n\n:host {\n  @apply relative inline-flex;\n}\n\n:host([scale=\"s\"]) {\n  @apply h-5 w-5;\n}\n\n:host([scale=\"m\"]) {\n  @apply h-6 w-6;\n}\n\n:host([scale=\"l\"]) {\n  @apply h-8 w-8;\n}\n\n.swatch {\n  @apply overflow-hidden;\n  block-size: inherit;\n  inline-size: inherit;\n\n  rect {\n    @apply transition-all duration-150 ease-in-out;\n  }\n}\n\n.swatch--no-color {\n  rect {\n    fill: var(--calcite-color-foreground-1);\n  }\n\n  line {\n    stroke: var(--calcite-color-status-danger);\n  }\n}\n\n.checker {\n  fill: #cacaca;\n}\n\n@include base-component();\n","import { Component, Element, Fragment, h, Prop, VNode, Watch } from \"@stencil/core\";\nimport Color from \"color\";\nimport { getModeName } from \"../../utils/dom\";\nimport { Scale } from \"../interfaces\";\nimport { hexify } from \"../color-picker/utils\";\nimport { CHECKER_DIMENSIONS, COLORS, CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-color-picker-swatch\",\n  styleUrl: \"color-picker-swatch.scss\",\n  shadow: true,\n})\nexport class ColorPickerSwatch {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is active.\n   */\n  @Prop({\n    reflect: true,\n  })\n  active = false;\n\n  /**\n   * The color value.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n   */\n  @Prop()\n  color: string | null;\n\n  @Watch(\"color\")\n  handleColorChange(color: string | null): void {\n    this.internalColor = color ? Color(color) : null;\n  }\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerSwatchElement;\n\n  private internalColor: Color;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  componentWillLoad(): void {\n    this.handleColorChange(this.color);\n  }\n\n  render(): VNode {\n    const isEmpty = !this.internalColor;\n    const classes = {\n      [CSS.swatch]: true,\n      [CSS.noColorSwatch]: isEmpty,\n    };\n\n    return (\n      <svg class={classes} xmlns=\"http://www.w3.org/2000/svg\">\n        {this.renderSwatch()}\n      </svg>\n    );\n  }\n\n  renderSwatch(): VNode {\n    const { active, el, internalColor } = this;\n    const borderRadius = active ? \"100%\" : \"0\";\n    const theme = getModeName(el);\n    const borderColor = theme === \"light\" ? COLORS.borderLight : COLORS.borderDark;\n    const commonSwatchProps = {\n      height: \"100%\",\n      rx: borderRadius,\n      stroke: borderColor,\n\n      // stroke-width and clip-path are needed to hide overflowing portion of stroke\n      // see https://stackoverflow.com/a/7273346/194216\n\n      // using attribute to work around Stencil using the prop name vs the attribute when rendering\n      [\"stroke-width\"]: \"2\",\n      width: \"100%\",\n    };\n\n    const isEmpty = !internalColor;\n\n    if (isEmpty) {\n      return (\n        <Fragment>\n          <clipPath id=\"shape\">\n            <rect height=\"100%\" rx={borderRadius} width=\"100%\" />\n          </clipPath>\n          <rect\n            clip-path={`inset(0 round ${borderRadius})`}\n            rx={borderRadius}\n            {...commonSwatchProps}\n          />\n          <line clip-path=\"url(#shape)\" stroke-width=\"3\" x1=\"100%\" x2=\"0\" y1=\"0\" y2=\"100%\" />\n        </Fragment>\n      );\n    }\n\n    const alpha = internalColor.alpha();\n    const hex = hexify(internalColor);\n    const hexa = hexify(internalColor, alpha < 1);\n\n    return (\n      <Fragment>\n        <title>{hexa}</title>\n        <defs>\n          <pattern\n            height={CHECKER_DIMENSIONS.size}\n            id=\"checker\"\n            patternUnits=\"userSpaceOnUse\"\n            width={CHECKER_DIMENSIONS.size}\n            x=\"0\"\n            y=\"0\"\n          >\n            <rect\n              class={CSS.checker}\n              height={CHECKER_DIMENSIONS.squareSize}\n              width={CHECKER_DIMENSIONS.squareSize}\n              x=\"0\"\n              y=\"0\"\n            />\n            <rect\n              class={CSS.checker}\n              height={CHECKER_DIMENSIONS.squareSize}\n              width={CHECKER_DIMENSIONS.squareSize}\n              x={CHECKER_DIMENSIONS.squareSize}\n              y={CHECKER_DIMENSIONS.squareSize}\n            />\n          </pattern>\n        </defs>\n        <rect fill=\"url(#checker)\" height=\"100%\" rx={borderRadius} width=\"100%\" />\n        <rect\n          fill={hex}\n          style={{\n            \"clip-path\":\n              alpha < 1 ? \"polygon(100% 0, 0 0, 0 100%)\" : `inset(0 round ${borderRadius})`,\n          }}\n          {...commonSwatchProps}\n        />\n        {alpha < 1 ? (\n          <rect\n            fill={hexa}\n            key=\"opacity-fill\"\n            style={{ \"clip-path\": \"polygon(100% 0, 100% 100%, 0 100%)\" }}\n            {...commonSwatchProps}\n          />\n        ) : null}\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}