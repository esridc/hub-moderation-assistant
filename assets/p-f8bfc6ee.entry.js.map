{"version":3,"names":["CSS","contentCell","numberCell","footerCell","selectionCell","selectedCell","assistiveText","lastCell","staticCell","tableCellCss","CalciteTableCellStyle0","TableCell","this","updateScreenReaderContentsText","contentsText","el","textContent","onContainerBlur","focused","onContainerFocus","onSelectedChange","updateScreenReaderSelectionText","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","connectedCallback","connectLocalized","connectMessages","connectInteractive","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectInteractive","setFocus","componentFocusable","containerEl","focus","selectedText","messages","row","parentRowPositionLocalized","selected","keyboardDeselect","unselectedText","unselected","keyboardSelect","selectionText","parentRowIsSelected","render","dir","getElementDir","disabled","interactionMode","parentRowType","h","Host","key","InteractiveContainer","class","rowSpan","colSpan","CSS_UTILITY","rtl","parentRowAlignment","onBlur","onFocus","ref","role","tabIndex","readCellContentsToAT","onSlotchange","bodyRow","footerRow","heading","description","multipleSelectionCell","active","tableHeaderCss","CalciteTableHeaderStyle0","TableHeader","updateScreenReaderText","text","sharedText","selectedRowCountLocalized","rowNumber","selectionMode","selectionColumn","bodyRowCount","selectedRowCount","all","keyboardDeselectAll","keyboardSelectAll","screenReaderText","scope","allSelected","selectionIcon","positionInRow","undefined","icon","scale","getIconScale"],"sources":["src/components/table-cell/resources.ts","src/components/table-cell/table-cell.scss?tag=calcite-table-cell&encapsulation=shadow","src/components/table-cell/table-cell.tsx","src/components/table-header/resources.ts","src/components/table-header/table-header.scss?tag=calcite-table-header&encapsulation=shadow","src/components/table-header/table-header.tsx"],"sourcesContent":["export const CSS = {\n  contentCell: \"content-cell\",\n  numberCell: \"number-cell\",\n  footerCell: \"footer-cell\",\n  selectionCell: \"selection-cell\",\n  selectedCell: \"selected-cell\",\n  assistiveText: \"assistive-text\",\n  lastCell: \"last-cell\",\n  staticCell: \"static-cell\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-table-cell-background: Specifies the background color of the component.\n */\n\n:host {\n  --calcite-internal-table-cell-background: var(--calcite-table-cell-background, transparent);\n  @apply contents;\n}\n\n:host([alignment=\"center\"]) td:not(.selection-cell):not(.number-cell) {\n  @apply text-center;\n}\n\n:host([alignment=\"end\"]) td:not(.selection-cell):not(.number-cell) {\n  @apply text-end;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\ntd {\n  @apply text-start align-middle text-color-1 whitespace-normal;\n  background: var(--calcite-internal-table-cell-background);\n  font-size: var(--calcite-internal-table-cell-font-size);\n  border-inline-end: 1px solid var(--calcite-color-border-3);\n  padding: var(--calcite-internal-table-cell-padding);\n\n  &:not(.static-cell) {\n    @apply focus-base;\n    &:focus {\n      @apply focus-inset;\n    }\n  }\n}\n\ntd.start.content-cell {\n  @apply align-top;\n}\n\ntd.end.content-cell {\n  @apply align-bottom;\n}\n\ntd.last-cell {\n  border-inline-end: 0;\n}\n\n.number-cell {\n  @apply bg-foreground-2;\n}\n\n.footer-cell {\n  @apply bg-background font-medium text-color-1;\n  border-block-start: 1px solid var(--calcite-color-border-3);\n}\n\n.number-cell,\n.selection-cell {\n  @apply text-center;\n  border-inline-end: 1px solid var(--calcite-color-border-3);\n  inline-size: 2rem;\n  min-inline-size: 2rem;\n}\n\n.selection-cell {\n  @apply text-color-3;\n  inset-inline-start: 2rem;\n  &:not(.footer-cell) {\n    @apply cursor-pointer;\n  }\n}\n\n.selected-cell:not(.number-cell):not(.footer-cell) {\n  --calcite-internal-table-cell-background: var(--calcite-color-foreground-current);\n}\n\n.selection-cell.selected-cell {\n  box-shadow: inset 0.25rem 0 0 0 var(--calcite-color-brand);\n  color: var(--calcite-color-brand);\n  & calcite-icon {\n    color: var(--calcite-color-brand);\n  }\n}\n\n.calcite--rtl.selection-cell.selected-cell {\n  box-shadow: inset -0.25rem 0 0 0 var(--calcite-color-brand);\n}\n\n.selection-cell {\n  @apply align-middle;\n  & ::slotted(calcite-icon) {\n    @apply pointer-events-none mt-1;\n  }\n}\n\n@include disabled();\n","import { Component, Element, h, Host, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { Alignment, Scale } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { RowType, TableInteractionMode } from \"../table/interfaces\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\nimport { CSS } from \"./resources\";\nimport { TableCellMessages } from \"./assets/table-cell/t9n\";\n\n/**\n * @slot - A slot for adding content, usually text content.\n */\n@Component({\n  tag: \"calcite-table-cell\",\n  styleUrl: \"table-cell.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class TableCell\n  implements InteractiveComponent, LocalizedComponent, LoadableComponent, T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the alignment of the component. */\n  @Prop({ reflect: true }) alignment: Alignment = \"start\";\n\n  /** Specifies the number of columns the component should span. */\n  @Prop({ reflect: true }) colSpan: number;\n\n  /** Specifies the number of rows the component should span. */\n  @Prop({ reflect: true }) rowSpan: number;\n\n  /** @internal */\n  @Prop() disabled: boolean;\n\n  /** @internal */\n  @Prop() interactionMode: TableInteractionMode = \"interactive\";\n\n  /** @internal */\n  @Prop() lastCell: boolean;\n\n  /** @internal */\n  @Prop() numberCell: boolean;\n\n  /** @internal */\n  @Prop() parentRowIsSelected: boolean;\n\n  @Watch(\"parentRowIsSelected\")\n  onSelectedChange(): void {\n    this.updateScreenReaderSelectionText();\n  }\n\n  /** @internal */\n  @Prop() parentRowAlignment: Alignment = \"start\";\n\n  /** @internal */\n  @Prop() parentRowPositionLocalized: string;\n\n  /** @internal */\n  @Prop() parentRowType: RowType;\n\n  /** @internal */\n  @Prop() positionInRow: number;\n\n  /** @internal */\n  @Prop() readCellContentsToAT: boolean;\n\n  /** @internal */\n  @Prop() scale: Scale = \"m\";\n\n  /** @internal */\n  @Prop() selectionCell: boolean;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: TableCellMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<TableCellMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTableCellElement;\n\n  @State() contentsText = \"\";\n\n  @State() defaultMessages: TableCellMessages;\n\n  @State() focused = false;\n\n  @State() selectionText = \"\";\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  private containerEl: HTMLTableCellElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.updateScreenReaderContentsText();\n    this.updateScreenReaderSelectionText();\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectInteractive(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectInteractive(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.containerEl.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private updateScreenReaderSelectionText(): void {\n    const selectedText = `${this.messages?.row} ${this.parentRowPositionLocalized} ${this.messages?.selected} ${this.messages?.keyboardDeselect}`;\n    const unselectedText = `${this.messages?.row} ${this.parentRowPositionLocalized} ${this.messages?.unselected} ${this.messages?.keyboardSelect}`;\n    this.selectionText = this.parentRowIsSelected ? selectedText : unselectedText;\n  }\n\n  private updateScreenReaderContentsText = (): void => {\n    this.contentsText = this.el.textContent;\n  };\n\n  private onContainerBlur = (): void => {\n    this.focused = false;\n  };\n\n  private onContainerFocus = (): void => {\n    this.focused = true;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const dir = getElementDir(this.el);\n    const staticCell =\n      this.disabled ||\n      (this.interactionMode === \"static\" &&\n        (!this.selectionCell || (this.selectionCell && this.parentRowType === \"foot\")));\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <td\n            aria-disabled={this.disabled}\n            class={{\n              [CSS.footerCell]: this.parentRowType === \"foot\",\n              [CSS.contentCell]: !this.numberCell && !this.selectionCell,\n              [CSS.numberCell]: this.numberCell,\n              [CSS.selectionCell]: this.selectionCell,\n              [CSS.selectedCell]: this.parentRowIsSelected,\n              [CSS.lastCell]: this.lastCell && (!this.rowSpan || (this.colSpan && !!this.rowSpan)),\n              [CSS_UTILITY.rtl]: dir === \"rtl\",\n              [CSS.staticCell]: staticCell,\n              [this.parentRowAlignment]:\n                this.parentRowAlignment === \"start\" || this.parentRowAlignment === \"end\",\n            }}\n            colSpan={this.colSpan}\n            onBlur={this.onContainerBlur}\n            onFocus={this.onContainerFocus}\n            ref={(el) => (this.containerEl = el)}\n            role={this.interactionMode === \"interactive\" ? \"gridcell\" : \"cell\"}\n            rowSpan={this.rowSpan}\n            tabIndex={staticCell ? -1 : 0}\n          >\n            {(this.selectionCell || this.readCellContentsToAT) && (\n              <span\n                aria-hidden={true}\n                aria-live={this.focused ? \"polite\" : \"off\"}\n                class={CSS.assistiveText}\n              >\n                {this.selectionCell && this.selectionText}\n                {this.readCellContentsToAT && !this.selectionCell && this.contentsText}\n              </span>\n            )}\n            <slot onSlotchange={this.updateScreenReaderContentsText} />\n          </td>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","export const CSS = {\n  contentCell: \"content-cell\",\n  numberCell: \"number-cell\",\n  selectionCell: \"selection-cell\",\n  bodyRow: \"body-row\",\n  footerRow: \"footer-row\",\n  heading: \"heading\",\n  description: \"description\",\n  multipleSelectionCell: \"cell--multiple-selection\",\n  assistiveText: \"assistive-text\",\n  active: \"active\",\n  selectedCell: \"selected-cell\",\n  lastCell: \"last-cell\",\n  staticCell: \"static-cell\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-table-header-background: Specifies the background color of the component.\n * @prop --calcite-table-header-border-color: Specifies the border color of the component.\n */\n\n:host {\n  --calcite-internal-table-header-background: var(--calcite-table-header-background, var(--calcite-color-foreground-2));\n  --calcite-internal-table-header-border-color: var(--calcite-table-border-color, var(--calcite-color-border-3));\n  @apply contents;\n}\n\n:host([alignment=\"center\"]) th {\n  @apply text-center;\n}\n\n:host([alignment=\"end\"]) th {\n  @apply text-end;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\nth {\n  @apply text-color-1 text-start font-medium whitespace-normal;\n  font-size: var(--calcite-internal-table-cell-font-size);\n  border-inline-end: 1px solid var(--calcite-internal-table-header-border-color);\n  border-block-end: 1px solid var(--calcite-internal-table-header-border-color);\n  padding-block: calc(var(--calcite-internal-table-cell-padding) * 1.5);\n  padding-inline: var(--calcite-internal-table-cell-padding);\n  background-color: var(--calcite-internal-table-header-background);\n\n  &:not(.static-cell) {\n    @apply focus-base;\n    &:not(.static-cell):focus-within {\n      @apply focus-inset;\n    }\n  }\n}\n\nth:not(.center):not(.end).content-cell {\n  @apply align-top;\n}\n\nth.center {\n  @apply align-middle;\n}\n\nth.end.content-cell {\n  @apply align-bottom;\n}\n\nth.body-row,\nth.footer-row {\n  padding-block: var(--calcite-internal-table-cell-padding);\n  border-block-end: 0;\n}\n\nth.footer-row {\n  border-block-start: 1px solid var(--calcite-internal-table-header-border-color);\n}\n\nth.last-cell {\n  border-inline-end: 0;\n}\n\n.cell--multiple-selection {\n  @apply cursor-pointer align-middle text-color-3;\n  &:not(.end) {\n    @apply align-middle;\n  }\n}\n\n.selected-cell:not(.number-cell):not(.footer-cell) {\n  --calcite-internal-table-header-background: var(--calcite-color-foreground-current);\n}\n\n.number-cell,\n.selection-cell {\n  @apply text-color-2;\n  inline-size: 2rem;\n  min-inline-size: 2rem;\n}\n\n.selection-cell calcite-icon.active {\n  color: var(--calcite-color-brand);\n}\n.number-cell calcite-icon,\n.selection-cell calcite-icon {\n  @apply ms-auto me-auto align-middle;\n}\n\n.heading {\n  @apply text-color-1;\n}\n\n.description {\n  @apply text-color-3;\n  font-size: var(--calcite-internal-table-cell-font-size-secondary);\n}\n","import { Component, Element, h, Host, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { Alignment, Scale, SelectionMode } from \"../interfaces\";\nimport { RowType, TableInteractionMode } from \"../table/interfaces\";\nimport { getIconScale } from \"../../utils/component\";\nimport { TableHeaderMessages } from \"./assets/table-header/t9n\";\nimport { CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-table-header\",\n  styleUrl: \"table-header.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class TableHeader implements LocalizedComponent, LoadableComponent, T9nComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the alignment of the component. */\n  @Prop({ reflect: true }) alignment: Alignment = \"start\";\n\n  /** Specifies the number of columns the component should span. */\n  @Prop({ reflect: true }) colSpan: number;\n\n  /** A description to display beneath heading content. */\n  @Prop({ reflect: true }) description: string;\n\n  /** A heading to display above description content. */\n  @Prop({ reflect: true }) heading: string;\n\n  /** Specifies the number of rows the component should span. */\n  @Prop({ reflect: true }) rowSpan: number;\n\n  /** @internal */\n  @Prop() interactionMode: TableInteractionMode = \"interactive\";\n\n  /** @internal */\n  @Prop() lastCell: boolean;\n\n  /** @internal */\n  @Prop() numberCell = false;\n\n  /** @internal */\n  @Prop() parentRowAlignment: Alignment = \"start\";\n\n  /** @internal */\n  @Prop() parentRowIsSelected: boolean;\n\n  /** @internal */\n  @Prop() parentRowType: RowType;\n\n  /** @internal */\n  @Prop() positionInRow: number;\n\n  /** @internal */\n  @Prop() scale: Scale;\n\n  /** @internal */\n  @Prop() selectedRowCount: number;\n\n  /** @internal */\n  @Prop() selectedRowCountLocalized: string;\n\n  @Watch(\"selectedRowCount\")\n  @Watch(\"selectedRowCountLocalized\")\n  onSelectedChange(): void {\n    this.updateScreenReaderText();\n  }\n\n  /** @internal */\n  @Prop() selectionCell = false;\n\n  /** @internal */\n  @Prop() selectionMode: SelectionMode;\n\n  /** @internal */\n  @Prop() bodyRowCount: number;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: TableHeaderMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<TableHeaderMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.updateScreenReaderText();\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteTableHeaderElement;\n\n  @State() defaultMessages: TableHeaderMessages;\n\n  @State() focused = false;\n\n  @State() screenReaderText = \"\";\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  private containerEl: HTMLTableCellElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.containerEl.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private updateScreenReaderText(): void {\n    let text = \"\";\n    const sharedText = `${this.selectedRowCountLocalized} ${this.messages?.selected}`;\n    if (this.numberCell) {\n      text = this.messages?.rowNumber;\n    } else if (this.selectionMode === \"single\") {\n      text = `${this.messages?.selectionColumn}. ${sharedText}`;\n    } else if (this.bodyRowCount === this.selectedRowCount) {\n      text = `${this.messages?.selectionColumn}. ${this.messages?.all} ${sharedText} ${this.messages?.keyboardDeselectAll}`;\n    } else {\n      text = `${this.messages?.selectionColumn}. ${sharedText} ${this.messages?.keyboardSelectAll}`;\n    }\n    this.screenReaderText = text;\n  }\n\n  private onContainerBlur = (): void => {\n    this.focused = false;\n  };\n\n  private onContainerFocus = (): void => {\n    this.focused = true;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const scope = this.rowSpan\n      ? \"rowgroup\"\n      : this.colSpan\n        ? \"colgroup\"\n        : this.parentRowType === \"body\"\n          ? \"row\"\n          : \"col\";\n\n    const allSelected = this.selectedRowCount === this.bodyRowCount;\n    const selectionIcon = allSelected ? \"check-square-f\" : \"check-square\";\n    const staticCell = this.interactionMode === \"static\" && !this.selectionCell;\n    return (\n      <Host>\n        <th\n          aria-colindex={this.parentRowType === \"head\" ? this.positionInRow : undefined}\n          class={{\n            [CSS.bodyRow]: this.parentRowType === \"body\",\n            [CSS.footerRow]: this.parentRowType === \"foot\",\n            [CSS.contentCell]: !this.numberCell && !this.selectionCell,\n            [CSS.numberCell]: this.numberCell,\n            [CSS.selectionCell]: this.selectionCell,\n            [CSS.selectedCell]: this.parentRowIsSelected,\n            [CSS.multipleSelectionCell]: this.selectionMode === \"multiple\",\n            [CSS.staticCell]: staticCell,\n            [CSS.lastCell]: this.lastCell && (!this.rowSpan || (this.colSpan && !!this.rowSpan)),\n            [this.parentRowAlignment]:\n              this.parentRowAlignment === \"center\" || this.parentRowAlignment === \"end\",\n          }}\n          colSpan={this.colSpan}\n          onBlur={this.onContainerBlur}\n          onFocus={this.onContainerFocus}\n          ref={(el) => (this.containerEl = el)}\n          role={this.parentRowType === \"head\" ? \"columnheader\" : \"rowheader\"}\n          rowSpan={this.rowSpan}\n          scope={scope}\n          tabIndex={this.selectionCell ? 0 : staticCell ? -1 : 0}\n        >\n          {this.heading && <div class={CSS.heading}>{this.heading}</div>}\n          {this.description && <div class={CSS.description}>{this.description}</div>}\n          {this.selectionCell && this.selectionMode === \"multiple\" && (\n            <calcite-icon\n              class={{ [CSS.active]: allSelected }}\n              icon={selectionIcon}\n              scale={getIconScale(this.scale)}\n            />\n          )}\n          {(this.selectionCell || this.numberCell) && (\n            <span\n              aria-hidden={true}\n              aria-live={this.focused ? \"polite\" : \"off\"}\n              class={CSS.assistiveText}\n            >\n              {this.screenReaderText}\n            </span>\n          )}\n        </th>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}