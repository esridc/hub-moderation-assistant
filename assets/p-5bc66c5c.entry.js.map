{"version":3,"names":["CSS","container","TOOLTIP_OPEN_DELAY_MS","TOOLTIP_CLOSE_DELAY_MS","ARIA_DESCRIBED_BY","getEffectiveReferenceElement","tooltip","referenceElement","queryElementRoots","id","TooltipManager","constructor","this","registeredElements","WeakMap","registeredShadowRootCounts","hoverOpenTimeout","hoverCloseTimeout","activeTooltip","registeredElementCount","queryTooltip","composedPath","registeredElement","find","pathEl","has","get","keyDownHandler","event","key","defaultPrevented","open","clearHoverTimeout","closeActiveTooltip","Element","contains","target","preventDefault","pointerMoveHandler","pathHasOpenTooltip","openHoveredTooltip","closeHoveredTooltip","clickHandler","closeOnClick","toggleTooltip","blurHandler","focusInHandler","closeTooltipIfNotActive","toggleFocusedTooltip","window","setTimeout","clearHoverCloseTimeout","registerElement","referenceEl","set","shadowRoot","getReferenceElShadowRootNode","registerShadowRoot","addListeners","unregisterElement","unregisterShadowRoot","delete","removeListeners","includes","addShadowListeners","addEventListener","capture","removeShadowListeners","removeEventListener","clearHoverOpenTimeout","clearTimeout","count","newCount","Math","min","max","getShadowRootNode","tooltipCss","CalciteTooltipStyle0","manager","Tooltip","guid","hasLoaded","openTransitionProp","setTransitionEl","el","transitionEl","setUpReferenceElement","warn","removeReferences","effectiveReferenceElement","connectFloatingUI","console","tagName","addReferences","getId","setAttribute","removeAttribute","defaultOffsetDistance","offsetDistanceOffsetHandler","reposition","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","connectedCallback","componentWillLoad","componentDidLoad","disconnectedCallback","disconnectFloatingUI","delayed","placement","overlayPositioning","offsetDistance","offsetSkidding","arrowEl","floatingEl","type","onBeforeOpen","calciteTooltipBeforeOpen","emit","onOpen","calciteTooltipOpen","onBeforeClose","calciteTooltipBeforeClose","onClose","calciteTooltipClose","render","label","floatingLayout","displayed","hidden","h","Host","toAriaBoolean","role","class","FloatingCSS","animation","animationActive","ref","FloatingArrow"],"sources":["src/components/tooltip/resources.ts","src/components/tooltip/utils.ts","src/components/tooltip/TooltipManager.ts","src/components/tooltip/tooltip.scss?tag=calcite-tooltip&encapsulation=shadow","src/components/tooltip/tooltip.tsx"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n};\n\nexport const TOOLTIP_OPEN_DELAY_MS = 300;\nexport const TOOLTIP_CLOSE_DELAY_MS = 500;\n\nexport const ARIA_DESCRIBED_BY = \"aria-describedby\";\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { queryElementRoots } from \"../../utils/dom\";\n\nexport function getEffectiveReferenceElement(tooltip: HTMLCalciteTooltipElement): ReferenceElement {\n  const { referenceElement } = tooltip;\n\n  return (\n    (typeof referenceElement === \"string\" ? queryElementRoots(tooltip, { id: referenceElement }) : referenceElement) ||\n    null\n  );\n}\n","import { getShadowRootNode } from \"../../utils/dom\";\nimport { ReferenceElement } from \"../../utils/floating-ui\";\nimport { TOOLTIP_OPEN_DELAY_MS, TOOLTIP_CLOSE_DELAY_MS } from \"./resources\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nexport default class TooltipManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new WeakMap<ReferenceElement, HTMLCalciteTooltipElement>();\n\n  private registeredShadowRootCounts = new WeakMap<ShadowRoot, number>();\n\n  private hoverOpenTimeout: number = null;\n\n  private hoverCloseTimeout: number = null;\n\n  private activeTooltip: HTMLCalciteTooltipElement = null;\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, tooltip: HTMLCalciteTooltipElement): void {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, tooltip);\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.registerShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.unregisterShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryTooltip = (composedPath: EventTarget[]): HTMLCalciteTooltipElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.key === \"Escape\" && !event.defaultPrevented) {\n      const { activeTooltip } = this;\n\n      if (activeTooltip?.open) {\n        this.clearHoverTimeout();\n        this.closeActiveTooltip();\n\n        const referenceElement = getEffectiveReferenceElement(activeTooltip);\n\n        if (referenceElement instanceof Element && referenceElement.contains(event.target as HTMLElement)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  private pointerMoveHandler = (event: PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const { activeTooltip } = this;\n\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    if (tooltip) {\n      this.openHoveredTooltip(tooltip);\n    } else if (activeTooltip?.open) {\n      this.closeHoveredTooltip();\n    }\n  };\n\n  private pathHasOpenTooltip(tooltip: HTMLCalciteTooltipElement, composedPath: EventTarget[]): boolean {\n    const { activeTooltip } = this;\n\n    return (\n      (activeTooltip?.open && composedPath.includes(activeTooltip)) || (tooltip?.open && composedPath.includes(tooltip))\n    );\n  }\n\n  private clickHandler = (event: Event): void => {\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    this.closeActiveTooltip();\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.clearHoverTimeout();\n\n    if (tooltip.closeOnClick) {\n      this.toggleTooltip(tooltip, false);\n      return;\n    }\n\n    this.toggleTooltip(tooltip, true);\n  };\n\n  private blurHandler = (): void => {\n    this.closeActiveTooltip();\n  };\n\n  private focusInHandler = (event: FocusEvent): void => {\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    this.closeTooltipIfNotActive(tooltip);\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.toggleFocusedTooltip(tooltip, true);\n  };\n\n  private addShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private removeShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private addListeners(): void {\n    window.addEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.addEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.addEventListener(\"click\", this.clickHandler, { capture: true });\n    window.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.addEventListener(\"blur\", this.blurHandler);\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.removeEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.removeEventListener(\"click\", this.clickHandler, { capture: true });\n    window.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.removeEventListener(\"blur\", this.blurHandler);\n  }\n\n  private clearHoverOpenTimeout(): void {\n    window.clearTimeout(this.hoverOpenTimeout);\n    this.hoverOpenTimeout = null;\n  }\n\n  private clearHoverCloseTimeout(): void {\n    window.clearTimeout(this.hoverCloseTimeout);\n    this.hoverCloseTimeout = null;\n  }\n\n  private clearHoverTimeout(): void {\n    this.clearHoverOpenTimeout();\n    this.clearHoverCloseTimeout();\n  }\n\n  private closeTooltipIfNotActive(tooltip: HTMLCalciteTooltipElement): void {\n    if (this.activeTooltip !== tooltip) {\n      this.closeActiveTooltip();\n    }\n  }\n\n  private closeActiveTooltip(): void {\n    const { activeTooltip } = this;\n\n    if (activeTooltip?.open) {\n      this.toggleTooltip(activeTooltip, false);\n    }\n  }\n\n  private toggleFocusedTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    if (open) {\n      this.clearHoverTimeout();\n    }\n\n    this.toggleTooltip(tooltip, open);\n  }\n\n  private toggleTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    tooltip.open = open;\n\n    this.activeTooltip = open ? tooltip : null;\n  }\n\n  private openHoveredTooltip = (tooltip: HTMLCalciteTooltipElement): void => {\n    this.hoverOpenTimeout = window.setTimeout(\n      () => {\n        if (this.hoverOpenTimeout === null) {\n          return;\n        }\n\n        this.clearHoverCloseTimeout();\n        this.closeTooltipIfNotActive(tooltip);\n        this.toggleTooltip(tooltip, true);\n      },\n      this.activeTooltip?.open ? 0 : TOOLTIP_OPEN_DELAY_MS,\n    );\n  };\n\n  private closeHoveredTooltip = (): void => {\n    this.hoverCloseTimeout = window.setTimeout(() => {\n      if (this.hoverCloseTimeout === null) {\n        return;\n      }\n\n      this.closeActiveTooltip();\n    }, TOOLTIP_CLOSE_DELAY_MS);\n  };\n\n  private registerShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.min((typeof count === \"number\" ? count : 0) + 1, 1);\n\n    if (newCount === 1) {\n      this.addShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private unregisterShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.max((typeof count === \"number\" ? count : 1) - 1, 0);\n\n    if (newCount === 0) {\n      this.removeShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private getReferenceElShadowRootNode(referenceEl: ReferenceElement): ShadowRoot | null {\n    return referenceEl instanceof Element ? getShadowRootNode(referenceEl) : null;\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-tooltip-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-tooltip-z-index, theme(\"zIndex.tooltip\"));\n}\n\n@include floatingUIHost();\n@include floatingUIArrow();\n\n.container {\n  @apply text-color-1\n    text-n2-wrap\n    relative\n    overflow-hidden\n    rounded\n    py-3\n    px-4\n    font-medium;\n  max-inline-size: 20rem;\n  max-block-size: 20rem;\n  text-align: start;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\nimport { ARIA_DESCRIBED_BY, CSS } from \"./resources\";\nimport TooltipManager from \"./TooltipManager\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nconst manager = new TooltipManager();\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-tooltip\",\n  styleUrl: \"tooltip.scss\",\n  shadow: true,\n})\nexport class Tooltip implements FloatingUIComponent, OpenCloseComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Closes the component when the `referenceElement` is clicked. */\n  @Prop({ reflect: true }) closeOnClick = false;\n\n  /**\n   * Accessible name for the component.\n   *\n   * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.\n   */\n  @Prop() label: string;\n\n  /**\n   * Offset the position of the component away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offset the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * The `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * The `referenceElement` to position the component according to its `\"placement\"` value.\n   *\n   * Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n   *\n   * However, a string ID of the reference element can be used.\n   */\n  @Prop() referenceElement: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTooltipElement;\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  arrowEl: SVGElement;\n\n  guid = `calcite-tooltip-${guid()}`;\n\n  hasLoaded = false;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpReferenceElement(true);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  async componentWillLoad(): Promise<void> {\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"tooltip\",\n      },\n      delayed,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteTooltipBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteTooltipOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteTooltipBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteTooltipClose.emit();\n  }\n\n  private setTransitionEl = (el): void => {\n    this.transitionEl = el;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = getEffectiveReferenceElement(this.el);\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_DESCRIBED_BY, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_DESCRIBED_BY);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { effectiveReferenceElement, label, open, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"tooltip\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          ref={this.setTransitionEl}\n        >\n          <FloatingArrow\n            floatingLayout={floatingLayout}\n            ref={(arrowEl: SVGElement) => (this.arrowEl = arrowEl)}\n          />\n          <div class={CSS.container}>\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}