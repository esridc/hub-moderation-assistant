{"version":3,"names":["CSS","assistiveText","characterLimit","content","container","footer","resizeDisabled","resizeDisabledX","resizeDisabledY","characterOverLimit","readOnly","textAreaInvalid","footerSlotted","borderColor","hide","blockSizeFull","footerEndSlotOnly","SLOTS","footerStart","footerEnd","RESIZE_TIMEOUT","textAreaCss","CalciteTextAreaStyle0","TextArea","this","guid","handleInput","event","value","target","calciteTextAreaInput","emit","handleChange","calciteTextAreaChange","contentSlotChangeHandler","nodes","el","childNodes","forEach","nodeName","nodeValue","trim","renderCharacterLimit","maxLength","localizedCharacterLengthObj","getLocalizedCharacterLength","h","class","isCharacterLimitExceeded","currentLength","resizeObserver","createObserver","async","componentLoaded","textAreaHeight","textAreaWidth","elHeight","elWidth","footerHeight","footerWidth","getHeightAndWidthOfElements","footerEl","style","width","setHeightAndWidthToAuto","setTextAreaEl","textAreaEl","observe","throttle","resize","height","leading","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","handleGlobalAttributesChanged","forceUpdate","onMessagesChange","connectedCallback","connectInteractive","connectLabel","connectForm","connectLocalized","connectMessages","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","setTextAreaHeight","disconnectedCallback","disconnectInteractive","disconnectLabel","disconnectForm","disconnectLocalized","disconnectMessages","disconnect","render","hasFooter","startSlotHasElements","endSlotHasElements","Host","key","InteractiveContainer","disabled","toAriaBoolean","getLabelText","autofocus","cols","columns","name","onChange","onInput","placeholder","ref","required","rows","wrap","onSlotchange","slotChangeHasAssignedElement","HiddenFormInputSlot","component","id","replacePlaceHoldersInMessages","validationMessage","status","Validation","icon","validationIcon","message","scale","setFocus","componentFocusable","focus","selectText","select","effectiveLocaleChange","updateMessages","effectiveLocale","onLabelClick","length","toString","numberingSystem","numberStringFormatter","numberFormatOptions","locale","signDisplay","useGrouping","groupSeparator","localize","syncHiddenFormInput","input","setCustomValidity","getBoundingClientRect","messages","replace"],"sources":["src/components/text-area/resources.ts","src/components/text-area/text-area.scss?tag=calcite-text-area&encapsulation=shadow","src/components/text-area/text-area.tsx"],"sourcesContent":["export const CSS = {\n  assistiveText: \"assistive-text\",\n  characterLimit: \"character-limit\",\n  content: \"content\",\n  container: \"container\",\n  footer: \"footer\",\n  resizeDisabled: \"resize--disabled\",\n  resizeDisabledX: \"resize--disabled-x\",\n  resizeDisabledY: \"resize--disabled-y\",\n  characterOverLimit: \"character--over-limit\",\n  readOnly: \"readonly\",\n  textAreaInvalid: \"text-area--invalid\",\n  footerSlotted: \"footer--slotted\",\n  borderColor: \"border--color\",\n  hide: \"hide\",\n  blockSizeFull: \"block-size--full\",\n  footerEndSlotOnly: \"footer--end-only\",\n};\n\nexport const SLOTS = {\n  footerStart: \"footer-start\",\n  footerEnd: \"footer-end\",\n};\n\nexport const RESIZE_TIMEOUT = 100;\n",":host {\n  @apply inline-block\n  relative\n  w-full\n  h-full;\n}\n\ntextarea {\n  @apply font-sans\n    text-color-1\n    relative\n    block\n    bg-foreground-1\n    box-border\n    border-color-input\n    border\n    w-full\n    m-0;\n  min-inline-size: theme(\"spacing.48\");\n  border-block-end: 1px solid var(--calcite-color-border-3);\n  @media screen and (max-width: 480px) {\n    @apply resize-none;\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n  &.text-area--invalid {\n    @apply border-color-danger\n    border\n    border-solid\n    border-b;\n    &:focus {\n      @apply focus-inset-danger;\n    }\n  }\n  &.footer--slotted {\n    min-inline-size: theme(\"spacing.72\");\n  }\n}\n\n.footer {\n  @apply flex\n  bg-foreground-1\n  box-border\n  border-color-input\n  border\n  border-solid\n  border-t-0\n  items-center;\n}\n\n.character-limit {\n  @apply flex\n  justify-end\n  text-color-2\n  items-center\n  font-normal\n  whitespace-nowrap;\n}\n\n.character--over-limit {\n  @apply font-bold\n  text-danger;\n}\n\n:host([resize=\"none\"]) textarea {\n  @apply resize-none;\n}\n\n:host([resize=\"horizontal\"]) textarea {\n  @apply resize-x;\n}\n\n:host([resize=\"vertical\"]) textarea {\n  @apply resize-y;\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n2;\n  .footer {\n    @apply py-1\n    px-2;\n    min-block-size: 1.75rem;\n  }\n  textarea {\n    @apply py-1\n    px-2;\n  }\n\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-n2\n    pl-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  textarea {\n    @apply py-2\n    px-3;\n  }\n  .footer {\n    @apply py-2\n    px-3;\n    min-block-size: 2.25rem;\n  }\n\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-n1\n    pl-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  @apply text-0;\n  textarea {\n    @apply py-3\n    px-4;\n  }\n  .footer {\n    @apply py-3\n    px-4;\n    min-block-size: 2.75rem;\n  }\n\n  textarea,\n  .footer,\n  .character-limit {\n    @apply text-0\n    pl-4;\n  }\n}\n\n:host([status=\"invalid\"]) {\n  textarea {\n    @apply border-color-danger;\n  }\n  textarea:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n.readonly {\n  @apply bg-background font-medium;\n}\n\n.border--color {\n  @apply border-b border-color-input;\n  &:focus {\n    @apply border-b-2;\n  }\n}\n\ntextarea.block-size--full {\n  @apply h-full;\n}\n\n.content,\n.hide {\n  @apply hidden;\n}\n\n.container {\n  @apply flex\n  justify-between\n  w-full;\n}\n\n.footer--end-only {\n  @apply justify-end;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include disabled();\n@include base-component();\n","import {\n  Component,\n  h,\n  Prop,\n  Element,\n  Event,\n  EventEmitter,\n  VNode,\n  Watch,\n  Method,\n  Host,\n  State,\n  forceUpdate,\n} from \"@stencil/core\";\nimport { throttle } from \"lodash-es\";\nimport {\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport { slotChangeHasAssignedElement, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  NumberingSystem,\n  numberStringFormatter,\n} from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  componentFocusable,\n  componentLoaded,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { guid } from \"../../utils/guid\";\nimport { Status } from \"../interfaces\";\nimport { Validation } from \"../functional/Validation\";\nimport { syncHiddenFormInput, TextualInputComponent } from \"../input/common/input\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CharacterLengthObj } from \"./interfaces\";\nimport { TextAreaMessages } from \"./assets/text-area/t9n\";\nimport { CSS, SLOTS, RESIZE_TIMEOUT } from \"./resources\";\n\n/**\n * @slot - A slot for adding text.\n * @slot footer-start - A slot for adding content to the start of the component's footer.\n * @slot footer-end - A slot for adding content to the end of the component's footer.\n */\n\n@Component({\n  tag: \"calcite-text-area\",\n  styleUrl: \"text-area.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class TextArea\n  implements\n    FormComponent,\n    LabelableComponent,\n    LocalizedComponent,\n    LoadableComponent,\n    T9nComponent,\n    InteractiveComponent,\n    Omit<TextualInputComponent, \"pattern\">\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"autofocus\")\n  handleGlobalAttributesChanged(): void {\n    forceUpdate(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Specifies the component's number of columns.\n   *\n   * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)\n   */\n  @Prop({ reflect: true }) columns: number;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   *\n   * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /**\n   * When `true`, number values are displayed with a group separator corresponding to the language and country format.\n   */\n  @Prop({ reflect: true }) groupSeparator = false;\n\n  /**\n   * Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Specifies the minimum number of characters allowed.\n   *\n   * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)\n   */\n  @Prop({ reflect: true }) minLength: number;\n\n  /**\n   * Specifies the maximum number of characters allowed.\n   *\n   * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)\n   */\n  @Prop({ reflect: true }) maxLength: number;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: TextAreaMessages;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /**\n   * Specifies the Unicode numeral system used by the component for localization.\n   */\n  @Prop() numberingSystem: NumberingSystem;\n\n  /**\n   * Specifies the placeholder text for the component.\n   *\n   * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * When `true`, the component's `value` can be read, but cannot be modified.\n   *\n   * @readonly\n   * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies if the component is resizable. */\n  @Prop({ reflect: true }) resize: \"both\" | \"horizontal\" | \"vertical\" | \"none\" = \"both\";\n\n  /**\n   * Specifies the component's number of rows.\n   *\n   * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)\n   */\n  @Prop({ reflect: true }) rows: number;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: \"l\" | \"m\" | \"s\" = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** The component's value. */\n  @Prop({ mutable: true }) value = \"\";\n\n  /**\n   * Specifies the wrapping mechanism for the text.\n   *\n   * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)\n   */\n  @Prop({ reflect: true }) wrap: \"soft\" | \"hard\" = \"soft\";\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<TextAreaMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Emitters\n  //\n  //--------------------------------------------------------------------------\n  /**\n   * Fires each time a new `value` is typed.\n   */\n  @Event() calciteTextAreaInput: EventEmitter<void>;\n\n  /**\n   * Fires each time a new `value` is typed and committed.\n   */\n  @Event() calciteTextAreaChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n    this.setTextAreaHeight();\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  render(): VNode {\n    const hasFooter = this.startSlotHasElements || this.endSlotHasElements || !!this.maxLength;\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <textarea\n            aria-describedby={this.guid}\n            aria-invalid={toAriaBoolean(this.isCharacterLimitExceeded())}\n            aria-label={getLabelText(this)}\n            autofocus={this.el.autofocus}\n            class={{\n              [CSS.readOnly]: this.readOnly,\n              [CSS.textAreaInvalid]: this.isCharacterLimitExceeded(),\n              [CSS.footerSlotted]: this.endSlotHasElements && this.startSlotHasElements,\n              [CSS.blockSizeFull]: !hasFooter,\n              [CSS.borderColor]: !hasFooter,\n            }}\n            cols={this.columns}\n            disabled={this.disabled}\n            name={this.name}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            placeholder={this.placeholder}\n            readOnly={this.readOnly}\n            ref={this.setTextAreaEl}\n            required={this.required}\n            rows={this.rows}\n            value={this.value}\n            wrap={this.wrap}\n          />\n          <span class={{ [CSS.content]: true }}>\n            <slot onSlotchange={this.contentSlotChangeHandler} />\n          </span>\n          <footer\n            class={{\n              [CSS.footer]: true,\n              [CSS.readOnly]: this.readOnly,\n              [CSS.hide]: !hasFooter,\n            }}\n            ref={(el) => (this.footerEl = el as HTMLElement)}\n          >\n            <div\n              class={{\n                [CSS.container]: true,\n                [CSS.footerEndSlotOnly]: !this.startSlotHasElements && this.endSlotHasElements,\n              }}\n            >\n              <slot\n                name={SLOTS.footerStart}\n                onSlotchange={(event) =>\n                  (this.startSlotHasElements = slotChangeHasAssignedElement(event))\n                }\n              />\n              <slot\n                name={SLOTS.footerEnd}\n                onSlotchange={(event) =>\n                  (this.endSlotHasElements = slotChangeHasAssignedElement(event))\n                }\n              />\n            </div>\n            {this.renderCharacterLimit()}\n          </footer>\n          <HiddenFormInputSlot component={this} />\n          {this.isCharacterLimitExceeded() && (\n            <span aria-hidden={true} aria-live=\"polite\" class={CSS.assistiveText} id={this.guid}>\n              {this.replacePlaceHoldersInMessages()}\n            </span>\n          )}\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.textAreaEl.focus();\n  }\n\n  /** Selects the text of the component's `value`. */\n  @Method()\n  async selectText(): Promise<void> {\n    await componentLoaded(this);\n    this.textAreaEl.select();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties/ State\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTextAreaElement;\n\n  defaultValue: TextArea[\"value\"];\n\n  footerEl: HTMLElement;\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  textAreaEl: HTMLTextAreaElement;\n\n  @State() defaultMessages: TextAreaMessages;\n\n  @State() endSlotHasElements: boolean;\n\n  @State() startSlotHasElements: boolean;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  private guid = guid();\n\n  private localizedCharacterLengthObj: CharacterLengthObj;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  handleInput = (event: InputEvent): void => {\n    this.value = event.target[\"value\"];\n    this.calciteTextAreaInput.emit();\n  };\n\n  handleChange = (): void => {\n    this.calciteTextAreaChange.emit();\n  };\n\n  contentSlotChangeHandler = (): void => {\n    if (!this.value) {\n      const nodes = this.el.childNodes;\n      nodes.forEach((el) => {\n        if (el.nodeName === \"#text\") {\n          this.value = el.nodeValue.trim();\n        }\n      });\n    }\n  };\n\n  renderCharacterLimit = (): VNode | null => {\n    if (this.maxLength) {\n      this.localizedCharacterLengthObj = this.getLocalizedCharacterLength();\n      return (\n        <span class={CSS.characterLimit}>\n          <span class={{ [CSS.characterOverLimit]: this.isCharacterLimitExceeded() }}>\n            {this.localizedCharacterLengthObj.currentLength}\n          </span>\n          {\"/\"}\n          {this.localizedCharacterLengthObj.maxLength}\n        </span>\n      );\n    }\n    return null;\n  };\n\n  getLocalizedCharacterLength(): CharacterLengthObj {\n    const currentLength = this.value ? this.value.length.toString() : \"0\";\n    const maxLength = this.maxLength.toString();\n    if (this.numberingSystem === \"latn\") {\n      return { currentLength, maxLength };\n    }\n\n    numberStringFormatter.numberFormatOptions = {\n      locale: this.effectiveLocale,\n      numberingSystem: this.numberingSystem,\n      signDisplay: \"never\",\n      useGrouping: this.groupSeparator,\n    };\n    return {\n      currentLength: numberStringFormatter.localize(currentLength),\n      maxLength: numberStringFormatter.localize(maxLength),\n    };\n  }\n\n  resizeObserver = createObserver(\"resize\", async () => {\n    await componentLoaded(this);\n    const { textAreaHeight, textAreaWidth, elHeight, elWidth, footerHeight, footerWidth } =\n      this.getHeightAndWidthOfElements();\n    if (footerWidth > 0 && footerWidth !== textAreaWidth) {\n      this.footerEl.style.width = `${textAreaWidth}px`;\n    }\n    if (elWidth !== textAreaWidth || elHeight !== textAreaHeight + (footerHeight || 0)) {\n      this.setHeightAndWidthToAuto();\n    }\n  });\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    input.setCustomValidity(\"\");\n    if (this.isCharacterLimitExceeded()) {\n      input.setCustomValidity(this.replacePlaceHoldersInMessages());\n    }\n\n    syncHiddenFormInput(\"textarea\", this, input);\n  }\n\n  setTextAreaEl = (el: HTMLTextAreaElement): void => {\n    this.textAreaEl = el;\n    this.resizeObserver.observe(el);\n  };\n\n  setTextAreaHeight(): void {\n    const { textAreaHeight, elHeight, footerHeight } = this.getHeightAndWidthOfElements();\n    if (footerHeight > 0 && textAreaHeight + footerHeight != elHeight) {\n      this.textAreaEl.style.height = `${elHeight - footerHeight}px`;\n    }\n  }\n\n  getHeightAndWidthOfElements(): {\n    textAreaHeight: number;\n    textAreaWidth: number;\n    elHeight: number;\n    elWidth: number;\n    footerHeight: number;\n    footerWidth: number;\n  } {\n    const { height: textAreaHeight, width: textAreaWidth } =\n      this.textAreaEl.getBoundingClientRect();\n    const { height: elHeight, width: elWidth } = this.el.getBoundingClientRect();\n    const { height: footerHeight, width: footerWidth } = this.footerEl.getBoundingClientRect();\n\n    return {\n      textAreaHeight,\n      textAreaWidth,\n      elHeight,\n      elWidth,\n      footerHeight,\n      footerWidth,\n    };\n  }\n\n  private replacePlaceHoldersInMessages(): string {\n    return this.messages.tooLong\n      .replace(\"{maxLength}\", this.localizedCharacterLengthObj.maxLength)\n      .replace(\"{currentLength}\", this.localizedCharacterLengthObj.currentLength);\n  }\n\n  // height and width are set to auto here to avoid overlapping on to neighboring elements in the layout when user starts resizing.\n  // throttle is used to avoid flashing of textarea when user resizes.\n  private setHeightAndWidthToAuto = throttle(\n    (): void => {\n      if (this.resize === \"vertical\" || this.resize === \"both\") {\n        this.el.style.height = \"auto\";\n      }\n      if (this.resize === \"horizontal\" || this.resize === \"both\") {\n        this.el.style.width = \"auto\";\n      }\n    },\n    RESIZE_TIMEOUT,\n    { leading: false },\n  );\n\n  private isCharacterLimitExceeded(): boolean {\n    return this.value?.length > this.maxLength;\n  }\n}\n"],"mappings":"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","ignoreList":[]}